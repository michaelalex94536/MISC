
F407_Timer1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003dac  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08003f3c  08003f3c  00004f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fb8  08003fb8  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  08003fb8  08003fb8  00004fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003fc0  08003fc0  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fc0  08003fc0  00004fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003fc4  08003fc4  00004fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003fc8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005068  2**0
                  CONTENTS
 10 .bss          00000200  20000068  20000068  00005068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000268  20000268  00005068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c180  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ab5  00000000  00000000  00011218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c50  00000000  00000000  00012cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000099e  00000000  00000000  00013920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021b59  00000000  00000000  000142be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d7c5  00000000  00000000  00035e17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd03a  00000000  00000000  000435dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00110616  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003b98  00000000  00000000  0011065c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  001141f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003f24 	.word	0x08003f24

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08003f24 	.word	0x08003f24

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b086      	sub	sp, #24
 8000564:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000566:	f000 fc6f 	bl	8000e48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056a:	f000 f879 	bl	8000660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056e:	f000 f9a3 	bl	80008b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000572:	f000 f977 	bl	8000864 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8000576:	f000 f8dd 	bl	8000734 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  printf("Program starting ...\r\n");
 800057a:	4834      	ldr	r0, [pc, #208]	@ (800064c <main+0xec>)
 800057c:	f002 fe70 	bl	8003260 <puts>

  // Gotta start the counter or nuthin' happens
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000580:	2100      	movs	r1, #0
 8000582:	4833      	ldr	r0, [pc, #204]	@ (8000650 <main+0xf0>)
 8000584:	f001 fc94 	bl	8001eb0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000588:	2104      	movs	r1, #4
 800058a:	4831      	ldr	r0, [pc, #196]	@ (8000650 <main+0xf0>)
 800058c:	f001 fc90 	bl	8001eb0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000590:	2108      	movs	r1, #8
 8000592:	482f      	ldr	r0, [pc, #188]	@ (8000650 <main+0xf0>)
 8000594:	f001 fc8c 	bl	8001eb0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000598:	210c      	movs	r1, #12
 800059a:	482d      	ldr	r0, [pc, #180]	@ (8000650 <main+0xf0>)
 800059c:	f001 fc88 	bl	8001eb0 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint32_t now = 0;
 80005a0:	2300      	movs	r3, #0
 80005a2:	607b      	str	r3, [r7, #4]
  uint32_t loop_cnt = 0;
 80005a4:	2300      	movs	r3, #0
 80005a6:	617b      	str	r3, [r7, #20]
  uint32_t next_tick = 1000;
 80005a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005ac:	613b      	str	r3, [r7, #16]
  uint32_t next_change = 0;
 80005ae:	2300      	movs	r3, #0
 80005b0:	60fb      	str	r3, [r7, #12]

  uint16_t pwm_value = 0;
 80005b2:	2300      	movs	r3, #0
 80005b4:	817b      	strh	r3, [r7, #10]
  int8_t pwm_change = 10;
 80005b6:	230a      	movs	r3, #10
 80005b8:	727b      	strb	r3, [r7, #9]

  while (1)
  {
	now = uwTick;     // Same as HAL_GetTick()
 80005ba:	4b26      	ldr	r3, [pc, #152]	@ (8000654 <main+0xf4>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	607b      	str	r3, [r7, #4]

	 if(now >= next_tick)
 80005c0:	687a      	ldr	r2, [r7, #4]
 80005c2:	693b      	ldr	r3, [r7, #16]
 80005c4:	429a      	cmp	r2, r3
 80005c6:	d30f      	bcc.n	80005e8 <main+0x88>
	 {
		 printf("Tick %lu (loop = %lu)\r\n", now/1000, loop_cnt);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	4a23      	ldr	r2, [pc, #140]	@ (8000658 <main+0xf8>)
 80005cc:	fba2 2303 	umull	r2, r3, r2, r3
 80005d0:	099b      	lsrs	r3, r3, #6
 80005d2:	697a      	ldr	r2, [r7, #20]
 80005d4:	4619      	mov	r1, r3
 80005d6:	4821      	ldr	r0, [pc, #132]	@ (800065c <main+0xfc>)
 80005d8:	f002 fdda 	bl	8003190 <iprintf>

		 loop_cnt = 0;
 80005dc:	2300      	movs	r3, #0
 80005de:	617b      	str	r3, [r7, #20]
		 next_tick = now + 1000;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80005e6:	613b      	str	r3, [r7, #16]
	 }
	 loop_cnt++;
 80005e8:	697b      	ldr	r3, [r7, #20]
 80005ea:	3301      	adds	r3, #1
 80005ec:	617b      	str	r3, [r7, #20]

	 if(now >= next_change)
 80005ee:	687a      	ldr	r2, [r7, #4]
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	429a      	cmp	r2, r3
 80005f4:	d3e1      	bcc.n	80005ba <main+0x5a>
	 {
		 __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pwm_value);
 80005f6:	4b16      	ldr	r3, [pc, #88]	@ (8000650 <main+0xf0>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	897a      	ldrh	r2, [r7, #10]
 80005fc:	635a      	str	r2, [r3, #52]	@ 0x34
		 __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, pwm_value - 250);
 80005fe:	897b      	ldrh	r3, [r7, #10]
 8000600:	f1a3 02fa 	sub.w	r2, r3, #250	@ 0xfa
 8000604:	4b12      	ldr	r3, [pc, #72]	@ (8000650 <main+0xf0>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	639a      	str	r2, [r3, #56]	@ 0x38
		 __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, pwm_value - 750);
 800060a:	897b      	ldrh	r3, [r7, #10]
 800060c:	f2a3 22ee 	subw	r2, r3, #750	@ 0x2ee
 8000610:	4b0f      	ldr	r3, [pc, #60]	@ (8000650 <main+0xf0>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	63da      	str	r2, [r3, #60]	@ 0x3c
		 __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, pwm_value - 500);
 8000616:	897b      	ldrh	r3, [r7, #10]
 8000618:	f5a3 72fa 	sub.w	r2, r3, #500	@ 0x1f4
 800061c:	4b0c      	ldr	r3, [pc, #48]	@ (8000650 <main+0xf0>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	641a      	str	r2, [r3, #64]	@ 0x40

		 pwm_value += pwm_change;
 8000622:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8000626:	b29a      	uxth	r2, r3
 8000628:	897b      	ldrh	r3, [r7, #10]
 800062a:	4413      	add	r3, r2
 800062c:	817b      	strh	r3, [r7, #10]

		 if(pwm_value == 0) pwm_change = 10;
 800062e:	897b      	ldrh	r3, [r7, #10]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d101      	bne.n	8000638 <main+0xd8>
 8000634:	230a      	movs	r3, #10
 8000636:	727b      	strb	r3, [r7, #9]
		 if(pwm_value == 1000) pwm_change = -10;
 8000638:	897b      	ldrh	r3, [r7, #10]
 800063a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800063e:	d101      	bne.n	8000644 <main+0xe4>
 8000640:	23f6      	movs	r3, #246	@ 0xf6
 8000642:	727b      	strb	r3, [r7, #9]

		 next_change = now + 10;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	330a      	adds	r3, #10
 8000648:	60fb      	str	r3, [r7, #12]
	now = uwTick;     // Same as HAL_GetTick()
 800064a:	e7b6      	b.n	80005ba <main+0x5a>
 800064c:	08003f3c 	.word	0x08003f3c
 8000650:	20000084 	.word	0x20000084
 8000654:	20000118 	.word	0x20000118
 8000658:	10624dd3 	.word	0x10624dd3
 800065c:	08003f54 	.word	0x08003f54

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b094      	sub	sp, #80	@ 0x50
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 0320 	add.w	r3, r7, #32
 800066a:	2230      	movs	r2, #48	@ 0x30
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f002 fdfe 	bl	8003270 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	f107 030c 	add.w	r3, r7, #12
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	4b28      	ldr	r3, [pc, #160]	@ (800072c <SystemClock_Config+0xcc>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800068c:	4a27      	ldr	r2, [pc, #156]	@ (800072c <SystemClock_Config+0xcc>)
 800068e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000692:	6413      	str	r3, [r2, #64]	@ 0x40
 8000694:	4b25      	ldr	r3, [pc, #148]	@ (800072c <SystemClock_Config+0xcc>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000698:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a0:	2300      	movs	r3, #0
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	4b22      	ldr	r3, [pc, #136]	@ (8000730 <SystemClock_Config+0xd0>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a21      	ldr	r2, [pc, #132]	@ (8000730 <SystemClock_Config+0xd0>)
 80006aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006ae:	6013      	str	r3, [r2, #0]
 80006b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000730 <SystemClock_Config+0xd0>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006bc:	2301      	movs	r3, #1
 80006be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006c4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c6:	2302      	movs	r3, #2
 80006c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006d0:	2308      	movs	r3, #8
 80006d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006d4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006d8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006da:	2302      	movs	r3, #2
 80006dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006de:	2307      	movs	r3, #7
 80006e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e2:	f107 0320 	add.w	r3, r7, #32
 80006e6:	4618      	mov	r0, r3
 80006e8:	f000 fea2 	bl	8001430 <HAL_RCC_OscConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006f2:	f000 f9c9 	bl	8000a88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f6:	230f      	movs	r3, #15
 80006f8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fa:	2302      	movs	r3, #2
 80006fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000702:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000706:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000708:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800070c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800070e:	f107 030c 	add.w	r3, r7, #12
 8000712:	2105      	movs	r1, #5
 8000714:	4618      	mov	r0, r3
 8000716:	f001 f903 	bl	8001920 <HAL_RCC_ClockConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000720:	f000 f9b2 	bl	8000a88 <Error_Handler>
  }
}
 8000724:	bf00      	nop
 8000726:	3750      	adds	r7, #80	@ 0x50
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40023800 	.word	0x40023800
 8000730:	40007000 	.word	0x40007000

08000734 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08e      	sub	sp, #56	@ 0x38
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800073a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000748:	f107 0320 	add.w	r3, r7, #32
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]
 8000760:	615a      	str	r2, [r3, #20]
 8000762:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000764:	4b3d      	ldr	r3, [pc, #244]	@ (800085c <MX_TIM4_Init+0x128>)
 8000766:	4a3e      	ldr	r2, [pc, #248]	@ (8000860 <MX_TIM4_Init+0x12c>)
 8000768:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1000-1;
 800076a:	4b3c      	ldr	r3, [pc, #240]	@ (800085c <MX_TIM4_Init+0x128>)
 800076c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000770:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000772:	4b3a      	ldr	r3, [pc, #232]	@ (800085c <MX_TIM4_Init+0x128>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8000778:	4b38      	ldr	r3, [pc, #224]	@ (800085c <MX_TIM4_Init+0x128>)
 800077a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800077e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000780:	4b36      	ldr	r3, [pc, #216]	@ (800085c <MX_TIM4_Init+0x128>)
 8000782:	2200      	movs	r2, #0
 8000784:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000786:	4b35      	ldr	r3, [pc, #212]	@ (800085c <MX_TIM4_Init+0x128>)
 8000788:	2200      	movs	r2, #0
 800078a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800078c:	4833      	ldr	r0, [pc, #204]	@ (800085c <MX_TIM4_Init+0x128>)
 800078e:	f001 fae7 	bl	8001d60 <HAL_TIM_Base_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000798:	f000 f976 	bl	8000a88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800079c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80007a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007a6:	4619      	mov	r1, r3
 80007a8:	482c      	ldr	r0, [pc, #176]	@ (800085c <MX_TIM4_Init+0x128>)
 80007aa:	f001 fd0b 	bl	80021c4 <HAL_TIM_ConfigClockSource>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80007b4:	f000 f968 	bl	8000a88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80007b8:	4828      	ldr	r0, [pc, #160]	@ (800085c <MX_TIM4_Init+0x128>)
 80007ba:	f001 fb20 	bl	8001dfe <HAL_TIM_PWM_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80007c4:	f000 f960 	bl	8000a88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007c8:	2300      	movs	r3, #0
 80007ca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007cc:	2300      	movs	r3, #0
 80007ce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80007d0:	f107 0320 	add.w	r3, r7, #32
 80007d4:	4619      	mov	r1, r3
 80007d6:	4821      	ldr	r0, [pc, #132]	@ (800085c <MX_TIM4_Init+0x128>)
 80007d8:	f002 f8d8 	bl	800298c <HAL_TIMEx_MasterConfigSynchronization>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80007e2:	f000 f951 	bl	8000a88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007e6:	2360      	movs	r3, #96	@ 0x60
 80007e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80007ea:	2300      	movs	r3, #0
 80007ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007ee:	2300      	movs	r3, #0
 80007f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007f2:	2300      	movs	r3, #0
 80007f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007f6:	1d3b      	adds	r3, r7, #4
 80007f8:	2200      	movs	r2, #0
 80007fa:	4619      	mov	r1, r3
 80007fc:	4817      	ldr	r0, [pc, #92]	@ (800085c <MX_TIM4_Init+0x128>)
 80007fe:	f001 fc1f 	bl	8002040 <HAL_TIM_PWM_ConfigChannel>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000808:	f000 f93e 	bl	8000a88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800080c:	1d3b      	adds	r3, r7, #4
 800080e:	2204      	movs	r2, #4
 8000810:	4619      	mov	r1, r3
 8000812:	4812      	ldr	r0, [pc, #72]	@ (800085c <MX_TIM4_Init+0x128>)
 8000814:	f001 fc14 	bl	8002040 <HAL_TIM_PWM_ConfigChannel>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 800081e:	f000 f933 	bl	8000a88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000822:	1d3b      	adds	r3, r7, #4
 8000824:	2208      	movs	r2, #8
 8000826:	4619      	mov	r1, r3
 8000828:	480c      	ldr	r0, [pc, #48]	@ (800085c <MX_TIM4_Init+0x128>)
 800082a:	f001 fc09 	bl	8002040 <HAL_TIM_PWM_ConfigChannel>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 8000834:	f000 f928 	bl	8000a88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000838:	1d3b      	adds	r3, r7, #4
 800083a:	220c      	movs	r2, #12
 800083c:	4619      	mov	r1, r3
 800083e:	4807      	ldr	r0, [pc, #28]	@ (800085c <MX_TIM4_Init+0x128>)
 8000840:	f001 fbfe 	bl	8002040 <HAL_TIM_PWM_ConfigChannel>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_TIM4_Init+0x11a>
  {
    Error_Handler();
 800084a:	f000 f91d 	bl	8000a88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800084e:	4803      	ldr	r0, [pc, #12]	@ (800085c <MX_TIM4_Init+0x128>)
 8000850:	f000 f96a 	bl	8000b28 <HAL_TIM_MspPostInit>

}
 8000854:	bf00      	nop
 8000856:	3738      	adds	r7, #56	@ 0x38
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	20000084 	.word	0x20000084
 8000860:	40000800 	.word	0x40000800

08000864 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000868:	4b11      	ldr	r3, [pc, #68]	@ (80008b0 <MX_USART2_UART_Init+0x4c>)
 800086a:	4a12      	ldr	r2, [pc, #72]	@ (80008b4 <MX_USART2_UART_Init+0x50>)
 800086c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800086e:	4b10      	ldr	r3, [pc, #64]	@ (80008b0 <MX_USART2_UART_Init+0x4c>)
 8000870:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000874:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000876:	4b0e      	ldr	r3, [pc, #56]	@ (80008b0 <MX_USART2_UART_Init+0x4c>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800087c:	4b0c      	ldr	r3, [pc, #48]	@ (80008b0 <MX_USART2_UART_Init+0x4c>)
 800087e:	2200      	movs	r2, #0
 8000880:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000882:	4b0b      	ldr	r3, [pc, #44]	@ (80008b0 <MX_USART2_UART_Init+0x4c>)
 8000884:	2200      	movs	r2, #0
 8000886:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000888:	4b09      	ldr	r3, [pc, #36]	@ (80008b0 <MX_USART2_UART_Init+0x4c>)
 800088a:	220c      	movs	r2, #12
 800088c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800088e:	4b08      	ldr	r3, [pc, #32]	@ (80008b0 <MX_USART2_UART_Init+0x4c>)
 8000890:	2200      	movs	r2, #0
 8000892:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000894:	4b06      	ldr	r3, [pc, #24]	@ (80008b0 <MX_USART2_UART_Init+0x4c>)
 8000896:	2200      	movs	r2, #0
 8000898:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800089a:	4805      	ldr	r0, [pc, #20]	@ (80008b0 <MX_USART2_UART_Init+0x4c>)
 800089c:	f002 f8f2 	bl	8002a84 <HAL_UART_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008a6:	f000 f8ef 	bl	8000a88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	200000cc 	.word	0x200000cc
 80008b4:	40004400 	.word	0x40004400

080008b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08a      	sub	sp, #40	@ 0x28
 80008bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008be:	f107 0314 	add.w	r3, r7, #20
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	613b      	str	r3, [r7, #16]
 80008d2:	4b69      	ldr	r3, [pc, #420]	@ (8000a78 <MX_GPIO_Init+0x1c0>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	4a68      	ldr	r2, [pc, #416]	@ (8000a78 <MX_GPIO_Init+0x1c0>)
 80008d8:	f043 0304 	orr.w	r3, r3, #4
 80008dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008de:	4b66      	ldr	r3, [pc, #408]	@ (8000a78 <MX_GPIO_Init+0x1c0>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	f003 0304 	and.w	r3, r3, #4
 80008e6:	613b      	str	r3, [r7, #16]
 80008e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	4b62      	ldr	r3, [pc, #392]	@ (8000a78 <MX_GPIO_Init+0x1c0>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	4a61      	ldr	r2, [pc, #388]	@ (8000a78 <MX_GPIO_Init+0x1c0>)
 80008f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fa:	4b5f      	ldr	r3, [pc, #380]	@ (8000a78 <MX_GPIO_Init+0x1c0>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	60bb      	str	r3, [r7, #8]
 800090a:	4b5b      	ldr	r3, [pc, #364]	@ (8000a78 <MX_GPIO_Init+0x1c0>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	4a5a      	ldr	r2, [pc, #360]	@ (8000a78 <MX_GPIO_Init+0x1c0>)
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	6313      	str	r3, [r2, #48]	@ 0x30
 8000916:	4b58      	ldr	r3, [pc, #352]	@ (8000a78 <MX_GPIO_Init+0x1c0>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	60bb      	str	r3, [r7, #8]
 8000920:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	4b54      	ldr	r3, [pc, #336]	@ (8000a78 <MX_GPIO_Init+0x1c0>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	4a53      	ldr	r2, [pc, #332]	@ (8000a78 <MX_GPIO_Init+0x1c0>)
 800092c:	f043 0302 	orr.w	r3, r3, #2
 8000930:	6313      	str	r3, [r2, #48]	@ 0x30
 8000932:	4b51      	ldr	r3, [pc, #324]	@ (8000a78 <MX_GPIO_Init+0x1c0>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	f003 0302 	and.w	r3, r3, #2
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	603b      	str	r3, [r7, #0]
 8000942:	4b4d      	ldr	r3, [pc, #308]	@ (8000a78 <MX_GPIO_Init+0x1c0>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	4a4c      	ldr	r2, [pc, #304]	@ (8000a78 <MX_GPIO_Init+0x1c0>)
 8000948:	f043 0308 	orr.w	r3, r3, #8
 800094c:	6313      	str	r3, [r2, #48]	@ 0x30
 800094e:	4b4a      	ldr	r3, [pc, #296]	@ (8000a78 <MX_GPIO_Init+0x1c0>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000952:	f003 0308 	and.w	r3, r3, #8
 8000956:	603b      	str	r3, [r7, #0]
 8000958:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800095a:	2308      	movs	r3, #8
 800095c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095e:	2302      	movs	r3, #2
 8000960:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000966:	2300      	movs	r3, #0
 8000968:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800096a:	2305      	movs	r3, #5
 800096c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800096e:	f107 0314 	add.w	r3, r7, #20
 8000972:	4619      	mov	r1, r3
 8000974:	4841      	ldr	r0, [pc, #260]	@ (8000a7c <MX_GPIO_Init+0x1c4>)
 8000976:	f000 fbbf 	bl	80010f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800097a:	2301      	movs	r3, #1
 800097c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800097e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000982:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	4619      	mov	r1, r3
 800098e:	483c      	ldr	r0, [pc, #240]	@ (8000a80 <MX_GPIO_Init+0x1c8>)
 8000990:	f000 fbb2 	bl	80010f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000994:	23e0      	movs	r3, #224	@ 0xe0
 8000996:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000998:	2302      	movs	r3, #2
 800099a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a0:	2300      	movs	r3, #0
 80009a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009a4:	2305      	movs	r3, #5
 80009a6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a8:	f107 0314 	add.w	r3, r7, #20
 80009ac:	4619      	mov	r1, r3
 80009ae:	4834      	ldr	r0, [pc, #208]	@ (8000a80 <MX_GPIO_Init+0x1c8>)
 80009b0:	f000 fba2 	bl	80010f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80009b4:	2304      	movs	r3, #4
 80009b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b8:	2300      	movs	r3, #0
 80009ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	4619      	mov	r1, r3
 80009c6:	482f      	ldr	r0, [pc, #188]	@ (8000a84 <MX_GPIO_Init+0x1cc>)
 80009c8:	f000 fb96 	bl	80010f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80009cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d2:	2302      	movs	r3, #2
 80009d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009da:	2300      	movs	r3, #0
 80009dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009de:	2305      	movs	r3, #5
 80009e0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009e2:	f107 0314 	add.w	r3, r7, #20
 80009e6:	4619      	mov	r1, r3
 80009e8:	4826      	ldr	r0, [pc, #152]	@ (8000a84 <MX_GPIO_Init+0x1cc>)
 80009ea:	f000 fb85 	bl	80010f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80009ee:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80009f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f4:	2302      	movs	r3, #2
 80009f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fc:	2300      	movs	r3, #0
 80009fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a00:	2306      	movs	r3, #6
 8000a02:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a04:	f107 0314 	add.w	r3, r7, #20
 8000a08:	4619      	mov	r1, r3
 8000a0a:	481c      	ldr	r0, [pc, #112]	@ (8000a7c <MX_GPIO_Init+0x1c4>)
 8000a0c:	f000 fb74 	bl	80010f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000a10:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a16:	2300      	movs	r3, #0
 8000a18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000a1e:	f107 0314 	add.w	r3, r7, #20
 8000a22:	4619      	mov	r1, r3
 8000a24:	4816      	ldr	r0, [pc, #88]	@ (8000a80 <MX_GPIO_Init+0x1c8>)
 8000a26:	f000 fb67 	bl	80010f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000a2a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000a2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a30:	2302      	movs	r3, #2
 8000a32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a3c:	230a      	movs	r3, #10
 8000a3e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	4619      	mov	r1, r3
 8000a46:	480e      	ldr	r0, [pc, #56]	@ (8000a80 <MX_GPIO_Init+0x1c8>)
 8000a48:	f000 fb56 	bl	80010f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a4c:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000a50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a52:	2312      	movs	r3, #18
 8000a54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a56:	2301      	movs	r3, #1
 8000a58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a5e:	2304      	movs	r3, #4
 8000a60:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a62:	f107 0314 	add.w	r3, r7, #20
 8000a66:	4619      	mov	r1, r3
 8000a68:	4806      	ldr	r0, [pc, #24]	@ (8000a84 <MX_GPIO_Init+0x1cc>)
 8000a6a:	f000 fb45 	bl	80010f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a6e:	bf00      	nop
 8000a70:	3728      	adds	r7, #40	@ 0x28
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40023800 	.word	0x40023800
 8000a7c:	40020800 	.word	0x40020800
 8000a80:	40020000 	.word	0x40020000
 8000a84:	40020400 	.word	0x40020400

08000a88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a8c:	b672      	cpsid	i
}
 8000a8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a90:	bf00      	nop
 8000a92:	e7fd      	b.n	8000a90 <Error_Handler+0x8>

08000a94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	607b      	str	r3, [r7, #4]
 8000a9e:	4b10      	ldr	r3, [pc, #64]	@ (8000ae0 <HAL_MspInit+0x4c>)
 8000aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aa2:	4a0f      	ldr	r2, [pc, #60]	@ (8000ae0 <HAL_MspInit+0x4c>)
 8000aa4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aa8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8000ae0 <HAL_MspInit+0x4c>)
 8000aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	603b      	str	r3, [r7, #0]
 8000aba:	4b09      	ldr	r3, [pc, #36]	@ (8000ae0 <HAL_MspInit+0x4c>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000abe:	4a08      	ldr	r2, [pc, #32]	@ (8000ae0 <HAL_MspInit+0x4c>)
 8000ac0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ac4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ac6:	4b06      	ldr	r3, [pc, #24]	@ (8000ae0 <HAL_MspInit+0x4c>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ace:	603b      	str	r3, [r7, #0]
 8000ad0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ad2:	2007      	movs	r0, #7
 8000ad4:	f000 fadc 	bl	8001090 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad8:	bf00      	nop
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40023800 	.word	0x40023800

08000ae4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b085      	sub	sp, #20
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a0b      	ldr	r2, [pc, #44]	@ (8000b20 <HAL_TIM_Base_MspInit+0x3c>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d10d      	bne.n	8000b12 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	4b0a      	ldr	r3, [pc, #40]	@ (8000b24 <HAL_TIM_Base_MspInit+0x40>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000afe:	4a09      	ldr	r2, [pc, #36]	@ (8000b24 <HAL_TIM_Base_MspInit+0x40>)
 8000b00:	f043 0304 	orr.w	r3, r3, #4
 8000b04:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b06:	4b07      	ldr	r3, [pc, #28]	@ (8000b24 <HAL_TIM_Base_MspInit+0x40>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b0a:	f003 0304 	and.w	r3, r3, #4
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8000b12:	bf00      	nop
 8000b14:	3714      	adds	r7, #20
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	40000800 	.word	0x40000800
 8000b24:	40023800 	.word	0x40023800

08000b28 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b088      	sub	sp, #32
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 030c 	add.w	r3, r7, #12
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a12      	ldr	r2, [pc, #72]	@ (8000b90 <HAL_TIM_MspPostInit+0x68>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d11e      	bne.n	8000b88 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60bb      	str	r3, [r7, #8]
 8000b4e:	4b11      	ldr	r3, [pc, #68]	@ (8000b94 <HAL_TIM_MspPostInit+0x6c>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b52:	4a10      	ldr	r2, [pc, #64]	@ (8000b94 <HAL_TIM_MspPostInit+0x6c>)
 8000b54:	f043 0308 	orr.w	r3, r3, #8
 8000b58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b94 <HAL_TIM_MspPostInit+0x6c>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5e:	f003 0308 	and.w	r3, r3, #8
 8000b62:	60bb      	str	r3, [r7, #8]
 8000b64:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000b66:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000b6a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b74:	2300      	movs	r3, #0
 8000b76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b7c:	f107 030c 	add.w	r3, r7, #12
 8000b80:	4619      	mov	r1, r3
 8000b82:	4805      	ldr	r0, [pc, #20]	@ (8000b98 <HAL_TIM_MspPostInit+0x70>)
 8000b84:	f000 fab8 	bl	80010f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000b88:	bf00      	nop
 8000b8a:	3720      	adds	r7, #32
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40000800 	.word	0x40000800
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40020c00 	.word	0x40020c00

08000b9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08a      	sub	sp, #40	@ 0x28
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a19      	ldr	r2, [pc, #100]	@ (8000c20 <HAL_UART_MspInit+0x84>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d12b      	bne.n	8000c16 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	613b      	str	r3, [r7, #16]
 8000bc2:	4b18      	ldr	r3, [pc, #96]	@ (8000c24 <HAL_UART_MspInit+0x88>)
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc6:	4a17      	ldr	r2, [pc, #92]	@ (8000c24 <HAL_UART_MspInit+0x88>)
 8000bc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bce:	4b15      	ldr	r3, [pc, #84]	@ (8000c24 <HAL_UART_MspInit+0x88>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bd6:	613b      	str	r3, [r7, #16]
 8000bd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	4b11      	ldr	r3, [pc, #68]	@ (8000c24 <HAL_UART_MspInit+0x88>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be2:	4a10      	ldr	r2, [pc, #64]	@ (8000c24 <HAL_UART_MspInit+0x88>)
 8000be4:	f043 0301 	orr.w	r3, r3, #1
 8000be8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bea:	4b0e      	ldr	r3, [pc, #56]	@ (8000c24 <HAL_UART_MspInit+0x88>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bf6:	230c      	movs	r3, #12
 8000bf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c02:	2303      	movs	r3, #3
 8000c04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c06:	2307      	movs	r3, #7
 8000c08:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0a:	f107 0314 	add.w	r3, r7, #20
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4805      	ldr	r0, [pc, #20]	@ (8000c28 <HAL_UART_MspInit+0x8c>)
 8000c12:	f000 fa71 	bl	80010f8 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000c16:	bf00      	nop
 8000c18:	3728      	adds	r7, #40	@ 0x28
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40004400 	.word	0x40004400
 8000c24:	40023800 	.word	0x40023800
 8000c28:	40020000 	.word	0x40020000

08000c2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <NMI_Handler+0x4>

08000c34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c38:	bf00      	nop
 8000c3a:	e7fd      	b.n	8000c38 <HardFault_Handler+0x4>

08000c3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c40:	bf00      	nop
 8000c42:	e7fd      	b.n	8000c40 <MemManage_Handler+0x4>

08000c44 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c48:	bf00      	nop
 8000c4a:	e7fd      	b.n	8000c48 <BusFault_Handler+0x4>

08000c4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <UsageFault_Handler+0x4>

08000c54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr

08000c62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr

08000c7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c82:	f000 f933 	bl	8000eec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b086      	sub	sp, #24
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	60f8      	str	r0, [r7, #12]
 8000c92:	60b9      	str	r1, [r7, #8]
 8000c94:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c96:	2300      	movs	r3, #0
 8000c98:	617b      	str	r3, [r7, #20]
 8000c9a:	e00a      	b.n	8000cb2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c9c:	f3af 8000 	nop.w
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	68bb      	ldr	r3, [r7, #8]
 8000ca4:	1c5a      	adds	r2, r3, #1
 8000ca6:	60ba      	str	r2, [r7, #8]
 8000ca8:	b2ca      	uxtb	r2, r1
 8000caa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	617b      	str	r3, [r7, #20]
 8000cb2:	697a      	ldr	r2, [r7, #20]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	dbf0      	blt.n	8000c9c <_read+0x12>
  }

  return len;
 8000cba:	687b      	ldr	r3, [r7, #4]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3718      	adds	r7, #24
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	617b      	str	r3, [r7, #20]
 8000cd4:	e009      	b.n	8000cea <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	1c5a      	adds	r2, r3, #1
 8000cda:	60ba      	str	r2, [r7, #8]
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	617b      	str	r3, [r7, #20]
 8000cea:	697a      	ldr	r2, [r7, #20]
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	dbf1      	blt.n	8000cd6 <_write+0x12>
  }
  return len;
 8000cf2:	687b      	ldr	r3, [r7, #4]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3718      	adds	r7, #24
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <_close>:

int _close(int file)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d04:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d24:	605a      	str	r2, [r3, #4]
  return 0;
 8000d26:	2300      	movs	r3, #0
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <_isatty>:

int _isatty(int file)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d3c:	2301      	movs	r3, #1
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr

08000d4a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	b085      	sub	sp, #20
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	60f8      	str	r0, [r7, #12]
 8000d52:	60b9      	str	r1, [r7, #8]
 8000d54:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d56:	2300      	movs	r3, #0
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3714      	adds	r7, #20
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d6c:	4a14      	ldr	r2, [pc, #80]	@ (8000dc0 <_sbrk+0x5c>)
 8000d6e:	4b15      	ldr	r3, [pc, #84]	@ (8000dc4 <_sbrk+0x60>)
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d78:	4b13      	ldr	r3, [pc, #76]	@ (8000dc8 <_sbrk+0x64>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d102      	bne.n	8000d86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d80:	4b11      	ldr	r3, [pc, #68]	@ (8000dc8 <_sbrk+0x64>)
 8000d82:	4a12      	ldr	r2, [pc, #72]	@ (8000dcc <_sbrk+0x68>)
 8000d84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d86:	4b10      	ldr	r3, [pc, #64]	@ (8000dc8 <_sbrk+0x64>)
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d207      	bcs.n	8000da4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d94:	f002 fa74 	bl	8003280 <__errno>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	220c      	movs	r2, #12
 8000d9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d9e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000da2:	e009      	b.n	8000db8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000da4:	4b08      	ldr	r3, [pc, #32]	@ (8000dc8 <_sbrk+0x64>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000daa:	4b07      	ldr	r3, [pc, #28]	@ (8000dc8 <_sbrk+0x64>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4413      	add	r3, r2
 8000db2:	4a05      	ldr	r2, [pc, #20]	@ (8000dc8 <_sbrk+0x64>)
 8000db4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000db6:	68fb      	ldr	r3, [r7, #12]
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3718      	adds	r7, #24
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20020000 	.word	0x20020000
 8000dc4:	00000400 	.word	0x00000400
 8000dc8:	20000114 	.word	0x20000114
 8000dcc:	20000268 	.word	0x20000268

08000dd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dd4:	4b06      	ldr	r3, [pc, #24]	@ (8000df0 <SystemInit+0x20>)
 8000dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dda:	4a05      	ldr	r2, [pc, #20]	@ (8000df0 <SystemInit+0x20>)
 8000ddc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000de0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	e000ed00 	.word	0xe000ed00

08000df4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000df4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e2c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000df8:	f7ff ffea 	bl	8000dd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dfc:	480c      	ldr	r0, [pc, #48]	@ (8000e30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dfe:	490d      	ldr	r1, [pc, #52]	@ (8000e34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e00:	4a0d      	ldr	r2, [pc, #52]	@ (8000e38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e04:	e002      	b.n	8000e0c <LoopCopyDataInit>

08000e06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e0a:	3304      	adds	r3, #4

08000e0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e10:	d3f9      	bcc.n	8000e06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e12:	4a0a      	ldr	r2, [pc, #40]	@ (8000e3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e14:	4c0a      	ldr	r4, [pc, #40]	@ (8000e40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e18:	e001      	b.n	8000e1e <LoopFillZerobss>

08000e1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e1c:	3204      	adds	r2, #4

08000e1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e20:	d3fb      	bcc.n	8000e1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e22:	f002 fa33 	bl	800328c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e26:	f7ff fb9b 	bl	8000560 <main>
  bx  lr    
 8000e2a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e34:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e38:	08003fc8 	.word	0x08003fc8
  ldr r2, =_sbss
 8000e3c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e40:	20000268 	.word	0x20000268

08000e44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e44:	e7fe      	b.n	8000e44 <ADC_IRQHandler>
	...

08000e48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000e88 <HAL_Init+0x40>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a0d      	ldr	r2, [pc, #52]	@ (8000e88 <HAL_Init+0x40>)
 8000e52:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e58:	4b0b      	ldr	r3, [pc, #44]	@ (8000e88 <HAL_Init+0x40>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a0a      	ldr	r2, [pc, #40]	@ (8000e88 <HAL_Init+0x40>)
 8000e5e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e64:	4b08      	ldr	r3, [pc, #32]	@ (8000e88 <HAL_Init+0x40>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a07      	ldr	r2, [pc, #28]	@ (8000e88 <HAL_Init+0x40>)
 8000e6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e70:	2003      	movs	r0, #3
 8000e72:	f000 f90d 	bl	8001090 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e76:	2000      	movs	r0, #0
 8000e78:	f000 f808 	bl	8000e8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e7c:	f7ff fe0a 	bl	8000a94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40023c00 	.word	0x40023c00

08000e8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e94:	4b12      	ldr	r3, [pc, #72]	@ (8000ee0 <HAL_InitTick+0x54>)
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	4b12      	ldr	r3, [pc, #72]	@ (8000ee4 <HAL_InitTick+0x58>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ea2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f000 f917 	bl	80010de <HAL_SYSTICK_Config>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e00e      	b.n	8000ed8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2b0f      	cmp	r3, #15
 8000ebe:	d80a      	bhi.n	8000ed6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	6879      	ldr	r1, [r7, #4]
 8000ec4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ec8:	f000 f8ed 	bl	80010a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ecc:	4a06      	ldr	r2, [pc, #24]	@ (8000ee8 <HAL_InitTick+0x5c>)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	e000      	b.n	8000ed8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20000000 	.word	0x20000000
 8000ee4:	20000008 	.word	0x20000008
 8000ee8:	20000004 	.word	0x20000004

08000eec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ef0:	4b06      	ldr	r3, [pc, #24]	@ (8000f0c <HAL_IncTick+0x20>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	4b06      	ldr	r3, [pc, #24]	@ (8000f10 <HAL_IncTick+0x24>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4413      	add	r3, r2
 8000efc:	4a04      	ldr	r2, [pc, #16]	@ (8000f10 <HAL_IncTick+0x24>)
 8000efe:	6013      	str	r3, [r2, #0]
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	20000008 	.word	0x20000008
 8000f10:	20000118 	.word	0x20000118

08000f14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  return uwTick;
 8000f18:	4b03      	ldr	r3, [pc, #12]	@ (8000f28 <HAL_GetTick+0x14>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	20000118 	.word	0x20000118

08000f2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f70 <__NVIC_SetPriorityGrouping+0x44>)
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f42:	68ba      	ldr	r2, [r7, #8]
 8000f44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f48:	4013      	ands	r3, r2
 8000f4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f5e:	4a04      	ldr	r2, [pc, #16]	@ (8000f70 <__NVIC_SetPriorityGrouping+0x44>)
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	60d3      	str	r3, [r2, #12]
}
 8000f64:	bf00      	nop
 8000f66:	3714      	adds	r7, #20
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f78:	4b04      	ldr	r3, [pc, #16]	@ (8000f8c <__NVIC_GetPriorityGrouping+0x18>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	0a1b      	lsrs	r3, r3, #8
 8000f7e:	f003 0307 	and.w	r3, r3, #7
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	6039      	str	r1, [r7, #0]
 8000f9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	db0a      	blt.n	8000fba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	490c      	ldr	r1, [pc, #48]	@ (8000fdc <__NVIC_SetPriority+0x4c>)
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	0112      	lsls	r2, r2, #4
 8000fb0:	b2d2      	uxtb	r2, r2
 8000fb2:	440b      	add	r3, r1
 8000fb4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fb8:	e00a      	b.n	8000fd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	4908      	ldr	r1, [pc, #32]	@ (8000fe0 <__NVIC_SetPriority+0x50>)
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	f003 030f 	and.w	r3, r3, #15
 8000fc6:	3b04      	subs	r3, #4
 8000fc8:	0112      	lsls	r2, r2, #4
 8000fca:	b2d2      	uxtb	r2, r2
 8000fcc:	440b      	add	r3, r1
 8000fce:	761a      	strb	r2, [r3, #24]
}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	e000e100 	.word	0xe000e100
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b089      	sub	sp, #36	@ 0x24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	f1c3 0307 	rsb	r3, r3, #7
 8000ffe:	2b04      	cmp	r3, #4
 8001000:	bf28      	it	cs
 8001002:	2304      	movcs	r3, #4
 8001004:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	3304      	adds	r3, #4
 800100a:	2b06      	cmp	r3, #6
 800100c:	d902      	bls.n	8001014 <NVIC_EncodePriority+0x30>
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	3b03      	subs	r3, #3
 8001012:	e000      	b.n	8001016 <NVIC_EncodePriority+0x32>
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001018:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43da      	mvns	r2, r3
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	401a      	ands	r2, r3
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800102c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	fa01 f303 	lsl.w	r3, r1, r3
 8001036:	43d9      	mvns	r1, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800103c:	4313      	orrs	r3, r2
         );
}
 800103e:	4618      	mov	r0, r3
 8001040:	3724      	adds	r7, #36	@ 0x24
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
	...

0800104c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3b01      	subs	r3, #1
 8001058:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800105c:	d301      	bcc.n	8001062 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800105e:	2301      	movs	r3, #1
 8001060:	e00f      	b.n	8001082 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001062:	4a0a      	ldr	r2, [pc, #40]	@ (800108c <SysTick_Config+0x40>)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3b01      	subs	r3, #1
 8001068:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800106a:	210f      	movs	r1, #15
 800106c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001070:	f7ff ff8e 	bl	8000f90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001074:	4b05      	ldr	r3, [pc, #20]	@ (800108c <SysTick_Config+0x40>)
 8001076:	2200      	movs	r2, #0
 8001078:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800107a:	4b04      	ldr	r3, [pc, #16]	@ (800108c <SysTick_Config+0x40>)
 800107c:	2207      	movs	r2, #7
 800107e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	e000e010 	.word	0xe000e010

08001090 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f7ff ff47 	bl	8000f2c <__NVIC_SetPriorityGrouping>
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b086      	sub	sp, #24
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	4603      	mov	r3, r0
 80010ae:	60b9      	str	r1, [r7, #8]
 80010b0:	607a      	str	r2, [r7, #4]
 80010b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010b8:	f7ff ff5c 	bl	8000f74 <__NVIC_GetPriorityGrouping>
 80010bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	68b9      	ldr	r1, [r7, #8]
 80010c2:	6978      	ldr	r0, [r7, #20]
 80010c4:	f7ff ff8e 	bl	8000fe4 <NVIC_EncodePriority>
 80010c8:	4602      	mov	r2, r0
 80010ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ce:	4611      	mov	r1, r2
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff5d 	bl	8000f90 <__NVIC_SetPriority>
}
 80010d6:	bf00      	nop
 80010d8:	3718      	adds	r7, #24
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff ffb0 	bl	800104c <SysTick_Config>
 80010ec:	4603      	mov	r3, r0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
	...

080010f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b089      	sub	sp, #36	@ 0x24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001102:	2300      	movs	r3, #0
 8001104:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001106:	2300      	movs	r3, #0
 8001108:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800110a:	2300      	movs	r3, #0
 800110c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
 8001112:	e16b      	b.n	80013ec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001114:	2201      	movs	r2, #1
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	697a      	ldr	r2, [r7, #20]
 8001124:	4013      	ands	r3, r2
 8001126:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	429a      	cmp	r2, r3
 800112e:	f040 815a 	bne.w	80013e6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f003 0303 	and.w	r3, r3, #3
 800113a:	2b01      	cmp	r3, #1
 800113c:	d005      	beq.n	800114a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001146:	2b02      	cmp	r3, #2
 8001148:	d130      	bne.n	80011ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	2203      	movs	r2, #3
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43db      	mvns	r3, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	4013      	ands	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	68da      	ldr	r2, [r3, #12]
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4313      	orrs	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001180:	2201      	movs	r2, #1
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4013      	ands	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	091b      	lsrs	r3, r3, #4
 8001196:	f003 0201 	and.w	r2, r3, #1
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f003 0303 	and.w	r3, r3, #3
 80011b4:	2b03      	cmp	r3, #3
 80011b6:	d017      	beq.n	80011e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	2203      	movs	r2, #3
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4013      	ands	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	689a      	ldr	r2, [r3, #8]
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	4313      	orrs	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f003 0303 	and.w	r3, r3, #3
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d123      	bne.n	800123c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	08da      	lsrs	r2, r3, #3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3208      	adds	r2, #8
 80011fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001200:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	f003 0307 	and.w	r3, r3, #7
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	220f      	movs	r2, #15
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4013      	ands	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	691a      	ldr	r2, [r3, #16]
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	f003 0307 	and.w	r3, r3, #7
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4313      	orrs	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	08da      	lsrs	r2, r3, #3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	3208      	adds	r2, #8
 8001236:	69b9      	ldr	r1, [r7, #24]
 8001238:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	2203      	movs	r2, #3
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	43db      	mvns	r3, r3
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	4013      	ands	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f003 0203 	and.w	r2, r3, #3
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4313      	orrs	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001278:	2b00      	cmp	r3, #0
 800127a:	f000 80b4 	beq.w	80013e6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	4b60      	ldr	r3, [pc, #384]	@ (8001404 <HAL_GPIO_Init+0x30c>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001286:	4a5f      	ldr	r2, [pc, #380]	@ (8001404 <HAL_GPIO_Init+0x30c>)
 8001288:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800128c:	6453      	str	r3, [r2, #68]	@ 0x44
 800128e:	4b5d      	ldr	r3, [pc, #372]	@ (8001404 <HAL_GPIO_Init+0x30c>)
 8001290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001292:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800129a:	4a5b      	ldr	r2, [pc, #364]	@ (8001408 <HAL_GPIO_Init+0x310>)
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	089b      	lsrs	r3, r3, #2
 80012a0:	3302      	adds	r3, #2
 80012a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	f003 0303 	and.w	r3, r3, #3
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	220f      	movs	r2, #15
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43db      	mvns	r3, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4013      	ands	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a52      	ldr	r2, [pc, #328]	@ (800140c <HAL_GPIO_Init+0x314>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d02b      	beq.n	800131e <HAL_GPIO_Init+0x226>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a51      	ldr	r2, [pc, #324]	@ (8001410 <HAL_GPIO_Init+0x318>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d025      	beq.n	800131a <HAL_GPIO_Init+0x222>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a50      	ldr	r2, [pc, #320]	@ (8001414 <HAL_GPIO_Init+0x31c>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d01f      	beq.n	8001316 <HAL_GPIO_Init+0x21e>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a4f      	ldr	r2, [pc, #316]	@ (8001418 <HAL_GPIO_Init+0x320>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d019      	beq.n	8001312 <HAL_GPIO_Init+0x21a>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a4e      	ldr	r2, [pc, #312]	@ (800141c <HAL_GPIO_Init+0x324>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d013      	beq.n	800130e <HAL_GPIO_Init+0x216>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a4d      	ldr	r2, [pc, #308]	@ (8001420 <HAL_GPIO_Init+0x328>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d00d      	beq.n	800130a <HAL_GPIO_Init+0x212>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a4c      	ldr	r2, [pc, #304]	@ (8001424 <HAL_GPIO_Init+0x32c>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d007      	beq.n	8001306 <HAL_GPIO_Init+0x20e>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a4b      	ldr	r2, [pc, #300]	@ (8001428 <HAL_GPIO_Init+0x330>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d101      	bne.n	8001302 <HAL_GPIO_Init+0x20a>
 80012fe:	2307      	movs	r3, #7
 8001300:	e00e      	b.n	8001320 <HAL_GPIO_Init+0x228>
 8001302:	2308      	movs	r3, #8
 8001304:	e00c      	b.n	8001320 <HAL_GPIO_Init+0x228>
 8001306:	2306      	movs	r3, #6
 8001308:	e00a      	b.n	8001320 <HAL_GPIO_Init+0x228>
 800130a:	2305      	movs	r3, #5
 800130c:	e008      	b.n	8001320 <HAL_GPIO_Init+0x228>
 800130e:	2304      	movs	r3, #4
 8001310:	e006      	b.n	8001320 <HAL_GPIO_Init+0x228>
 8001312:	2303      	movs	r3, #3
 8001314:	e004      	b.n	8001320 <HAL_GPIO_Init+0x228>
 8001316:	2302      	movs	r3, #2
 8001318:	e002      	b.n	8001320 <HAL_GPIO_Init+0x228>
 800131a:	2301      	movs	r3, #1
 800131c:	e000      	b.n	8001320 <HAL_GPIO_Init+0x228>
 800131e:	2300      	movs	r3, #0
 8001320:	69fa      	ldr	r2, [r7, #28]
 8001322:	f002 0203 	and.w	r2, r2, #3
 8001326:	0092      	lsls	r2, r2, #2
 8001328:	4093      	lsls	r3, r2
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	4313      	orrs	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001330:	4935      	ldr	r1, [pc, #212]	@ (8001408 <HAL_GPIO_Init+0x310>)
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	089b      	lsrs	r3, r3, #2
 8001336:	3302      	adds	r3, #2
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800133e:	4b3b      	ldr	r3, [pc, #236]	@ (800142c <HAL_GPIO_Init+0x334>)
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	43db      	mvns	r3, r3
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	4013      	ands	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d003      	beq.n	8001362 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	4313      	orrs	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001362:	4a32      	ldr	r2, [pc, #200]	@ (800142c <HAL_GPIO_Init+0x334>)
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001368:	4b30      	ldr	r3, [pc, #192]	@ (800142c <HAL_GPIO_Init+0x334>)
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	43db      	mvns	r3, r3
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	4013      	ands	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d003      	beq.n	800138c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	4313      	orrs	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800138c:	4a27      	ldr	r2, [pc, #156]	@ (800142c <HAL_GPIO_Init+0x334>)
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001392:	4b26      	ldr	r3, [pc, #152]	@ (800142c <HAL_GPIO_Init+0x334>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	43db      	mvns	r3, r3
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4013      	ands	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d003      	beq.n	80013b6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013b6:	4a1d      	ldr	r2, [pc, #116]	@ (800142c <HAL_GPIO_Init+0x334>)
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013bc:	4b1b      	ldr	r3, [pc, #108]	@ (800142c <HAL_GPIO_Init+0x334>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	43db      	mvns	r3, r3
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4013      	ands	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d003      	beq.n	80013e0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	4313      	orrs	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013e0:	4a12      	ldr	r2, [pc, #72]	@ (800142c <HAL_GPIO_Init+0x334>)
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	3301      	adds	r3, #1
 80013ea:	61fb      	str	r3, [r7, #28]
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	2b0f      	cmp	r3, #15
 80013f0:	f67f ae90 	bls.w	8001114 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013f4:	bf00      	nop
 80013f6:	bf00      	nop
 80013f8:	3724      	adds	r7, #36	@ 0x24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	40023800 	.word	0x40023800
 8001408:	40013800 	.word	0x40013800
 800140c:	40020000 	.word	0x40020000
 8001410:	40020400 	.word	0x40020400
 8001414:	40020800 	.word	0x40020800
 8001418:	40020c00 	.word	0x40020c00
 800141c:	40021000 	.word	0x40021000
 8001420:	40021400 	.word	0x40021400
 8001424:	40021800 	.word	0x40021800
 8001428:	40021c00 	.word	0x40021c00
 800142c:	40013c00 	.word	0x40013c00

08001430 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d101      	bne.n	8001442 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e267      	b.n	8001912 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	2b00      	cmp	r3, #0
 800144c:	d075      	beq.n	800153a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800144e:	4b88      	ldr	r3, [pc, #544]	@ (8001670 <HAL_RCC_OscConfig+0x240>)
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f003 030c 	and.w	r3, r3, #12
 8001456:	2b04      	cmp	r3, #4
 8001458:	d00c      	beq.n	8001474 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800145a:	4b85      	ldr	r3, [pc, #532]	@ (8001670 <HAL_RCC_OscConfig+0x240>)
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001462:	2b08      	cmp	r3, #8
 8001464:	d112      	bne.n	800148c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001466:	4b82      	ldr	r3, [pc, #520]	@ (8001670 <HAL_RCC_OscConfig+0x240>)
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800146e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001472:	d10b      	bne.n	800148c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001474:	4b7e      	ldr	r3, [pc, #504]	@ (8001670 <HAL_RCC_OscConfig+0x240>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d05b      	beq.n	8001538 <HAL_RCC_OscConfig+0x108>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d157      	bne.n	8001538 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e242      	b.n	8001912 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001494:	d106      	bne.n	80014a4 <HAL_RCC_OscConfig+0x74>
 8001496:	4b76      	ldr	r3, [pc, #472]	@ (8001670 <HAL_RCC_OscConfig+0x240>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a75      	ldr	r2, [pc, #468]	@ (8001670 <HAL_RCC_OscConfig+0x240>)
 800149c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014a0:	6013      	str	r3, [r2, #0]
 80014a2:	e01d      	b.n	80014e0 <HAL_RCC_OscConfig+0xb0>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014ac:	d10c      	bne.n	80014c8 <HAL_RCC_OscConfig+0x98>
 80014ae:	4b70      	ldr	r3, [pc, #448]	@ (8001670 <HAL_RCC_OscConfig+0x240>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a6f      	ldr	r2, [pc, #444]	@ (8001670 <HAL_RCC_OscConfig+0x240>)
 80014b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014b8:	6013      	str	r3, [r2, #0]
 80014ba:	4b6d      	ldr	r3, [pc, #436]	@ (8001670 <HAL_RCC_OscConfig+0x240>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a6c      	ldr	r2, [pc, #432]	@ (8001670 <HAL_RCC_OscConfig+0x240>)
 80014c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014c4:	6013      	str	r3, [r2, #0]
 80014c6:	e00b      	b.n	80014e0 <HAL_RCC_OscConfig+0xb0>
 80014c8:	4b69      	ldr	r3, [pc, #420]	@ (8001670 <HAL_RCC_OscConfig+0x240>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a68      	ldr	r2, [pc, #416]	@ (8001670 <HAL_RCC_OscConfig+0x240>)
 80014ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014d2:	6013      	str	r3, [r2, #0]
 80014d4:	4b66      	ldr	r3, [pc, #408]	@ (8001670 <HAL_RCC_OscConfig+0x240>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a65      	ldr	r2, [pc, #404]	@ (8001670 <HAL_RCC_OscConfig+0x240>)
 80014da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d013      	beq.n	8001510 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e8:	f7ff fd14 	bl	8000f14 <HAL_GetTick>
 80014ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ee:	e008      	b.n	8001502 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014f0:	f7ff fd10 	bl	8000f14 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b64      	cmp	r3, #100	@ 0x64
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e207      	b.n	8001912 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001502:	4b5b      	ldr	r3, [pc, #364]	@ (8001670 <HAL_RCC_OscConfig+0x240>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d0f0      	beq.n	80014f0 <HAL_RCC_OscConfig+0xc0>
 800150e:	e014      	b.n	800153a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001510:	f7ff fd00 	bl	8000f14 <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001518:	f7ff fcfc 	bl	8000f14 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b64      	cmp	r3, #100	@ 0x64
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e1f3      	b.n	8001912 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800152a:	4b51      	ldr	r3, [pc, #324]	@ (8001670 <HAL_RCC_OscConfig+0x240>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1f0      	bne.n	8001518 <HAL_RCC_OscConfig+0xe8>
 8001536:	e000      	b.n	800153a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001538:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	2b00      	cmp	r3, #0
 8001544:	d063      	beq.n	800160e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001546:	4b4a      	ldr	r3, [pc, #296]	@ (8001670 <HAL_RCC_OscConfig+0x240>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f003 030c 	and.w	r3, r3, #12
 800154e:	2b00      	cmp	r3, #0
 8001550:	d00b      	beq.n	800156a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001552:	4b47      	ldr	r3, [pc, #284]	@ (8001670 <HAL_RCC_OscConfig+0x240>)
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800155a:	2b08      	cmp	r3, #8
 800155c:	d11c      	bne.n	8001598 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800155e:	4b44      	ldr	r3, [pc, #272]	@ (8001670 <HAL_RCC_OscConfig+0x240>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d116      	bne.n	8001598 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800156a:	4b41      	ldr	r3, [pc, #260]	@ (8001670 <HAL_RCC_OscConfig+0x240>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	2b00      	cmp	r3, #0
 8001574:	d005      	beq.n	8001582 <HAL_RCC_OscConfig+0x152>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d001      	beq.n	8001582 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e1c7      	b.n	8001912 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001582:	4b3b      	ldr	r3, [pc, #236]	@ (8001670 <HAL_RCC_OscConfig+0x240>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	691b      	ldr	r3, [r3, #16]
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	4937      	ldr	r1, [pc, #220]	@ (8001670 <HAL_RCC_OscConfig+0x240>)
 8001592:	4313      	orrs	r3, r2
 8001594:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001596:	e03a      	b.n	800160e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d020      	beq.n	80015e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015a0:	4b34      	ldr	r3, [pc, #208]	@ (8001674 <HAL_RCC_OscConfig+0x244>)
 80015a2:	2201      	movs	r2, #1
 80015a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a6:	f7ff fcb5 	bl	8000f14 <HAL_GetTick>
 80015aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ac:	e008      	b.n	80015c0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015ae:	f7ff fcb1 	bl	8000f14 <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d901      	bls.n	80015c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e1a8      	b.n	8001912 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015c0:	4b2b      	ldr	r3, [pc, #172]	@ (8001670 <HAL_RCC_OscConfig+0x240>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0302 	and.w	r3, r3, #2
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d0f0      	beq.n	80015ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015cc:	4b28      	ldr	r3, [pc, #160]	@ (8001670 <HAL_RCC_OscConfig+0x240>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	691b      	ldr	r3, [r3, #16]
 80015d8:	00db      	lsls	r3, r3, #3
 80015da:	4925      	ldr	r1, [pc, #148]	@ (8001670 <HAL_RCC_OscConfig+0x240>)
 80015dc:	4313      	orrs	r3, r2
 80015de:	600b      	str	r3, [r1, #0]
 80015e0:	e015      	b.n	800160e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015e2:	4b24      	ldr	r3, [pc, #144]	@ (8001674 <HAL_RCC_OscConfig+0x244>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e8:	f7ff fc94 	bl	8000f14 <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015f0:	f7ff fc90 	bl	8000f14 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e187      	b.n	8001912 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001602:	4b1b      	ldr	r3, [pc, #108]	@ (8001670 <HAL_RCC_OscConfig+0x240>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1f0      	bne.n	80015f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0308 	and.w	r3, r3, #8
 8001616:	2b00      	cmp	r3, #0
 8001618:	d036      	beq.n	8001688 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	695b      	ldr	r3, [r3, #20]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d016      	beq.n	8001650 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001622:	4b15      	ldr	r3, [pc, #84]	@ (8001678 <HAL_RCC_OscConfig+0x248>)
 8001624:	2201      	movs	r2, #1
 8001626:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001628:	f7ff fc74 	bl	8000f14 <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001630:	f7ff fc70 	bl	8000f14 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b02      	cmp	r3, #2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e167      	b.n	8001912 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001642:	4b0b      	ldr	r3, [pc, #44]	@ (8001670 <HAL_RCC_OscConfig+0x240>)
 8001644:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d0f0      	beq.n	8001630 <HAL_RCC_OscConfig+0x200>
 800164e:	e01b      	b.n	8001688 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001650:	4b09      	ldr	r3, [pc, #36]	@ (8001678 <HAL_RCC_OscConfig+0x248>)
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001656:	f7ff fc5d 	bl	8000f14 <HAL_GetTick>
 800165a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800165c:	e00e      	b.n	800167c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800165e:	f7ff fc59 	bl	8000f14 <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	2b02      	cmp	r3, #2
 800166a:	d907      	bls.n	800167c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e150      	b.n	8001912 <HAL_RCC_OscConfig+0x4e2>
 8001670:	40023800 	.word	0x40023800
 8001674:	42470000 	.word	0x42470000
 8001678:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800167c:	4b88      	ldr	r3, [pc, #544]	@ (80018a0 <HAL_RCC_OscConfig+0x470>)
 800167e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	2b00      	cmp	r3, #0
 8001686:	d1ea      	bne.n	800165e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0304 	and.w	r3, r3, #4
 8001690:	2b00      	cmp	r3, #0
 8001692:	f000 8097 	beq.w	80017c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001696:	2300      	movs	r3, #0
 8001698:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800169a:	4b81      	ldr	r3, [pc, #516]	@ (80018a0 <HAL_RCC_OscConfig+0x470>)
 800169c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800169e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d10f      	bne.n	80016c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	60bb      	str	r3, [r7, #8]
 80016aa:	4b7d      	ldr	r3, [pc, #500]	@ (80018a0 <HAL_RCC_OscConfig+0x470>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ae:	4a7c      	ldr	r2, [pc, #496]	@ (80018a0 <HAL_RCC_OscConfig+0x470>)
 80016b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80016b6:	4b7a      	ldr	r3, [pc, #488]	@ (80018a0 <HAL_RCC_OscConfig+0x470>)
 80016b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016be:	60bb      	str	r3, [r7, #8]
 80016c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016c2:	2301      	movs	r3, #1
 80016c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016c6:	4b77      	ldr	r3, [pc, #476]	@ (80018a4 <HAL_RCC_OscConfig+0x474>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d118      	bne.n	8001704 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016d2:	4b74      	ldr	r3, [pc, #464]	@ (80018a4 <HAL_RCC_OscConfig+0x474>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a73      	ldr	r2, [pc, #460]	@ (80018a4 <HAL_RCC_OscConfig+0x474>)
 80016d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016de:	f7ff fc19 	bl	8000f14 <HAL_GetTick>
 80016e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e4:	e008      	b.n	80016f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016e6:	f7ff fc15 	bl	8000f14 <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e10c      	b.n	8001912 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f8:	4b6a      	ldr	r3, [pc, #424]	@ (80018a4 <HAL_RCC_OscConfig+0x474>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001700:	2b00      	cmp	r3, #0
 8001702:	d0f0      	beq.n	80016e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	2b01      	cmp	r3, #1
 800170a:	d106      	bne.n	800171a <HAL_RCC_OscConfig+0x2ea>
 800170c:	4b64      	ldr	r3, [pc, #400]	@ (80018a0 <HAL_RCC_OscConfig+0x470>)
 800170e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001710:	4a63      	ldr	r2, [pc, #396]	@ (80018a0 <HAL_RCC_OscConfig+0x470>)
 8001712:	f043 0301 	orr.w	r3, r3, #1
 8001716:	6713      	str	r3, [r2, #112]	@ 0x70
 8001718:	e01c      	b.n	8001754 <HAL_RCC_OscConfig+0x324>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	2b05      	cmp	r3, #5
 8001720:	d10c      	bne.n	800173c <HAL_RCC_OscConfig+0x30c>
 8001722:	4b5f      	ldr	r3, [pc, #380]	@ (80018a0 <HAL_RCC_OscConfig+0x470>)
 8001724:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001726:	4a5e      	ldr	r2, [pc, #376]	@ (80018a0 <HAL_RCC_OscConfig+0x470>)
 8001728:	f043 0304 	orr.w	r3, r3, #4
 800172c:	6713      	str	r3, [r2, #112]	@ 0x70
 800172e:	4b5c      	ldr	r3, [pc, #368]	@ (80018a0 <HAL_RCC_OscConfig+0x470>)
 8001730:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001732:	4a5b      	ldr	r2, [pc, #364]	@ (80018a0 <HAL_RCC_OscConfig+0x470>)
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	6713      	str	r3, [r2, #112]	@ 0x70
 800173a:	e00b      	b.n	8001754 <HAL_RCC_OscConfig+0x324>
 800173c:	4b58      	ldr	r3, [pc, #352]	@ (80018a0 <HAL_RCC_OscConfig+0x470>)
 800173e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001740:	4a57      	ldr	r2, [pc, #348]	@ (80018a0 <HAL_RCC_OscConfig+0x470>)
 8001742:	f023 0301 	bic.w	r3, r3, #1
 8001746:	6713      	str	r3, [r2, #112]	@ 0x70
 8001748:	4b55      	ldr	r3, [pc, #340]	@ (80018a0 <HAL_RCC_OscConfig+0x470>)
 800174a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800174c:	4a54      	ldr	r2, [pc, #336]	@ (80018a0 <HAL_RCC_OscConfig+0x470>)
 800174e:	f023 0304 	bic.w	r3, r3, #4
 8001752:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d015      	beq.n	8001788 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800175c:	f7ff fbda 	bl	8000f14 <HAL_GetTick>
 8001760:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001762:	e00a      	b.n	800177a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001764:	f7ff fbd6 	bl	8000f14 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001772:	4293      	cmp	r3, r2
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e0cb      	b.n	8001912 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800177a:	4b49      	ldr	r3, [pc, #292]	@ (80018a0 <HAL_RCC_OscConfig+0x470>)
 800177c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d0ee      	beq.n	8001764 <HAL_RCC_OscConfig+0x334>
 8001786:	e014      	b.n	80017b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001788:	f7ff fbc4 	bl	8000f14 <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800178e:	e00a      	b.n	80017a6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001790:	f7ff fbc0 	bl	8000f14 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800179e:	4293      	cmp	r3, r2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e0b5      	b.n	8001912 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017a6:	4b3e      	ldr	r3, [pc, #248]	@ (80018a0 <HAL_RCC_OscConfig+0x470>)
 80017a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1ee      	bne.n	8001790 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80017b2:	7dfb      	ldrb	r3, [r7, #23]
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d105      	bne.n	80017c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017b8:	4b39      	ldr	r3, [pc, #228]	@ (80018a0 <HAL_RCC_OscConfig+0x470>)
 80017ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017bc:	4a38      	ldr	r2, [pc, #224]	@ (80018a0 <HAL_RCC_OscConfig+0x470>)
 80017be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017c2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	f000 80a1 	beq.w	8001910 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017ce:	4b34      	ldr	r3, [pc, #208]	@ (80018a0 <HAL_RCC_OscConfig+0x470>)
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f003 030c 	and.w	r3, r3, #12
 80017d6:	2b08      	cmp	r3, #8
 80017d8:	d05c      	beq.n	8001894 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d141      	bne.n	8001866 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e2:	4b31      	ldr	r3, [pc, #196]	@ (80018a8 <HAL_RCC_OscConfig+0x478>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e8:	f7ff fb94 	bl	8000f14 <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f0:	f7ff fb90 	bl	8000f14 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e087      	b.n	8001912 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001802:	4b27      	ldr	r3, [pc, #156]	@ (80018a0 <HAL_RCC_OscConfig+0x470>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1f0      	bne.n	80017f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	69da      	ldr	r2, [r3, #28]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a1b      	ldr	r3, [r3, #32]
 8001816:	431a      	orrs	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800181c:	019b      	lsls	r3, r3, #6
 800181e:	431a      	orrs	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001824:	085b      	lsrs	r3, r3, #1
 8001826:	3b01      	subs	r3, #1
 8001828:	041b      	lsls	r3, r3, #16
 800182a:	431a      	orrs	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001830:	061b      	lsls	r3, r3, #24
 8001832:	491b      	ldr	r1, [pc, #108]	@ (80018a0 <HAL_RCC_OscConfig+0x470>)
 8001834:	4313      	orrs	r3, r2
 8001836:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001838:	4b1b      	ldr	r3, [pc, #108]	@ (80018a8 <HAL_RCC_OscConfig+0x478>)
 800183a:	2201      	movs	r2, #1
 800183c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800183e:	f7ff fb69 	bl	8000f14 <HAL_GetTick>
 8001842:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001844:	e008      	b.n	8001858 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001846:	f7ff fb65 	bl	8000f14 <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b02      	cmp	r3, #2
 8001852:	d901      	bls.n	8001858 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e05c      	b.n	8001912 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001858:	4b11      	ldr	r3, [pc, #68]	@ (80018a0 <HAL_RCC_OscConfig+0x470>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d0f0      	beq.n	8001846 <HAL_RCC_OscConfig+0x416>
 8001864:	e054      	b.n	8001910 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001866:	4b10      	ldr	r3, [pc, #64]	@ (80018a8 <HAL_RCC_OscConfig+0x478>)
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186c:	f7ff fb52 	bl	8000f14 <HAL_GetTick>
 8001870:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001874:	f7ff fb4e 	bl	8000f14 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b02      	cmp	r3, #2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e045      	b.n	8001912 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001886:	4b06      	ldr	r3, [pc, #24]	@ (80018a0 <HAL_RCC_OscConfig+0x470>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1f0      	bne.n	8001874 <HAL_RCC_OscConfig+0x444>
 8001892:	e03d      	b.n	8001910 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d107      	bne.n	80018ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e038      	b.n	8001912 <HAL_RCC_OscConfig+0x4e2>
 80018a0:	40023800 	.word	0x40023800
 80018a4:	40007000 	.word	0x40007000
 80018a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018ac:	4b1b      	ldr	r3, [pc, #108]	@ (800191c <HAL_RCC_OscConfig+0x4ec>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	699b      	ldr	r3, [r3, #24]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d028      	beq.n	800190c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d121      	bne.n	800190c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d11a      	bne.n	800190c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018d6:	68fa      	ldr	r2, [r7, #12]
 80018d8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80018dc:	4013      	ands	r3, r2
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80018e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d111      	bne.n	800190c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018f2:	085b      	lsrs	r3, r3, #1
 80018f4:	3b01      	subs	r3, #1
 80018f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d107      	bne.n	800190c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001906:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001908:	429a      	cmp	r2, r3
 800190a:	d001      	beq.n	8001910 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e000      	b.n	8001912 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3718      	adds	r7, #24
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40023800 	.word	0x40023800

08001920 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d101      	bne.n	8001934 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e0cc      	b.n	8001ace <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001934:	4b68      	ldr	r3, [pc, #416]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0307 	and.w	r3, r3, #7
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	429a      	cmp	r2, r3
 8001940:	d90c      	bls.n	800195c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001942:	4b65      	ldr	r3, [pc, #404]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8001944:	683a      	ldr	r2, [r7, #0]
 8001946:	b2d2      	uxtb	r2, r2
 8001948:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800194a:	4b63      	ldr	r3, [pc, #396]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1b8>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0307 	and.w	r3, r3, #7
 8001952:	683a      	ldr	r2, [r7, #0]
 8001954:	429a      	cmp	r2, r3
 8001956:	d001      	beq.n	800195c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e0b8      	b.n	8001ace <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0302 	and.w	r3, r3, #2
 8001964:	2b00      	cmp	r3, #0
 8001966:	d020      	beq.n	80019aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0304 	and.w	r3, r3, #4
 8001970:	2b00      	cmp	r3, #0
 8001972:	d005      	beq.n	8001980 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001974:	4b59      	ldr	r3, [pc, #356]	@ (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	4a58      	ldr	r2, [pc, #352]	@ (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 800197a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800197e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0308 	and.w	r3, r3, #8
 8001988:	2b00      	cmp	r3, #0
 800198a:	d005      	beq.n	8001998 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800198c:	4b53      	ldr	r3, [pc, #332]	@ (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	4a52      	ldr	r2, [pc, #328]	@ (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 8001992:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001996:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001998:	4b50      	ldr	r3, [pc, #320]	@ (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	494d      	ldr	r1, [pc, #308]	@ (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 80019a6:	4313      	orrs	r3, r2
 80019a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d044      	beq.n	8001a40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d107      	bne.n	80019ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019be:	4b47      	ldr	r3, [pc, #284]	@ (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d119      	bne.n	80019fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e07f      	b.n	8001ace <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d003      	beq.n	80019de <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019da:	2b03      	cmp	r3, #3
 80019dc:	d107      	bne.n	80019ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019de:	4b3f      	ldr	r3, [pc, #252]	@ (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d109      	bne.n	80019fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e06f      	b.n	8001ace <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ee:	4b3b      	ldr	r3, [pc, #236]	@ (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d101      	bne.n	80019fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e067      	b.n	8001ace <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019fe:	4b37      	ldr	r3, [pc, #220]	@ (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f023 0203 	bic.w	r2, r3, #3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	4934      	ldr	r1, [pc, #208]	@ (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a10:	f7ff fa80 	bl	8000f14 <HAL_GetTick>
 8001a14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a16:	e00a      	b.n	8001a2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a18:	f7ff fa7c 	bl	8000f14 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e04f      	b.n	8001ace <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a2e:	4b2b      	ldr	r3, [pc, #172]	@ (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f003 020c 	and.w	r2, r3, #12
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d1eb      	bne.n	8001a18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a40:	4b25      	ldr	r3, [pc, #148]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0307 	and.w	r3, r3, #7
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d20c      	bcs.n	8001a68 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a4e:	4b22      	ldr	r3, [pc, #136]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a50:	683a      	ldr	r2, [r7, #0]
 8001a52:	b2d2      	uxtb	r2, r2
 8001a54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a56:	4b20      	ldr	r3, [pc, #128]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	683a      	ldr	r2, [r7, #0]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d001      	beq.n	8001a68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e032      	b.n	8001ace <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0304 	and.w	r3, r3, #4
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d008      	beq.n	8001a86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a74:	4b19      	ldr	r3, [pc, #100]	@ (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	4916      	ldr	r1, [pc, #88]	@ (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 8001a82:	4313      	orrs	r3, r2
 8001a84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0308 	and.w	r3, r3, #8
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d009      	beq.n	8001aa6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a92:	4b12      	ldr	r3, [pc, #72]	@ (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	691b      	ldr	r3, [r3, #16]
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	490e      	ldr	r1, [pc, #56]	@ (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001aa6:	f000 f821 	bl	8001aec <HAL_RCC_GetSysClockFreq>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	4b0b      	ldr	r3, [pc, #44]	@ (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	091b      	lsrs	r3, r3, #4
 8001ab2:	f003 030f 	and.w	r3, r3, #15
 8001ab6:	490a      	ldr	r1, [pc, #40]	@ (8001ae0 <HAL_RCC_ClockConfig+0x1c0>)
 8001ab8:	5ccb      	ldrb	r3, [r1, r3]
 8001aba:	fa22 f303 	lsr.w	r3, r2, r3
 8001abe:	4a09      	ldr	r2, [pc, #36]	@ (8001ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001ac2:	4b09      	ldr	r3, [pc, #36]	@ (8001ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff f9e0 	bl	8000e8c <HAL_InitTick>

  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40023c00 	.word	0x40023c00
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	08003f6c 	.word	0x08003f6c
 8001ae4:	20000000 	.word	0x20000000
 8001ae8:	20000004 	.word	0x20000004

08001aec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001aec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001af0:	b094      	sub	sp, #80	@ 0x50
 8001af2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001af4:	2300      	movs	r3, #0
 8001af6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001af8:	2300      	movs	r3, #0
 8001afa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001afc:	2300      	movs	r3, #0
 8001afe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001b00:	2300      	movs	r3, #0
 8001b02:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b04:	4b79      	ldr	r3, [pc, #484]	@ (8001cec <HAL_RCC_GetSysClockFreq+0x200>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f003 030c 	and.w	r3, r3, #12
 8001b0c:	2b08      	cmp	r3, #8
 8001b0e:	d00d      	beq.n	8001b2c <HAL_RCC_GetSysClockFreq+0x40>
 8001b10:	2b08      	cmp	r3, #8
 8001b12:	f200 80e1 	bhi.w	8001cd8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d002      	beq.n	8001b20 <HAL_RCC_GetSysClockFreq+0x34>
 8001b1a:	2b04      	cmp	r3, #4
 8001b1c:	d003      	beq.n	8001b26 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b1e:	e0db      	b.n	8001cd8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b20:	4b73      	ldr	r3, [pc, #460]	@ (8001cf0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b22:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b24:	e0db      	b.n	8001cde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b26:	4b73      	ldr	r3, [pc, #460]	@ (8001cf4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001b28:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b2a:	e0d8      	b.n	8001cde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b2c:	4b6f      	ldr	r3, [pc, #444]	@ (8001cec <HAL_RCC_GetSysClockFreq+0x200>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b34:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b36:	4b6d      	ldr	r3, [pc, #436]	@ (8001cec <HAL_RCC_GetSysClockFreq+0x200>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d063      	beq.n	8001c0a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b42:	4b6a      	ldr	r3, [pc, #424]	@ (8001cec <HAL_RCC_GetSysClockFreq+0x200>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	099b      	lsrs	r3, r3, #6
 8001b48:	2200      	movs	r2, #0
 8001b4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b4c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b54:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b56:	2300      	movs	r3, #0
 8001b58:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b5a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001b5e:	4622      	mov	r2, r4
 8001b60:	462b      	mov	r3, r5
 8001b62:	f04f 0000 	mov.w	r0, #0
 8001b66:	f04f 0100 	mov.w	r1, #0
 8001b6a:	0159      	lsls	r1, r3, #5
 8001b6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b70:	0150      	lsls	r0, r2, #5
 8001b72:	4602      	mov	r2, r0
 8001b74:	460b      	mov	r3, r1
 8001b76:	4621      	mov	r1, r4
 8001b78:	1a51      	subs	r1, r2, r1
 8001b7a:	6139      	str	r1, [r7, #16]
 8001b7c:	4629      	mov	r1, r5
 8001b7e:	eb63 0301 	sbc.w	r3, r3, r1
 8001b82:	617b      	str	r3, [r7, #20]
 8001b84:	f04f 0200 	mov.w	r2, #0
 8001b88:	f04f 0300 	mov.w	r3, #0
 8001b8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b90:	4659      	mov	r1, fp
 8001b92:	018b      	lsls	r3, r1, #6
 8001b94:	4651      	mov	r1, sl
 8001b96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b9a:	4651      	mov	r1, sl
 8001b9c:	018a      	lsls	r2, r1, #6
 8001b9e:	4651      	mov	r1, sl
 8001ba0:	ebb2 0801 	subs.w	r8, r2, r1
 8001ba4:	4659      	mov	r1, fp
 8001ba6:	eb63 0901 	sbc.w	r9, r3, r1
 8001baa:	f04f 0200 	mov.w	r2, #0
 8001bae:	f04f 0300 	mov.w	r3, #0
 8001bb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bbe:	4690      	mov	r8, r2
 8001bc0:	4699      	mov	r9, r3
 8001bc2:	4623      	mov	r3, r4
 8001bc4:	eb18 0303 	adds.w	r3, r8, r3
 8001bc8:	60bb      	str	r3, [r7, #8]
 8001bca:	462b      	mov	r3, r5
 8001bcc:	eb49 0303 	adc.w	r3, r9, r3
 8001bd0:	60fb      	str	r3, [r7, #12]
 8001bd2:	f04f 0200 	mov.w	r2, #0
 8001bd6:	f04f 0300 	mov.w	r3, #0
 8001bda:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001bde:	4629      	mov	r1, r5
 8001be0:	024b      	lsls	r3, r1, #9
 8001be2:	4621      	mov	r1, r4
 8001be4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001be8:	4621      	mov	r1, r4
 8001bea:	024a      	lsls	r2, r1, #9
 8001bec:	4610      	mov	r0, r2
 8001bee:	4619      	mov	r1, r3
 8001bf0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001bf6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001bf8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001bfc:	f7fe fb38 	bl	8000270 <__aeabi_uldivmod>
 8001c00:	4602      	mov	r2, r0
 8001c02:	460b      	mov	r3, r1
 8001c04:	4613      	mov	r3, r2
 8001c06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c08:	e058      	b.n	8001cbc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c0a:	4b38      	ldr	r3, [pc, #224]	@ (8001cec <HAL_RCC_GetSysClockFreq+0x200>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	099b      	lsrs	r3, r3, #6
 8001c10:	2200      	movs	r2, #0
 8001c12:	4618      	mov	r0, r3
 8001c14:	4611      	mov	r1, r2
 8001c16:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c1a:	623b      	str	r3, [r7, #32]
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c20:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c24:	4642      	mov	r2, r8
 8001c26:	464b      	mov	r3, r9
 8001c28:	f04f 0000 	mov.w	r0, #0
 8001c2c:	f04f 0100 	mov.w	r1, #0
 8001c30:	0159      	lsls	r1, r3, #5
 8001c32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c36:	0150      	lsls	r0, r2, #5
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	4641      	mov	r1, r8
 8001c3e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c42:	4649      	mov	r1, r9
 8001c44:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c48:	f04f 0200 	mov.w	r2, #0
 8001c4c:	f04f 0300 	mov.w	r3, #0
 8001c50:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c54:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c58:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c5c:	ebb2 040a 	subs.w	r4, r2, sl
 8001c60:	eb63 050b 	sbc.w	r5, r3, fp
 8001c64:	f04f 0200 	mov.w	r2, #0
 8001c68:	f04f 0300 	mov.w	r3, #0
 8001c6c:	00eb      	lsls	r3, r5, #3
 8001c6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c72:	00e2      	lsls	r2, r4, #3
 8001c74:	4614      	mov	r4, r2
 8001c76:	461d      	mov	r5, r3
 8001c78:	4643      	mov	r3, r8
 8001c7a:	18e3      	adds	r3, r4, r3
 8001c7c:	603b      	str	r3, [r7, #0]
 8001c7e:	464b      	mov	r3, r9
 8001c80:	eb45 0303 	adc.w	r3, r5, r3
 8001c84:	607b      	str	r3, [r7, #4]
 8001c86:	f04f 0200 	mov.w	r2, #0
 8001c8a:	f04f 0300 	mov.w	r3, #0
 8001c8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c92:	4629      	mov	r1, r5
 8001c94:	028b      	lsls	r3, r1, #10
 8001c96:	4621      	mov	r1, r4
 8001c98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c9c:	4621      	mov	r1, r4
 8001c9e:	028a      	lsls	r2, r1, #10
 8001ca0:	4610      	mov	r0, r2
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	61bb      	str	r3, [r7, #24]
 8001caa:	61fa      	str	r2, [r7, #28]
 8001cac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cb0:	f7fe fade 	bl	8000270 <__aeabi_uldivmod>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	4613      	mov	r3, r2
 8001cba:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8001cec <HAL_RCC_GetSysClockFreq+0x200>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	0c1b      	lsrs	r3, r3, #16
 8001cc2:	f003 0303 	and.w	r3, r3, #3
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001ccc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001cce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001cd6:	e002      	b.n	8001cde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cd8:	4b05      	ldr	r3, [pc, #20]	@ (8001cf0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001cda:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001cdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3750      	adds	r7, #80	@ 0x50
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cea:	bf00      	nop
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	00f42400 	.word	0x00f42400
 8001cf4:	007a1200 	.word	0x007a1200

08001cf8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cfc:	4b03      	ldr	r3, [pc, #12]	@ (8001d0c <HAL_RCC_GetHCLKFreq+0x14>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	20000000 	.word	0x20000000

08001d10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d14:	f7ff fff0 	bl	8001cf8 <HAL_RCC_GetHCLKFreq>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	4b05      	ldr	r3, [pc, #20]	@ (8001d30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	0a9b      	lsrs	r3, r3, #10
 8001d20:	f003 0307 	and.w	r3, r3, #7
 8001d24:	4903      	ldr	r1, [pc, #12]	@ (8001d34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d26:	5ccb      	ldrb	r3, [r1, r3]
 8001d28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40023800 	.word	0x40023800
 8001d34:	08003f7c 	.word	0x08003f7c

08001d38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d3c:	f7ff ffdc 	bl	8001cf8 <HAL_RCC_GetHCLKFreq>
 8001d40:	4602      	mov	r2, r0
 8001d42:	4b05      	ldr	r3, [pc, #20]	@ (8001d58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	0b5b      	lsrs	r3, r3, #13
 8001d48:	f003 0307 	and.w	r3, r3, #7
 8001d4c:	4903      	ldr	r1, [pc, #12]	@ (8001d5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d4e:	5ccb      	ldrb	r3, [r1, r3]
 8001d50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	40023800 	.word	0x40023800
 8001d5c:	08003f7c 	.word	0x08003f7c

08001d60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e041      	b.n	8001df6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d106      	bne.n	8001d8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f7fe feac 	bl	8000ae4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2202      	movs	r2, #2
 8001d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3304      	adds	r3, #4
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4610      	mov	r0, r2
 8001da0:	f000 fad8 	bl	8002354 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b082      	sub	sp, #8
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d101      	bne.n	8001e10 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e041      	b.n	8001e94 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d106      	bne.n	8001e2a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f000 f839 	bl	8001e9c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2202      	movs	r2, #2
 8001e2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	3304      	adds	r3, #4
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4610      	mov	r0, r2
 8001e3e:	f000 fa89 	bl	8002354 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2201      	movs	r2, #1
 8001e46:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2201      	movs	r2, #1
 8001e56:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2201      	movs	r2, #1
 8001e66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2201      	movs	r2, #1
 8001e76:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2201      	movs	r2, #1
 8001e86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d109      	bne.n	8001ed4 <HAL_TIM_PWM_Start+0x24>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	bf14      	ite	ne
 8001ecc:	2301      	movne	r3, #1
 8001ece:	2300      	moveq	r3, #0
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	e022      	b.n	8001f1a <HAL_TIM_PWM_Start+0x6a>
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	2b04      	cmp	r3, #4
 8001ed8:	d109      	bne.n	8001eee <HAL_TIM_PWM_Start+0x3e>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	bf14      	ite	ne
 8001ee6:	2301      	movne	r3, #1
 8001ee8:	2300      	moveq	r3, #0
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	e015      	b.n	8001f1a <HAL_TIM_PWM_Start+0x6a>
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	2b08      	cmp	r3, #8
 8001ef2:	d109      	bne.n	8001f08 <HAL_TIM_PWM_Start+0x58>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	bf14      	ite	ne
 8001f00:	2301      	movne	r3, #1
 8001f02:	2300      	moveq	r3, #0
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	e008      	b.n	8001f1a <HAL_TIM_PWM_Start+0x6a>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	bf14      	ite	ne
 8001f14:	2301      	movne	r3, #1
 8001f16:	2300      	moveq	r3, #0
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e07c      	b.n	800201c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d104      	bne.n	8001f32 <HAL_TIM_PWM_Start+0x82>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2202      	movs	r2, #2
 8001f2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001f30:	e013      	b.n	8001f5a <HAL_TIM_PWM_Start+0xaa>
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	2b04      	cmp	r3, #4
 8001f36:	d104      	bne.n	8001f42 <HAL_TIM_PWM_Start+0x92>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f40:	e00b      	b.n	8001f5a <HAL_TIM_PWM_Start+0xaa>
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	2b08      	cmp	r3, #8
 8001f46:	d104      	bne.n	8001f52 <HAL_TIM_PWM_Start+0xa2>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2202      	movs	r2, #2
 8001f4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f50:	e003      	b.n	8001f5a <HAL_TIM_PWM_Start+0xaa>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2202      	movs	r2, #2
 8001f56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	6839      	ldr	r1, [r7, #0]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f000 fcec 	bl	8002940 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a2d      	ldr	r2, [pc, #180]	@ (8002024 <HAL_TIM_PWM_Start+0x174>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d004      	beq.n	8001f7c <HAL_TIM_PWM_Start+0xcc>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a2c      	ldr	r2, [pc, #176]	@ (8002028 <HAL_TIM_PWM_Start+0x178>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d101      	bne.n	8001f80 <HAL_TIM_PWM_Start+0xd0>
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e000      	b.n	8001f82 <HAL_TIM_PWM_Start+0xd2>
 8001f80:	2300      	movs	r3, #0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d007      	beq.n	8001f96 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f94:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a22      	ldr	r2, [pc, #136]	@ (8002024 <HAL_TIM_PWM_Start+0x174>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d022      	beq.n	8001fe6 <HAL_TIM_PWM_Start+0x136>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fa8:	d01d      	beq.n	8001fe6 <HAL_TIM_PWM_Start+0x136>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a1f      	ldr	r2, [pc, #124]	@ (800202c <HAL_TIM_PWM_Start+0x17c>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d018      	beq.n	8001fe6 <HAL_TIM_PWM_Start+0x136>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a1d      	ldr	r2, [pc, #116]	@ (8002030 <HAL_TIM_PWM_Start+0x180>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d013      	beq.n	8001fe6 <HAL_TIM_PWM_Start+0x136>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a1c      	ldr	r2, [pc, #112]	@ (8002034 <HAL_TIM_PWM_Start+0x184>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d00e      	beq.n	8001fe6 <HAL_TIM_PWM_Start+0x136>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a16      	ldr	r2, [pc, #88]	@ (8002028 <HAL_TIM_PWM_Start+0x178>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d009      	beq.n	8001fe6 <HAL_TIM_PWM_Start+0x136>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a18      	ldr	r2, [pc, #96]	@ (8002038 <HAL_TIM_PWM_Start+0x188>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d004      	beq.n	8001fe6 <HAL_TIM_PWM_Start+0x136>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a16      	ldr	r2, [pc, #88]	@ (800203c <HAL_TIM_PWM_Start+0x18c>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d111      	bne.n	800200a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f003 0307 	and.w	r3, r3, #7
 8001ff0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2b06      	cmp	r3, #6
 8001ff6:	d010      	beq.n	800201a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f042 0201 	orr.w	r2, r2, #1
 8002006:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002008:	e007      	b.n	800201a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f042 0201 	orr.w	r2, r2, #1
 8002018:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	3710      	adds	r7, #16
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40010000 	.word	0x40010000
 8002028:	40010400 	.word	0x40010400
 800202c:	40000400 	.word	0x40000400
 8002030:	40000800 	.word	0x40000800
 8002034:	40000c00 	.word	0x40000c00
 8002038:	40014000 	.word	0x40014000
 800203c:	40001800 	.word	0x40001800

08002040 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800204c:	2300      	movs	r3, #0
 800204e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002056:	2b01      	cmp	r3, #1
 8002058:	d101      	bne.n	800205e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800205a:	2302      	movs	r3, #2
 800205c:	e0ae      	b.n	80021bc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2201      	movs	r2, #1
 8002062:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2b0c      	cmp	r3, #12
 800206a:	f200 809f 	bhi.w	80021ac <HAL_TIM_PWM_ConfigChannel+0x16c>
 800206e:	a201      	add	r2, pc, #4	@ (adr r2, 8002074 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002074:	080020a9 	.word	0x080020a9
 8002078:	080021ad 	.word	0x080021ad
 800207c:	080021ad 	.word	0x080021ad
 8002080:	080021ad 	.word	0x080021ad
 8002084:	080020e9 	.word	0x080020e9
 8002088:	080021ad 	.word	0x080021ad
 800208c:	080021ad 	.word	0x080021ad
 8002090:	080021ad 	.word	0x080021ad
 8002094:	0800212b 	.word	0x0800212b
 8002098:	080021ad 	.word	0x080021ad
 800209c:	080021ad 	.word	0x080021ad
 80020a0:	080021ad 	.word	0x080021ad
 80020a4:	0800216b 	.word	0x0800216b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	68b9      	ldr	r1, [r7, #8]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f000 f9fc 	bl	80024ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	699a      	ldr	r2, [r3, #24]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f042 0208 	orr.w	r2, r2, #8
 80020c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	699a      	ldr	r2, [r3, #24]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f022 0204 	bic.w	r2, r2, #4
 80020d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6999      	ldr	r1, [r3, #24]
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	691a      	ldr	r2, [r3, #16]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	430a      	orrs	r2, r1
 80020e4:	619a      	str	r2, [r3, #24]
      break;
 80020e6:	e064      	b.n	80021b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	68b9      	ldr	r1, [r7, #8]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f000 fa4c 	bl	800258c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	699a      	ldr	r2, [r3, #24]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002102:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	699a      	ldr	r2, [r3, #24]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002112:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6999      	ldr	r1, [r3, #24]
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	021a      	lsls	r2, r3, #8
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	430a      	orrs	r2, r1
 8002126:	619a      	str	r2, [r3, #24]
      break;
 8002128:	e043      	b.n	80021b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68b9      	ldr	r1, [r7, #8]
 8002130:	4618      	mov	r0, r3
 8002132:	f000 faa1 	bl	8002678 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	69da      	ldr	r2, [r3, #28]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f042 0208 	orr.w	r2, r2, #8
 8002144:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	69da      	ldr	r2, [r3, #28]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f022 0204 	bic.w	r2, r2, #4
 8002154:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	69d9      	ldr	r1, [r3, #28]
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	691a      	ldr	r2, [r3, #16]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	430a      	orrs	r2, r1
 8002166:	61da      	str	r2, [r3, #28]
      break;
 8002168:	e023      	b.n	80021b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68b9      	ldr	r1, [r7, #8]
 8002170:	4618      	mov	r0, r3
 8002172:	f000 faf5 	bl	8002760 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	69da      	ldr	r2, [r3, #28]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002184:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	69da      	ldr	r2, [r3, #28]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002194:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	69d9      	ldr	r1, [r3, #28]
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	021a      	lsls	r2, r3, #8
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	430a      	orrs	r2, r1
 80021a8:	61da      	str	r2, [r3, #28]
      break;
 80021aa:	e002      	b.n	80021b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	75fb      	strb	r3, [r7, #23]
      break;
 80021b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80021ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3718      	adds	r7, #24
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021ce:	2300      	movs	r3, #0
 80021d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d101      	bne.n	80021e0 <HAL_TIM_ConfigClockSource+0x1c>
 80021dc:	2302      	movs	r3, #2
 80021de:	e0b4      	b.n	800234a <HAL_TIM_ConfigClockSource+0x186>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2202      	movs	r2, #2
 80021ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80021fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002206:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68ba      	ldr	r2, [r7, #8]
 800220e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002218:	d03e      	beq.n	8002298 <HAL_TIM_ConfigClockSource+0xd4>
 800221a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800221e:	f200 8087 	bhi.w	8002330 <HAL_TIM_ConfigClockSource+0x16c>
 8002222:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002226:	f000 8086 	beq.w	8002336 <HAL_TIM_ConfigClockSource+0x172>
 800222a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800222e:	d87f      	bhi.n	8002330 <HAL_TIM_ConfigClockSource+0x16c>
 8002230:	2b70      	cmp	r3, #112	@ 0x70
 8002232:	d01a      	beq.n	800226a <HAL_TIM_ConfigClockSource+0xa6>
 8002234:	2b70      	cmp	r3, #112	@ 0x70
 8002236:	d87b      	bhi.n	8002330 <HAL_TIM_ConfigClockSource+0x16c>
 8002238:	2b60      	cmp	r3, #96	@ 0x60
 800223a:	d050      	beq.n	80022de <HAL_TIM_ConfigClockSource+0x11a>
 800223c:	2b60      	cmp	r3, #96	@ 0x60
 800223e:	d877      	bhi.n	8002330 <HAL_TIM_ConfigClockSource+0x16c>
 8002240:	2b50      	cmp	r3, #80	@ 0x50
 8002242:	d03c      	beq.n	80022be <HAL_TIM_ConfigClockSource+0xfa>
 8002244:	2b50      	cmp	r3, #80	@ 0x50
 8002246:	d873      	bhi.n	8002330 <HAL_TIM_ConfigClockSource+0x16c>
 8002248:	2b40      	cmp	r3, #64	@ 0x40
 800224a:	d058      	beq.n	80022fe <HAL_TIM_ConfigClockSource+0x13a>
 800224c:	2b40      	cmp	r3, #64	@ 0x40
 800224e:	d86f      	bhi.n	8002330 <HAL_TIM_ConfigClockSource+0x16c>
 8002250:	2b30      	cmp	r3, #48	@ 0x30
 8002252:	d064      	beq.n	800231e <HAL_TIM_ConfigClockSource+0x15a>
 8002254:	2b30      	cmp	r3, #48	@ 0x30
 8002256:	d86b      	bhi.n	8002330 <HAL_TIM_ConfigClockSource+0x16c>
 8002258:	2b20      	cmp	r3, #32
 800225a:	d060      	beq.n	800231e <HAL_TIM_ConfigClockSource+0x15a>
 800225c:	2b20      	cmp	r3, #32
 800225e:	d867      	bhi.n	8002330 <HAL_TIM_ConfigClockSource+0x16c>
 8002260:	2b00      	cmp	r3, #0
 8002262:	d05c      	beq.n	800231e <HAL_TIM_ConfigClockSource+0x15a>
 8002264:	2b10      	cmp	r3, #16
 8002266:	d05a      	beq.n	800231e <HAL_TIM_ConfigClockSource+0x15a>
 8002268:	e062      	b.n	8002330 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800227a:	f000 fb41 	bl	8002900 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800228c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68ba      	ldr	r2, [r7, #8]
 8002294:	609a      	str	r2, [r3, #8]
      break;
 8002296:	e04f      	b.n	8002338 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80022a8:	f000 fb2a 	bl	8002900 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	689a      	ldr	r2, [r3, #8]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80022ba:	609a      	str	r2, [r3, #8]
      break;
 80022bc:	e03c      	b.n	8002338 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022ca:	461a      	mov	r2, r3
 80022cc:	f000 fa9e 	bl	800280c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2150      	movs	r1, #80	@ 0x50
 80022d6:	4618      	mov	r0, r3
 80022d8:	f000 faf7 	bl	80028ca <TIM_ITRx_SetConfig>
      break;
 80022dc:	e02c      	b.n	8002338 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80022ea:	461a      	mov	r2, r3
 80022ec:	f000 fabd 	bl	800286a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2160      	movs	r1, #96	@ 0x60
 80022f6:	4618      	mov	r0, r3
 80022f8:	f000 fae7 	bl	80028ca <TIM_ITRx_SetConfig>
      break;
 80022fc:	e01c      	b.n	8002338 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800230a:	461a      	mov	r2, r3
 800230c:	f000 fa7e 	bl	800280c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2140      	movs	r1, #64	@ 0x40
 8002316:	4618      	mov	r0, r3
 8002318:	f000 fad7 	bl	80028ca <TIM_ITRx_SetConfig>
      break;
 800231c:	e00c      	b.n	8002338 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4619      	mov	r1, r3
 8002328:	4610      	mov	r0, r2
 800232a:	f000 face 	bl	80028ca <TIM_ITRx_SetConfig>
      break;
 800232e:	e003      	b.n	8002338 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	73fb      	strb	r3, [r7, #15]
      break;
 8002334:	e000      	b.n	8002338 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002336:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002348:	7bfb      	ldrb	r3, [r7, #15]
}
 800234a:	4618      	mov	r0, r3
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
	...

08002354 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4a46      	ldr	r2, [pc, #280]	@ (8002480 <TIM_Base_SetConfig+0x12c>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d013      	beq.n	8002394 <TIM_Base_SetConfig+0x40>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002372:	d00f      	beq.n	8002394 <TIM_Base_SetConfig+0x40>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4a43      	ldr	r2, [pc, #268]	@ (8002484 <TIM_Base_SetConfig+0x130>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d00b      	beq.n	8002394 <TIM_Base_SetConfig+0x40>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4a42      	ldr	r2, [pc, #264]	@ (8002488 <TIM_Base_SetConfig+0x134>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d007      	beq.n	8002394 <TIM_Base_SetConfig+0x40>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a41      	ldr	r2, [pc, #260]	@ (800248c <TIM_Base_SetConfig+0x138>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d003      	beq.n	8002394 <TIM_Base_SetConfig+0x40>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4a40      	ldr	r2, [pc, #256]	@ (8002490 <TIM_Base_SetConfig+0x13c>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d108      	bne.n	80023a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800239a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a35      	ldr	r2, [pc, #212]	@ (8002480 <TIM_Base_SetConfig+0x12c>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d02b      	beq.n	8002406 <TIM_Base_SetConfig+0xb2>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023b4:	d027      	beq.n	8002406 <TIM_Base_SetConfig+0xb2>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a32      	ldr	r2, [pc, #200]	@ (8002484 <TIM_Base_SetConfig+0x130>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d023      	beq.n	8002406 <TIM_Base_SetConfig+0xb2>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a31      	ldr	r2, [pc, #196]	@ (8002488 <TIM_Base_SetConfig+0x134>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d01f      	beq.n	8002406 <TIM_Base_SetConfig+0xb2>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a30      	ldr	r2, [pc, #192]	@ (800248c <TIM_Base_SetConfig+0x138>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d01b      	beq.n	8002406 <TIM_Base_SetConfig+0xb2>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a2f      	ldr	r2, [pc, #188]	@ (8002490 <TIM_Base_SetConfig+0x13c>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d017      	beq.n	8002406 <TIM_Base_SetConfig+0xb2>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a2e      	ldr	r2, [pc, #184]	@ (8002494 <TIM_Base_SetConfig+0x140>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d013      	beq.n	8002406 <TIM_Base_SetConfig+0xb2>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a2d      	ldr	r2, [pc, #180]	@ (8002498 <TIM_Base_SetConfig+0x144>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d00f      	beq.n	8002406 <TIM_Base_SetConfig+0xb2>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a2c      	ldr	r2, [pc, #176]	@ (800249c <TIM_Base_SetConfig+0x148>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d00b      	beq.n	8002406 <TIM_Base_SetConfig+0xb2>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a2b      	ldr	r2, [pc, #172]	@ (80024a0 <TIM_Base_SetConfig+0x14c>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d007      	beq.n	8002406 <TIM_Base_SetConfig+0xb2>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a2a      	ldr	r2, [pc, #168]	@ (80024a4 <TIM_Base_SetConfig+0x150>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d003      	beq.n	8002406 <TIM_Base_SetConfig+0xb2>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a29      	ldr	r2, [pc, #164]	@ (80024a8 <TIM_Base_SetConfig+0x154>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d108      	bne.n	8002418 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800240c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	4313      	orrs	r3, r2
 8002416:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	4313      	orrs	r3, r2
 8002424:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	68fa      	ldr	r2, [r7, #12]
 800242a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	689a      	ldr	r2, [r3, #8]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4a10      	ldr	r2, [pc, #64]	@ (8002480 <TIM_Base_SetConfig+0x12c>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d003      	beq.n	800244c <TIM_Base_SetConfig+0xf8>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4a12      	ldr	r2, [pc, #72]	@ (8002490 <TIM_Base_SetConfig+0x13c>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d103      	bne.n	8002454 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	691a      	ldr	r2, [r3, #16]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	2b01      	cmp	r3, #1
 8002464:	d105      	bne.n	8002472 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	f023 0201 	bic.w	r2, r3, #1
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	611a      	str	r2, [r3, #16]
  }
}
 8002472:	bf00      	nop
 8002474:	3714      	adds	r7, #20
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	40010000 	.word	0x40010000
 8002484:	40000400 	.word	0x40000400
 8002488:	40000800 	.word	0x40000800
 800248c:	40000c00 	.word	0x40000c00
 8002490:	40010400 	.word	0x40010400
 8002494:	40014000 	.word	0x40014000
 8002498:	40014400 	.word	0x40014400
 800249c:	40014800 	.word	0x40014800
 80024a0:	40001800 	.word	0x40001800
 80024a4:	40001c00 	.word	0x40001c00
 80024a8:	40002000 	.word	0x40002000

080024ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b087      	sub	sp, #28
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a1b      	ldr	r3, [r3, #32]
 80024ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	f023 0201 	bic.w	r2, r3, #1
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f023 0303 	bic.w	r3, r3, #3
 80024e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	68fa      	ldr	r2, [r7, #12]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	f023 0302 	bic.w	r3, r3, #2
 80024f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a20      	ldr	r2, [pc, #128]	@ (8002584 <TIM_OC1_SetConfig+0xd8>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d003      	beq.n	8002510 <TIM_OC1_SetConfig+0x64>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a1f      	ldr	r2, [pc, #124]	@ (8002588 <TIM_OC1_SetConfig+0xdc>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d10c      	bne.n	800252a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	f023 0308 	bic.w	r3, r3, #8
 8002516:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	4313      	orrs	r3, r2
 8002520:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	f023 0304 	bic.w	r3, r3, #4
 8002528:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a15      	ldr	r2, [pc, #84]	@ (8002584 <TIM_OC1_SetConfig+0xd8>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d003      	beq.n	800253a <TIM_OC1_SetConfig+0x8e>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a14      	ldr	r2, [pc, #80]	@ (8002588 <TIM_OC1_SetConfig+0xdc>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d111      	bne.n	800255e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002540:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002548:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	4313      	orrs	r3, r2
 8002552:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	4313      	orrs	r3, r2
 800255c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685a      	ldr	r2, [r3, #4]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	697a      	ldr	r2, [r7, #20]
 8002576:	621a      	str	r2, [r3, #32]
}
 8002578:	bf00      	nop
 800257a:	371c      	adds	r7, #28
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr
 8002584:	40010000 	.word	0x40010000
 8002588:	40010400 	.word	0x40010400

0800258c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800258c:	b480      	push	{r7}
 800258e:	b087      	sub	sp, #28
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a1b      	ldr	r3, [r3, #32]
 800259a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a1b      	ldr	r3, [r3, #32]
 80025a0:	f023 0210 	bic.w	r2, r3, #16
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80025ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	021b      	lsls	r3, r3, #8
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	f023 0320 	bic.w	r3, r3, #32
 80025d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	011b      	lsls	r3, r3, #4
 80025de:	697a      	ldr	r2, [r7, #20]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a22      	ldr	r2, [pc, #136]	@ (8002670 <TIM_OC2_SetConfig+0xe4>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d003      	beq.n	80025f4 <TIM_OC2_SetConfig+0x68>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a21      	ldr	r2, [pc, #132]	@ (8002674 <TIM_OC2_SetConfig+0xe8>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d10d      	bne.n	8002610 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80025fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	011b      	lsls	r3, r3, #4
 8002602:	697a      	ldr	r2, [r7, #20]
 8002604:	4313      	orrs	r3, r2
 8002606:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800260e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4a17      	ldr	r2, [pc, #92]	@ (8002670 <TIM_OC2_SetConfig+0xe4>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d003      	beq.n	8002620 <TIM_OC2_SetConfig+0x94>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4a16      	ldr	r2, [pc, #88]	@ (8002674 <TIM_OC2_SetConfig+0xe8>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d113      	bne.n	8002648 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002626:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800262e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	695b      	ldr	r3, [r3, #20]
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	4313      	orrs	r3, r2
 800263a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	4313      	orrs	r3, r2
 8002646:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	693a      	ldr	r2, [r7, #16]
 800264c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685a      	ldr	r2, [r3, #4]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	697a      	ldr	r2, [r7, #20]
 8002660:	621a      	str	r2, [r3, #32]
}
 8002662:	bf00      	nop
 8002664:	371c      	adds	r7, #28
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	40010000 	.word	0x40010000
 8002674:	40010400 	.word	0x40010400

08002678 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002678:	b480      	push	{r7}
 800267a:	b087      	sub	sp, #28
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a1b      	ldr	r3, [r3, #32]
 8002686:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a1b      	ldr	r3, [r3, #32]
 800268c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	69db      	ldr	r3, [r3, #28]
 800269e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f023 0303 	bic.w	r3, r3, #3
 80026ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	68fa      	ldr	r2, [r7, #12]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80026c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	021b      	lsls	r3, r3, #8
 80026c8:	697a      	ldr	r2, [r7, #20]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a21      	ldr	r2, [pc, #132]	@ (8002758 <TIM_OC3_SetConfig+0xe0>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d003      	beq.n	80026de <TIM_OC3_SetConfig+0x66>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a20      	ldr	r2, [pc, #128]	@ (800275c <TIM_OC3_SetConfig+0xe4>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d10d      	bne.n	80026fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80026e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	021b      	lsls	r3, r3, #8
 80026ec:	697a      	ldr	r2, [r7, #20]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80026f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a16      	ldr	r2, [pc, #88]	@ (8002758 <TIM_OC3_SetConfig+0xe0>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d003      	beq.n	800270a <TIM_OC3_SetConfig+0x92>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a15      	ldr	r2, [pc, #84]	@ (800275c <TIM_OC3_SetConfig+0xe4>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d113      	bne.n	8002732 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002710:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002718:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	011b      	lsls	r3, r3, #4
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	4313      	orrs	r3, r2
 8002724:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	011b      	lsls	r3, r3, #4
 800272c:	693a      	ldr	r2, [r7, #16]
 800272e:	4313      	orrs	r3, r2
 8002730:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	68fa      	ldr	r2, [r7, #12]
 800273c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685a      	ldr	r2, [r3, #4]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	621a      	str	r2, [r3, #32]
}
 800274c:	bf00      	nop
 800274e:	371c      	adds	r7, #28
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	40010000 	.word	0x40010000
 800275c:	40010400 	.word	0x40010400

08002760 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002760:	b480      	push	{r7}
 8002762:	b087      	sub	sp, #28
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a1b      	ldr	r3, [r3, #32]
 800276e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a1b      	ldr	r3, [r3, #32]
 8002774:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	69db      	ldr	r3, [r3, #28]
 8002786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800278e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002796:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	021b      	lsls	r3, r3, #8
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80027aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	031b      	lsls	r3, r3, #12
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4a12      	ldr	r2, [pc, #72]	@ (8002804 <TIM_OC4_SetConfig+0xa4>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d003      	beq.n	80027c8 <TIM_OC4_SetConfig+0x68>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	4a11      	ldr	r2, [pc, #68]	@ (8002808 <TIM_OC4_SetConfig+0xa8>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d109      	bne.n	80027dc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80027ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	695b      	ldr	r3, [r3, #20]
 80027d4:	019b      	lsls	r3, r3, #6
 80027d6:	697a      	ldr	r2, [r7, #20]
 80027d8:	4313      	orrs	r3, r2
 80027da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	697a      	ldr	r2, [r7, #20]
 80027e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685a      	ldr	r2, [r3, #4]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	621a      	str	r2, [r3, #32]
}
 80027f6:	bf00      	nop
 80027f8:	371c      	adds	r7, #28
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	40010000 	.word	0x40010000
 8002808:	40010400 	.word	0x40010400

0800280c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800280c:	b480      	push	{r7}
 800280e:	b087      	sub	sp, #28
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6a1b      	ldr	r3, [r3, #32]
 800281c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6a1b      	ldr	r3, [r3, #32]
 8002822:	f023 0201 	bic.w	r2, r3, #1
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002836:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	011b      	lsls	r3, r3, #4
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	4313      	orrs	r3, r2
 8002840:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	f023 030a 	bic.w	r3, r3, #10
 8002848:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	4313      	orrs	r3, r2
 8002850:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	697a      	ldr	r2, [r7, #20]
 800285c:	621a      	str	r2, [r3, #32]
}
 800285e:	bf00      	nop
 8002860:	371c      	adds	r7, #28
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr

0800286a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800286a:	b480      	push	{r7}
 800286c:	b087      	sub	sp, #28
 800286e:	af00      	add	r7, sp, #0
 8002870:	60f8      	str	r0, [r7, #12]
 8002872:	60b9      	str	r1, [r7, #8]
 8002874:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6a1b      	ldr	r3, [r3, #32]
 8002880:	f023 0210 	bic.w	r2, r3, #16
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002894:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	031b      	lsls	r3, r3, #12
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	4313      	orrs	r3, r2
 800289e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80028a6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	011b      	lsls	r3, r3, #4
 80028ac:	697a      	ldr	r2, [r7, #20]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	697a      	ldr	r2, [r7, #20]
 80028bc:	621a      	str	r2, [r3, #32]
}
 80028be:	bf00      	nop
 80028c0:	371c      	adds	r7, #28
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr

080028ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028ca:	b480      	push	{r7}
 80028cc:	b085      	sub	sp, #20
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
 80028d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028e2:	683a      	ldr	r2, [r7, #0]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	f043 0307 	orr.w	r3, r3, #7
 80028ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	609a      	str	r2, [r3, #8]
}
 80028f4:	bf00      	nop
 80028f6:	3714      	adds	r7, #20
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002900:	b480      	push	{r7}
 8002902:	b087      	sub	sp, #28
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
 800290c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800291a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	021a      	lsls	r2, r3, #8
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	431a      	orrs	r2, r3
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	4313      	orrs	r3, r2
 8002928:	697a      	ldr	r2, [r7, #20]
 800292a:	4313      	orrs	r3, r2
 800292c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	609a      	str	r2, [r3, #8]
}
 8002934:	bf00      	nop
 8002936:	371c      	adds	r7, #28
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002940:	b480      	push	{r7}
 8002942:	b087      	sub	sp, #28
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	f003 031f 	and.w	r3, r3, #31
 8002952:	2201      	movs	r2, #1
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6a1a      	ldr	r2, [r3, #32]
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	43db      	mvns	r3, r3
 8002962:	401a      	ands	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6a1a      	ldr	r2, [r3, #32]
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	f003 031f 	and.w	r3, r3, #31
 8002972:	6879      	ldr	r1, [r7, #4]
 8002974:	fa01 f303 	lsl.w	r3, r1, r3
 8002978:	431a      	orrs	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	621a      	str	r2, [r3, #32]
}
 800297e:	bf00      	nop
 8002980:	371c      	adds	r7, #28
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
	...

0800298c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800299c:	2b01      	cmp	r3, #1
 800299e:	d101      	bne.n	80029a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029a0:	2302      	movs	r3, #2
 80029a2:	e05a      	b.n	8002a5a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2202      	movs	r2, #2
 80029b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a21      	ldr	r2, [pc, #132]	@ (8002a68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d022      	beq.n	8002a2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029f0:	d01d      	beq.n	8002a2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a1d      	ldr	r2, [pc, #116]	@ (8002a6c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d018      	beq.n	8002a2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a1b      	ldr	r2, [pc, #108]	@ (8002a70 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d013      	beq.n	8002a2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a1a      	ldr	r2, [pc, #104]	@ (8002a74 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d00e      	beq.n	8002a2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a18      	ldr	r2, [pc, #96]	@ (8002a78 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d009      	beq.n	8002a2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a17      	ldr	r2, [pc, #92]	@ (8002a7c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d004      	beq.n	8002a2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a15      	ldr	r2, [pc, #84]	@ (8002a80 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d10c      	bne.n	8002a48 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	68ba      	ldr	r2, [r7, #8]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68ba      	ldr	r2, [r7, #8]
 8002a46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3714      	adds	r7, #20
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	40010000 	.word	0x40010000
 8002a6c:	40000400 	.word	0x40000400
 8002a70:	40000800 	.word	0x40000800
 8002a74:	40000c00 	.word	0x40000c00
 8002a78:	40010400 	.word	0x40010400
 8002a7c:	40014000 	.word	0x40014000
 8002a80:	40001800 	.word	0x40001800

08002a84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e042      	b.n	8002b1c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d106      	bne.n	8002ab0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f7fe f876 	bl	8000b9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2224      	movs	r2, #36	@ 0x24
 8002ab4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	68da      	ldr	r2, [r3, #12]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002ac6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f000 f82b 	bl	8002b24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	691a      	ldr	r2, [r3, #16]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002adc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	695a      	ldr	r2, [r3, #20]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002aec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68da      	ldr	r2, [r3, #12]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002afc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2220      	movs	r2, #32
 8002b08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2220      	movs	r2, #32
 8002b10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3708      	adds	r7, #8
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b28:	b0c0      	sub	sp, #256	@ 0x100
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b40:	68d9      	ldr	r1, [r3, #12]
 8002b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	ea40 0301 	orr.w	r3, r0, r1
 8002b4c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	431a      	orrs	r2, r3
 8002b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b68:	69db      	ldr	r3, [r3, #28]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002b7c:	f021 010c 	bic.w	r1, r1, #12
 8002b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002b8a:	430b      	orrs	r3, r1
 8002b8c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b9e:	6999      	ldr	r1, [r3, #24]
 8002ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	ea40 0301 	orr.w	r3, r0, r1
 8002baa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	4b8f      	ldr	r3, [pc, #572]	@ (8002df0 <UART_SetConfig+0x2cc>)
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d005      	beq.n	8002bc4 <UART_SetConfig+0xa0>
 8002bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	4b8d      	ldr	r3, [pc, #564]	@ (8002df4 <UART_SetConfig+0x2d0>)
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d104      	bne.n	8002bce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002bc4:	f7ff f8b8 	bl	8001d38 <HAL_RCC_GetPCLK2Freq>
 8002bc8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002bcc:	e003      	b.n	8002bd6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002bce:	f7ff f89f 	bl	8001d10 <HAL_RCC_GetPCLK1Freq>
 8002bd2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bda:	69db      	ldr	r3, [r3, #28]
 8002bdc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002be0:	f040 810c 	bne.w	8002dfc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002be4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002be8:	2200      	movs	r2, #0
 8002bea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002bee:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002bf2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002bf6:	4622      	mov	r2, r4
 8002bf8:	462b      	mov	r3, r5
 8002bfa:	1891      	adds	r1, r2, r2
 8002bfc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002bfe:	415b      	adcs	r3, r3
 8002c00:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002c02:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002c06:	4621      	mov	r1, r4
 8002c08:	eb12 0801 	adds.w	r8, r2, r1
 8002c0c:	4629      	mov	r1, r5
 8002c0e:	eb43 0901 	adc.w	r9, r3, r1
 8002c12:	f04f 0200 	mov.w	r2, #0
 8002c16:	f04f 0300 	mov.w	r3, #0
 8002c1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c26:	4690      	mov	r8, r2
 8002c28:	4699      	mov	r9, r3
 8002c2a:	4623      	mov	r3, r4
 8002c2c:	eb18 0303 	adds.w	r3, r8, r3
 8002c30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002c34:	462b      	mov	r3, r5
 8002c36:	eb49 0303 	adc.w	r3, r9, r3
 8002c3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002c4a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002c4e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002c52:	460b      	mov	r3, r1
 8002c54:	18db      	adds	r3, r3, r3
 8002c56:	653b      	str	r3, [r7, #80]	@ 0x50
 8002c58:	4613      	mov	r3, r2
 8002c5a:	eb42 0303 	adc.w	r3, r2, r3
 8002c5e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002c60:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002c64:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002c68:	f7fd fb02 	bl	8000270 <__aeabi_uldivmod>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	460b      	mov	r3, r1
 8002c70:	4b61      	ldr	r3, [pc, #388]	@ (8002df8 <UART_SetConfig+0x2d4>)
 8002c72:	fba3 2302 	umull	r2, r3, r3, r2
 8002c76:	095b      	lsrs	r3, r3, #5
 8002c78:	011c      	lsls	r4, r3, #4
 8002c7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002c84:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002c88:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002c8c:	4642      	mov	r2, r8
 8002c8e:	464b      	mov	r3, r9
 8002c90:	1891      	adds	r1, r2, r2
 8002c92:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002c94:	415b      	adcs	r3, r3
 8002c96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c98:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002c9c:	4641      	mov	r1, r8
 8002c9e:	eb12 0a01 	adds.w	sl, r2, r1
 8002ca2:	4649      	mov	r1, r9
 8002ca4:	eb43 0b01 	adc.w	fp, r3, r1
 8002ca8:	f04f 0200 	mov.w	r2, #0
 8002cac:	f04f 0300 	mov.w	r3, #0
 8002cb0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002cb4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002cb8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002cbc:	4692      	mov	sl, r2
 8002cbe:	469b      	mov	fp, r3
 8002cc0:	4643      	mov	r3, r8
 8002cc2:	eb1a 0303 	adds.w	r3, sl, r3
 8002cc6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002cca:	464b      	mov	r3, r9
 8002ccc:	eb4b 0303 	adc.w	r3, fp, r3
 8002cd0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002ce0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002ce4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002ce8:	460b      	mov	r3, r1
 8002cea:	18db      	adds	r3, r3, r3
 8002cec:	643b      	str	r3, [r7, #64]	@ 0x40
 8002cee:	4613      	mov	r3, r2
 8002cf0:	eb42 0303 	adc.w	r3, r2, r3
 8002cf4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002cf6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002cfa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002cfe:	f7fd fab7 	bl	8000270 <__aeabi_uldivmod>
 8002d02:	4602      	mov	r2, r0
 8002d04:	460b      	mov	r3, r1
 8002d06:	4611      	mov	r1, r2
 8002d08:	4b3b      	ldr	r3, [pc, #236]	@ (8002df8 <UART_SetConfig+0x2d4>)
 8002d0a:	fba3 2301 	umull	r2, r3, r3, r1
 8002d0e:	095b      	lsrs	r3, r3, #5
 8002d10:	2264      	movs	r2, #100	@ 0x64
 8002d12:	fb02 f303 	mul.w	r3, r2, r3
 8002d16:	1acb      	subs	r3, r1, r3
 8002d18:	00db      	lsls	r3, r3, #3
 8002d1a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002d1e:	4b36      	ldr	r3, [pc, #216]	@ (8002df8 <UART_SetConfig+0x2d4>)
 8002d20:	fba3 2302 	umull	r2, r3, r3, r2
 8002d24:	095b      	lsrs	r3, r3, #5
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002d2c:	441c      	add	r4, r3
 8002d2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d32:	2200      	movs	r2, #0
 8002d34:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002d38:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002d3c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002d40:	4642      	mov	r2, r8
 8002d42:	464b      	mov	r3, r9
 8002d44:	1891      	adds	r1, r2, r2
 8002d46:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002d48:	415b      	adcs	r3, r3
 8002d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002d50:	4641      	mov	r1, r8
 8002d52:	1851      	adds	r1, r2, r1
 8002d54:	6339      	str	r1, [r7, #48]	@ 0x30
 8002d56:	4649      	mov	r1, r9
 8002d58:	414b      	adcs	r3, r1
 8002d5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d5c:	f04f 0200 	mov.w	r2, #0
 8002d60:	f04f 0300 	mov.w	r3, #0
 8002d64:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002d68:	4659      	mov	r1, fp
 8002d6a:	00cb      	lsls	r3, r1, #3
 8002d6c:	4651      	mov	r1, sl
 8002d6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d72:	4651      	mov	r1, sl
 8002d74:	00ca      	lsls	r2, r1, #3
 8002d76:	4610      	mov	r0, r2
 8002d78:	4619      	mov	r1, r3
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	4642      	mov	r2, r8
 8002d7e:	189b      	adds	r3, r3, r2
 8002d80:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002d84:	464b      	mov	r3, r9
 8002d86:	460a      	mov	r2, r1
 8002d88:	eb42 0303 	adc.w	r3, r2, r3
 8002d8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002d9c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002da0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002da4:	460b      	mov	r3, r1
 8002da6:	18db      	adds	r3, r3, r3
 8002da8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002daa:	4613      	mov	r3, r2
 8002dac:	eb42 0303 	adc.w	r3, r2, r3
 8002db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002db2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002db6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002dba:	f7fd fa59 	bl	8000270 <__aeabi_uldivmod>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8002df8 <UART_SetConfig+0x2d4>)
 8002dc4:	fba3 1302 	umull	r1, r3, r3, r2
 8002dc8:	095b      	lsrs	r3, r3, #5
 8002dca:	2164      	movs	r1, #100	@ 0x64
 8002dcc:	fb01 f303 	mul.w	r3, r1, r3
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	3332      	adds	r3, #50	@ 0x32
 8002dd6:	4a08      	ldr	r2, [pc, #32]	@ (8002df8 <UART_SetConfig+0x2d4>)
 8002dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ddc:	095b      	lsrs	r3, r3, #5
 8002dde:	f003 0207 	and.w	r2, r3, #7
 8002de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4422      	add	r2, r4
 8002dea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002dec:	e106      	b.n	8002ffc <UART_SetConfig+0x4d8>
 8002dee:	bf00      	nop
 8002df0:	40011000 	.word	0x40011000
 8002df4:	40011400 	.word	0x40011400
 8002df8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002dfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e00:	2200      	movs	r2, #0
 8002e02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002e06:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002e0a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002e0e:	4642      	mov	r2, r8
 8002e10:	464b      	mov	r3, r9
 8002e12:	1891      	adds	r1, r2, r2
 8002e14:	6239      	str	r1, [r7, #32]
 8002e16:	415b      	adcs	r3, r3
 8002e18:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e1e:	4641      	mov	r1, r8
 8002e20:	1854      	adds	r4, r2, r1
 8002e22:	4649      	mov	r1, r9
 8002e24:	eb43 0501 	adc.w	r5, r3, r1
 8002e28:	f04f 0200 	mov.w	r2, #0
 8002e2c:	f04f 0300 	mov.w	r3, #0
 8002e30:	00eb      	lsls	r3, r5, #3
 8002e32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e36:	00e2      	lsls	r2, r4, #3
 8002e38:	4614      	mov	r4, r2
 8002e3a:	461d      	mov	r5, r3
 8002e3c:	4643      	mov	r3, r8
 8002e3e:	18e3      	adds	r3, r4, r3
 8002e40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002e44:	464b      	mov	r3, r9
 8002e46:	eb45 0303 	adc.w	r3, r5, r3
 8002e4a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002e5a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002e5e:	f04f 0200 	mov.w	r2, #0
 8002e62:	f04f 0300 	mov.w	r3, #0
 8002e66:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002e6a:	4629      	mov	r1, r5
 8002e6c:	008b      	lsls	r3, r1, #2
 8002e6e:	4621      	mov	r1, r4
 8002e70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e74:	4621      	mov	r1, r4
 8002e76:	008a      	lsls	r2, r1, #2
 8002e78:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002e7c:	f7fd f9f8 	bl	8000270 <__aeabi_uldivmod>
 8002e80:	4602      	mov	r2, r0
 8002e82:	460b      	mov	r3, r1
 8002e84:	4b60      	ldr	r3, [pc, #384]	@ (8003008 <UART_SetConfig+0x4e4>)
 8002e86:	fba3 2302 	umull	r2, r3, r3, r2
 8002e8a:	095b      	lsrs	r3, r3, #5
 8002e8c:	011c      	lsls	r4, r3, #4
 8002e8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e92:	2200      	movs	r2, #0
 8002e94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002e98:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002e9c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002ea0:	4642      	mov	r2, r8
 8002ea2:	464b      	mov	r3, r9
 8002ea4:	1891      	adds	r1, r2, r2
 8002ea6:	61b9      	str	r1, [r7, #24]
 8002ea8:	415b      	adcs	r3, r3
 8002eaa:	61fb      	str	r3, [r7, #28]
 8002eac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002eb0:	4641      	mov	r1, r8
 8002eb2:	1851      	adds	r1, r2, r1
 8002eb4:	6139      	str	r1, [r7, #16]
 8002eb6:	4649      	mov	r1, r9
 8002eb8:	414b      	adcs	r3, r1
 8002eba:	617b      	str	r3, [r7, #20]
 8002ebc:	f04f 0200 	mov.w	r2, #0
 8002ec0:	f04f 0300 	mov.w	r3, #0
 8002ec4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ec8:	4659      	mov	r1, fp
 8002eca:	00cb      	lsls	r3, r1, #3
 8002ecc:	4651      	mov	r1, sl
 8002ece:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ed2:	4651      	mov	r1, sl
 8002ed4:	00ca      	lsls	r2, r1, #3
 8002ed6:	4610      	mov	r0, r2
 8002ed8:	4619      	mov	r1, r3
 8002eda:	4603      	mov	r3, r0
 8002edc:	4642      	mov	r2, r8
 8002ede:	189b      	adds	r3, r3, r2
 8002ee0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002ee4:	464b      	mov	r3, r9
 8002ee6:	460a      	mov	r2, r1
 8002ee8:	eb42 0303 	adc.w	r3, r2, r3
 8002eec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002efa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002efc:	f04f 0200 	mov.w	r2, #0
 8002f00:	f04f 0300 	mov.w	r3, #0
 8002f04:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002f08:	4649      	mov	r1, r9
 8002f0a:	008b      	lsls	r3, r1, #2
 8002f0c:	4641      	mov	r1, r8
 8002f0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f12:	4641      	mov	r1, r8
 8002f14:	008a      	lsls	r2, r1, #2
 8002f16:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002f1a:	f7fd f9a9 	bl	8000270 <__aeabi_uldivmod>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	460b      	mov	r3, r1
 8002f22:	4611      	mov	r1, r2
 8002f24:	4b38      	ldr	r3, [pc, #224]	@ (8003008 <UART_SetConfig+0x4e4>)
 8002f26:	fba3 2301 	umull	r2, r3, r3, r1
 8002f2a:	095b      	lsrs	r3, r3, #5
 8002f2c:	2264      	movs	r2, #100	@ 0x64
 8002f2e:	fb02 f303 	mul.w	r3, r2, r3
 8002f32:	1acb      	subs	r3, r1, r3
 8002f34:	011b      	lsls	r3, r3, #4
 8002f36:	3332      	adds	r3, #50	@ 0x32
 8002f38:	4a33      	ldr	r2, [pc, #204]	@ (8003008 <UART_SetConfig+0x4e4>)
 8002f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3e:	095b      	lsrs	r3, r3, #5
 8002f40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f44:	441c      	add	r4, r3
 8002f46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	673b      	str	r3, [r7, #112]	@ 0x70
 8002f4e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002f50:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002f54:	4642      	mov	r2, r8
 8002f56:	464b      	mov	r3, r9
 8002f58:	1891      	adds	r1, r2, r2
 8002f5a:	60b9      	str	r1, [r7, #8]
 8002f5c:	415b      	adcs	r3, r3
 8002f5e:	60fb      	str	r3, [r7, #12]
 8002f60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f64:	4641      	mov	r1, r8
 8002f66:	1851      	adds	r1, r2, r1
 8002f68:	6039      	str	r1, [r7, #0]
 8002f6a:	4649      	mov	r1, r9
 8002f6c:	414b      	adcs	r3, r1
 8002f6e:	607b      	str	r3, [r7, #4]
 8002f70:	f04f 0200 	mov.w	r2, #0
 8002f74:	f04f 0300 	mov.w	r3, #0
 8002f78:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002f7c:	4659      	mov	r1, fp
 8002f7e:	00cb      	lsls	r3, r1, #3
 8002f80:	4651      	mov	r1, sl
 8002f82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f86:	4651      	mov	r1, sl
 8002f88:	00ca      	lsls	r2, r1, #3
 8002f8a:	4610      	mov	r0, r2
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	4603      	mov	r3, r0
 8002f90:	4642      	mov	r2, r8
 8002f92:	189b      	adds	r3, r3, r2
 8002f94:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002f96:	464b      	mov	r3, r9
 8002f98:	460a      	mov	r2, r1
 8002f9a:	eb42 0303 	adc.w	r3, r2, r3
 8002f9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	663b      	str	r3, [r7, #96]	@ 0x60
 8002faa:	667a      	str	r2, [r7, #100]	@ 0x64
 8002fac:	f04f 0200 	mov.w	r2, #0
 8002fb0:	f04f 0300 	mov.w	r3, #0
 8002fb4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002fb8:	4649      	mov	r1, r9
 8002fba:	008b      	lsls	r3, r1, #2
 8002fbc:	4641      	mov	r1, r8
 8002fbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fc2:	4641      	mov	r1, r8
 8002fc4:	008a      	lsls	r2, r1, #2
 8002fc6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002fca:	f7fd f951 	bl	8000270 <__aeabi_uldivmod>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8003008 <UART_SetConfig+0x4e4>)
 8002fd4:	fba3 1302 	umull	r1, r3, r3, r2
 8002fd8:	095b      	lsrs	r3, r3, #5
 8002fda:	2164      	movs	r1, #100	@ 0x64
 8002fdc:	fb01 f303 	mul.w	r3, r1, r3
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	011b      	lsls	r3, r3, #4
 8002fe4:	3332      	adds	r3, #50	@ 0x32
 8002fe6:	4a08      	ldr	r2, [pc, #32]	@ (8003008 <UART_SetConfig+0x4e4>)
 8002fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fec:	095b      	lsrs	r3, r3, #5
 8002fee:	f003 020f 	and.w	r2, r3, #15
 8002ff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4422      	add	r2, r4
 8002ffa:	609a      	str	r2, [r3, #8]
}
 8002ffc:	bf00      	nop
 8002ffe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003002:	46bd      	mov	sp, r7
 8003004:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003008:	51eb851f 	.word	0x51eb851f

0800300c <std>:
 800300c:	2300      	movs	r3, #0
 800300e:	b510      	push	{r4, lr}
 8003010:	4604      	mov	r4, r0
 8003012:	e9c0 3300 	strd	r3, r3, [r0]
 8003016:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800301a:	6083      	str	r3, [r0, #8]
 800301c:	8181      	strh	r1, [r0, #12]
 800301e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003020:	81c2      	strh	r2, [r0, #14]
 8003022:	6183      	str	r3, [r0, #24]
 8003024:	4619      	mov	r1, r3
 8003026:	2208      	movs	r2, #8
 8003028:	305c      	adds	r0, #92	@ 0x5c
 800302a:	f000 f921 	bl	8003270 <memset>
 800302e:	4b0d      	ldr	r3, [pc, #52]	@ (8003064 <std+0x58>)
 8003030:	6263      	str	r3, [r4, #36]	@ 0x24
 8003032:	4b0d      	ldr	r3, [pc, #52]	@ (8003068 <std+0x5c>)
 8003034:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003036:	4b0d      	ldr	r3, [pc, #52]	@ (800306c <std+0x60>)
 8003038:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800303a:	4b0d      	ldr	r3, [pc, #52]	@ (8003070 <std+0x64>)
 800303c:	6323      	str	r3, [r4, #48]	@ 0x30
 800303e:	4b0d      	ldr	r3, [pc, #52]	@ (8003074 <std+0x68>)
 8003040:	6224      	str	r4, [r4, #32]
 8003042:	429c      	cmp	r4, r3
 8003044:	d006      	beq.n	8003054 <std+0x48>
 8003046:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800304a:	4294      	cmp	r4, r2
 800304c:	d002      	beq.n	8003054 <std+0x48>
 800304e:	33d0      	adds	r3, #208	@ 0xd0
 8003050:	429c      	cmp	r4, r3
 8003052:	d105      	bne.n	8003060 <std+0x54>
 8003054:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800305c:	f000 b93a 	b.w	80032d4 <__retarget_lock_init_recursive>
 8003060:	bd10      	pop	{r4, pc}
 8003062:	bf00      	nop
 8003064:	08003b2d 	.word	0x08003b2d
 8003068:	08003b4f 	.word	0x08003b4f
 800306c:	08003b87 	.word	0x08003b87
 8003070:	08003bab 	.word	0x08003bab
 8003074:	2000011c 	.word	0x2000011c

08003078 <stdio_exit_handler>:
 8003078:	4a02      	ldr	r2, [pc, #8]	@ (8003084 <stdio_exit_handler+0xc>)
 800307a:	4903      	ldr	r1, [pc, #12]	@ (8003088 <stdio_exit_handler+0x10>)
 800307c:	4803      	ldr	r0, [pc, #12]	@ (800308c <stdio_exit_handler+0x14>)
 800307e:	f000 b869 	b.w	8003154 <_fwalk_sglue>
 8003082:	bf00      	nop
 8003084:	2000000c 	.word	0x2000000c
 8003088:	08003ac5 	.word	0x08003ac5
 800308c:	2000001c 	.word	0x2000001c

08003090 <cleanup_stdio>:
 8003090:	6841      	ldr	r1, [r0, #4]
 8003092:	4b0c      	ldr	r3, [pc, #48]	@ (80030c4 <cleanup_stdio+0x34>)
 8003094:	4299      	cmp	r1, r3
 8003096:	b510      	push	{r4, lr}
 8003098:	4604      	mov	r4, r0
 800309a:	d001      	beq.n	80030a0 <cleanup_stdio+0x10>
 800309c:	f000 fd12 	bl	8003ac4 <_fflush_r>
 80030a0:	68a1      	ldr	r1, [r4, #8]
 80030a2:	4b09      	ldr	r3, [pc, #36]	@ (80030c8 <cleanup_stdio+0x38>)
 80030a4:	4299      	cmp	r1, r3
 80030a6:	d002      	beq.n	80030ae <cleanup_stdio+0x1e>
 80030a8:	4620      	mov	r0, r4
 80030aa:	f000 fd0b 	bl	8003ac4 <_fflush_r>
 80030ae:	68e1      	ldr	r1, [r4, #12]
 80030b0:	4b06      	ldr	r3, [pc, #24]	@ (80030cc <cleanup_stdio+0x3c>)
 80030b2:	4299      	cmp	r1, r3
 80030b4:	d004      	beq.n	80030c0 <cleanup_stdio+0x30>
 80030b6:	4620      	mov	r0, r4
 80030b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030bc:	f000 bd02 	b.w	8003ac4 <_fflush_r>
 80030c0:	bd10      	pop	{r4, pc}
 80030c2:	bf00      	nop
 80030c4:	2000011c 	.word	0x2000011c
 80030c8:	20000184 	.word	0x20000184
 80030cc:	200001ec 	.word	0x200001ec

080030d0 <global_stdio_init.part.0>:
 80030d0:	b510      	push	{r4, lr}
 80030d2:	4b0b      	ldr	r3, [pc, #44]	@ (8003100 <global_stdio_init.part.0+0x30>)
 80030d4:	4c0b      	ldr	r4, [pc, #44]	@ (8003104 <global_stdio_init.part.0+0x34>)
 80030d6:	4a0c      	ldr	r2, [pc, #48]	@ (8003108 <global_stdio_init.part.0+0x38>)
 80030d8:	601a      	str	r2, [r3, #0]
 80030da:	4620      	mov	r0, r4
 80030dc:	2200      	movs	r2, #0
 80030de:	2104      	movs	r1, #4
 80030e0:	f7ff ff94 	bl	800300c <std>
 80030e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80030e8:	2201      	movs	r2, #1
 80030ea:	2109      	movs	r1, #9
 80030ec:	f7ff ff8e 	bl	800300c <std>
 80030f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80030f4:	2202      	movs	r2, #2
 80030f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030fa:	2112      	movs	r1, #18
 80030fc:	f7ff bf86 	b.w	800300c <std>
 8003100:	20000254 	.word	0x20000254
 8003104:	2000011c 	.word	0x2000011c
 8003108:	08003079 	.word	0x08003079

0800310c <__sfp_lock_acquire>:
 800310c:	4801      	ldr	r0, [pc, #4]	@ (8003114 <__sfp_lock_acquire+0x8>)
 800310e:	f000 b8e2 	b.w	80032d6 <__retarget_lock_acquire_recursive>
 8003112:	bf00      	nop
 8003114:	20000259 	.word	0x20000259

08003118 <__sfp_lock_release>:
 8003118:	4801      	ldr	r0, [pc, #4]	@ (8003120 <__sfp_lock_release+0x8>)
 800311a:	f000 b8dd 	b.w	80032d8 <__retarget_lock_release_recursive>
 800311e:	bf00      	nop
 8003120:	20000259 	.word	0x20000259

08003124 <__sinit>:
 8003124:	b510      	push	{r4, lr}
 8003126:	4604      	mov	r4, r0
 8003128:	f7ff fff0 	bl	800310c <__sfp_lock_acquire>
 800312c:	6a23      	ldr	r3, [r4, #32]
 800312e:	b11b      	cbz	r3, 8003138 <__sinit+0x14>
 8003130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003134:	f7ff bff0 	b.w	8003118 <__sfp_lock_release>
 8003138:	4b04      	ldr	r3, [pc, #16]	@ (800314c <__sinit+0x28>)
 800313a:	6223      	str	r3, [r4, #32]
 800313c:	4b04      	ldr	r3, [pc, #16]	@ (8003150 <__sinit+0x2c>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d1f5      	bne.n	8003130 <__sinit+0xc>
 8003144:	f7ff ffc4 	bl	80030d0 <global_stdio_init.part.0>
 8003148:	e7f2      	b.n	8003130 <__sinit+0xc>
 800314a:	bf00      	nop
 800314c:	08003091 	.word	0x08003091
 8003150:	20000254 	.word	0x20000254

08003154 <_fwalk_sglue>:
 8003154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003158:	4607      	mov	r7, r0
 800315a:	4688      	mov	r8, r1
 800315c:	4614      	mov	r4, r2
 800315e:	2600      	movs	r6, #0
 8003160:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003164:	f1b9 0901 	subs.w	r9, r9, #1
 8003168:	d505      	bpl.n	8003176 <_fwalk_sglue+0x22>
 800316a:	6824      	ldr	r4, [r4, #0]
 800316c:	2c00      	cmp	r4, #0
 800316e:	d1f7      	bne.n	8003160 <_fwalk_sglue+0xc>
 8003170:	4630      	mov	r0, r6
 8003172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003176:	89ab      	ldrh	r3, [r5, #12]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d907      	bls.n	800318c <_fwalk_sglue+0x38>
 800317c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003180:	3301      	adds	r3, #1
 8003182:	d003      	beq.n	800318c <_fwalk_sglue+0x38>
 8003184:	4629      	mov	r1, r5
 8003186:	4638      	mov	r0, r7
 8003188:	47c0      	blx	r8
 800318a:	4306      	orrs	r6, r0
 800318c:	3568      	adds	r5, #104	@ 0x68
 800318e:	e7e9      	b.n	8003164 <_fwalk_sglue+0x10>

08003190 <iprintf>:
 8003190:	b40f      	push	{r0, r1, r2, r3}
 8003192:	b507      	push	{r0, r1, r2, lr}
 8003194:	4906      	ldr	r1, [pc, #24]	@ (80031b0 <iprintf+0x20>)
 8003196:	ab04      	add	r3, sp, #16
 8003198:	6808      	ldr	r0, [r1, #0]
 800319a:	f853 2b04 	ldr.w	r2, [r3], #4
 800319e:	6881      	ldr	r1, [r0, #8]
 80031a0:	9301      	str	r3, [sp, #4]
 80031a2:	f000 f8c3 	bl	800332c <_vfiprintf_r>
 80031a6:	b003      	add	sp, #12
 80031a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80031ac:	b004      	add	sp, #16
 80031ae:	4770      	bx	lr
 80031b0:	20000018 	.word	0x20000018

080031b4 <_puts_r>:
 80031b4:	6a03      	ldr	r3, [r0, #32]
 80031b6:	b570      	push	{r4, r5, r6, lr}
 80031b8:	6884      	ldr	r4, [r0, #8]
 80031ba:	4605      	mov	r5, r0
 80031bc:	460e      	mov	r6, r1
 80031be:	b90b      	cbnz	r3, 80031c4 <_puts_r+0x10>
 80031c0:	f7ff ffb0 	bl	8003124 <__sinit>
 80031c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80031c6:	07db      	lsls	r3, r3, #31
 80031c8:	d405      	bmi.n	80031d6 <_puts_r+0x22>
 80031ca:	89a3      	ldrh	r3, [r4, #12]
 80031cc:	0598      	lsls	r0, r3, #22
 80031ce:	d402      	bmi.n	80031d6 <_puts_r+0x22>
 80031d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80031d2:	f000 f880 	bl	80032d6 <__retarget_lock_acquire_recursive>
 80031d6:	89a3      	ldrh	r3, [r4, #12]
 80031d8:	0719      	lsls	r1, r3, #28
 80031da:	d502      	bpl.n	80031e2 <_puts_r+0x2e>
 80031dc:	6923      	ldr	r3, [r4, #16]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d135      	bne.n	800324e <_puts_r+0x9a>
 80031e2:	4621      	mov	r1, r4
 80031e4:	4628      	mov	r0, r5
 80031e6:	f000 fd23 	bl	8003c30 <__swsetup_r>
 80031ea:	b380      	cbz	r0, 800324e <_puts_r+0x9a>
 80031ec:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80031f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80031f2:	07da      	lsls	r2, r3, #31
 80031f4:	d405      	bmi.n	8003202 <_puts_r+0x4e>
 80031f6:	89a3      	ldrh	r3, [r4, #12]
 80031f8:	059b      	lsls	r3, r3, #22
 80031fa:	d402      	bmi.n	8003202 <_puts_r+0x4e>
 80031fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80031fe:	f000 f86b 	bl	80032d8 <__retarget_lock_release_recursive>
 8003202:	4628      	mov	r0, r5
 8003204:	bd70      	pop	{r4, r5, r6, pc}
 8003206:	2b00      	cmp	r3, #0
 8003208:	da04      	bge.n	8003214 <_puts_r+0x60>
 800320a:	69a2      	ldr	r2, [r4, #24]
 800320c:	429a      	cmp	r2, r3
 800320e:	dc17      	bgt.n	8003240 <_puts_r+0x8c>
 8003210:	290a      	cmp	r1, #10
 8003212:	d015      	beq.n	8003240 <_puts_r+0x8c>
 8003214:	6823      	ldr	r3, [r4, #0]
 8003216:	1c5a      	adds	r2, r3, #1
 8003218:	6022      	str	r2, [r4, #0]
 800321a:	7019      	strb	r1, [r3, #0]
 800321c:	68a3      	ldr	r3, [r4, #8]
 800321e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003222:	3b01      	subs	r3, #1
 8003224:	60a3      	str	r3, [r4, #8]
 8003226:	2900      	cmp	r1, #0
 8003228:	d1ed      	bne.n	8003206 <_puts_r+0x52>
 800322a:	2b00      	cmp	r3, #0
 800322c:	da11      	bge.n	8003252 <_puts_r+0x9e>
 800322e:	4622      	mov	r2, r4
 8003230:	210a      	movs	r1, #10
 8003232:	4628      	mov	r0, r5
 8003234:	f000 fcbd 	bl	8003bb2 <__swbuf_r>
 8003238:	3001      	adds	r0, #1
 800323a:	d0d7      	beq.n	80031ec <_puts_r+0x38>
 800323c:	250a      	movs	r5, #10
 800323e:	e7d7      	b.n	80031f0 <_puts_r+0x3c>
 8003240:	4622      	mov	r2, r4
 8003242:	4628      	mov	r0, r5
 8003244:	f000 fcb5 	bl	8003bb2 <__swbuf_r>
 8003248:	3001      	adds	r0, #1
 800324a:	d1e7      	bne.n	800321c <_puts_r+0x68>
 800324c:	e7ce      	b.n	80031ec <_puts_r+0x38>
 800324e:	3e01      	subs	r6, #1
 8003250:	e7e4      	b.n	800321c <_puts_r+0x68>
 8003252:	6823      	ldr	r3, [r4, #0]
 8003254:	1c5a      	adds	r2, r3, #1
 8003256:	6022      	str	r2, [r4, #0]
 8003258:	220a      	movs	r2, #10
 800325a:	701a      	strb	r2, [r3, #0]
 800325c:	e7ee      	b.n	800323c <_puts_r+0x88>
	...

08003260 <puts>:
 8003260:	4b02      	ldr	r3, [pc, #8]	@ (800326c <puts+0xc>)
 8003262:	4601      	mov	r1, r0
 8003264:	6818      	ldr	r0, [r3, #0]
 8003266:	f7ff bfa5 	b.w	80031b4 <_puts_r>
 800326a:	bf00      	nop
 800326c:	20000018 	.word	0x20000018

08003270 <memset>:
 8003270:	4402      	add	r2, r0
 8003272:	4603      	mov	r3, r0
 8003274:	4293      	cmp	r3, r2
 8003276:	d100      	bne.n	800327a <memset+0xa>
 8003278:	4770      	bx	lr
 800327a:	f803 1b01 	strb.w	r1, [r3], #1
 800327e:	e7f9      	b.n	8003274 <memset+0x4>

08003280 <__errno>:
 8003280:	4b01      	ldr	r3, [pc, #4]	@ (8003288 <__errno+0x8>)
 8003282:	6818      	ldr	r0, [r3, #0]
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	20000018 	.word	0x20000018

0800328c <__libc_init_array>:
 800328c:	b570      	push	{r4, r5, r6, lr}
 800328e:	4d0d      	ldr	r5, [pc, #52]	@ (80032c4 <__libc_init_array+0x38>)
 8003290:	4c0d      	ldr	r4, [pc, #52]	@ (80032c8 <__libc_init_array+0x3c>)
 8003292:	1b64      	subs	r4, r4, r5
 8003294:	10a4      	asrs	r4, r4, #2
 8003296:	2600      	movs	r6, #0
 8003298:	42a6      	cmp	r6, r4
 800329a:	d109      	bne.n	80032b0 <__libc_init_array+0x24>
 800329c:	4d0b      	ldr	r5, [pc, #44]	@ (80032cc <__libc_init_array+0x40>)
 800329e:	4c0c      	ldr	r4, [pc, #48]	@ (80032d0 <__libc_init_array+0x44>)
 80032a0:	f000 fe40 	bl	8003f24 <_init>
 80032a4:	1b64      	subs	r4, r4, r5
 80032a6:	10a4      	asrs	r4, r4, #2
 80032a8:	2600      	movs	r6, #0
 80032aa:	42a6      	cmp	r6, r4
 80032ac:	d105      	bne.n	80032ba <__libc_init_array+0x2e>
 80032ae:	bd70      	pop	{r4, r5, r6, pc}
 80032b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80032b4:	4798      	blx	r3
 80032b6:	3601      	adds	r6, #1
 80032b8:	e7ee      	b.n	8003298 <__libc_init_array+0xc>
 80032ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80032be:	4798      	blx	r3
 80032c0:	3601      	adds	r6, #1
 80032c2:	e7f2      	b.n	80032aa <__libc_init_array+0x1e>
 80032c4:	08003fc0 	.word	0x08003fc0
 80032c8:	08003fc0 	.word	0x08003fc0
 80032cc:	08003fc0 	.word	0x08003fc0
 80032d0:	08003fc4 	.word	0x08003fc4

080032d4 <__retarget_lock_init_recursive>:
 80032d4:	4770      	bx	lr

080032d6 <__retarget_lock_acquire_recursive>:
 80032d6:	4770      	bx	lr

080032d8 <__retarget_lock_release_recursive>:
 80032d8:	4770      	bx	lr

080032da <__sfputc_r>:
 80032da:	6893      	ldr	r3, [r2, #8]
 80032dc:	3b01      	subs	r3, #1
 80032de:	2b00      	cmp	r3, #0
 80032e0:	b410      	push	{r4}
 80032e2:	6093      	str	r3, [r2, #8]
 80032e4:	da08      	bge.n	80032f8 <__sfputc_r+0x1e>
 80032e6:	6994      	ldr	r4, [r2, #24]
 80032e8:	42a3      	cmp	r3, r4
 80032ea:	db01      	blt.n	80032f0 <__sfputc_r+0x16>
 80032ec:	290a      	cmp	r1, #10
 80032ee:	d103      	bne.n	80032f8 <__sfputc_r+0x1e>
 80032f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80032f4:	f000 bc5d 	b.w	8003bb2 <__swbuf_r>
 80032f8:	6813      	ldr	r3, [r2, #0]
 80032fa:	1c58      	adds	r0, r3, #1
 80032fc:	6010      	str	r0, [r2, #0]
 80032fe:	7019      	strb	r1, [r3, #0]
 8003300:	4608      	mov	r0, r1
 8003302:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003306:	4770      	bx	lr

08003308 <__sfputs_r>:
 8003308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800330a:	4606      	mov	r6, r0
 800330c:	460f      	mov	r7, r1
 800330e:	4614      	mov	r4, r2
 8003310:	18d5      	adds	r5, r2, r3
 8003312:	42ac      	cmp	r4, r5
 8003314:	d101      	bne.n	800331a <__sfputs_r+0x12>
 8003316:	2000      	movs	r0, #0
 8003318:	e007      	b.n	800332a <__sfputs_r+0x22>
 800331a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800331e:	463a      	mov	r2, r7
 8003320:	4630      	mov	r0, r6
 8003322:	f7ff ffda 	bl	80032da <__sfputc_r>
 8003326:	1c43      	adds	r3, r0, #1
 8003328:	d1f3      	bne.n	8003312 <__sfputs_r+0xa>
 800332a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800332c <_vfiprintf_r>:
 800332c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003330:	460d      	mov	r5, r1
 8003332:	b09d      	sub	sp, #116	@ 0x74
 8003334:	4614      	mov	r4, r2
 8003336:	4698      	mov	r8, r3
 8003338:	4606      	mov	r6, r0
 800333a:	b118      	cbz	r0, 8003344 <_vfiprintf_r+0x18>
 800333c:	6a03      	ldr	r3, [r0, #32]
 800333e:	b90b      	cbnz	r3, 8003344 <_vfiprintf_r+0x18>
 8003340:	f7ff fef0 	bl	8003124 <__sinit>
 8003344:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003346:	07d9      	lsls	r1, r3, #31
 8003348:	d405      	bmi.n	8003356 <_vfiprintf_r+0x2a>
 800334a:	89ab      	ldrh	r3, [r5, #12]
 800334c:	059a      	lsls	r2, r3, #22
 800334e:	d402      	bmi.n	8003356 <_vfiprintf_r+0x2a>
 8003350:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003352:	f7ff ffc0 	bl	80032d6 <__retarget_lock_acquire_recursive>
 8003356:	89ab      	ldrh	r3, [r5, #12]
 8003358:	071b      	lsls	r3, r3, #28
 800335a:	d501      	bpl.n	8003360 <_vfiprintf_r+0x34>
 800335c:	692b      	ldr	r3, [r5, #16]
 800335e:	b99b      	cbnz	r3, 8003388 <_vfiprintf_r+0x5c>
 8003360:	4629      	mov	r1, r5
 8003362:	4630      	mov	r0, r6
 8003364:	f000 fc64 	bl	8003c30 <__swsetup_r>
 8003368:	b170      	cbz	r0, 8003388 <_vfiprintf_r+0x5c>
 800336a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800336c:	07dc      	lsls	r4, r3, #31
 800336e:	d504      	bpl.n	800337a <_vfiprintf_r+0x4e>
 8003370:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003374:	b01d      	add	sp, #116	@ 0x74
 8003376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800337a:	89ab      	ldrh	r3, [r5, #12]
 800337c:	0598      	lsls	r0, r3, #22
 800337e:	d4f7      	bmi.n	8003370 <_vfiprintf_r+0x44>
 8003380:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003382:	f7ff ffa9 	bl	80032d8 <__retarget_lock_release_recursive>
 8003386:	e7f3      	b.n	8003370 <_vfiprintf_r+0x44>
 8003388:	2300      	movs	r3, #0
 800338a:	9309      	str	r3, [sp, #36]	@ 0x24
 800338c:	2320      	movs	r3, #32
 800338e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003392:	f8cd 800c 	str.w	r8, [sp, #12]
 8003396:	2330      	movs	r3, #48	@ 0x30
 8003398:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003548 <_vfiprintf_r+0x21c>
 800339c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80033a0:	f04f 0901 	mov.w	r9, #1
 80033a4:	4623      	mov	r3, r4
 80033a6:	469a      	mov	sl, r3
 80033a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80033ac:	b10a      	cbz	r2, 80033b2 <_vfiprintf_r+0x86>
 80033ae:	2a25      	cmp	r2, #37	@ 0x25
 80033b0:	d1f9      	bne.n	80033a6 <_vfiprintf_r+0x7a>
 80033b2:	ebba 0b04 	subs.w	fp, sl, r4
 80033b6:	d00b      	beq.n	80033d0 <_vfiprintf_r+0xa4>
 80033b8:	465b      	mov	r3, fp
 80033ba:	4622      	mov	r2, r4
 80033bc:	4629      	mov	r1, r5
 80033be:	4630      	mov	r0, r6
 80033c0:	f7ff ffa2 	bl	8003308 <__sfputs_r>
 80033c4:	3001      	adds	r0, #1
 80033c6:	f000 80a7 	beq.w	8003518 <_vfiprintf_r+0x1ec>
 80033ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80033cc:	445a      	add	r2, fp
 80033ce:	9209      	str	r2, [sp, #36]	@ 0x24
 80033d0:	f89a 3000 	ldrb.w	r3, [sl]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f000 809f 	beq.w	8003518 <_vfiprintf_r+0x1ec>
 80033da:	2300      	movs	r3, #0
 80033dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80033e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033e4:	f10a 0a01 	add.w	sl, sl, #1
 80033e8:	9304      	str	r3, [sp, #16]
 80033ea:	9307      	str	r3, [sp, #28]
 80033ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80033f0:	931a      	str	r3, [sp, #104]	@ 0x68
 80033f2:	4654      	mov	r4, sl
 80033f4:	2205      	movs	r2, #5
 80033f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033fa:	4853      	ldr	r0, [pc, #332]	@ (8003548 <_vfiprintf_r+0x21c>)
 80033fc:	f7fc fee8 	bl	80001d0 <memchr>
 8003400:	9a04      	ldr	r2, [sp, #16]
 8003402:	b9d8      	cbnz	r0, 800343c <_vfiprintf_r+0x110>
 8003404:	06d1      	lsls	r1, r2, #27
 8003406:	bf44      	itt	mi
 8003408:	2320      	movmi	r3, #32
 800340a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800340e:	0713      	lsls	r3, r2, #28
 8003410:	bf44      	itt	mi
 8003412:	232b      	movmi	r3, #43	@ 0x2b
 8003414:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003418:	f89a 3000 	ldrb.w	r3, [sl]
 800341c:	2b2a      	cmp	r3, #42	@ 0x2a
 800341e:	d015      	beq.n	800344c <_vfiprintf_r+0x120>
 8003420:	9a07      	ldr	r2, [sp, #28]
 8003422:	4654      	mov	r4, sl
 8003424:	2000      	movs	r0, #0
 8003426:	f04f 0c0a 	mov.w	ip, #10
 800342a:	4621      	mov	r1, r4
 800342c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003430:	3b30      	subs	r3, #48	@ 0x30
 8003432:	2b09      	cmp	r3, #9
 8003434:	d94b      	bls.n	80034ce <_vfiprintf_r+0x1a2>
 8003436:	b1b0      	cbz	r0, 8003466 <_vfiprintf_r+0x13a>
 8003438:	9207      	str	r2, [sp, #28]
 800343a:	e014      	b.n	8003466 <_vfiprintf_r+0x13a>
 800343c:	eba0 0308 	sub.w	r3, r0, r8
 8003440:	fa09 f303 	lsl.w	r3, r9, r3
 8003444:	4313      	orrs	r3, r2
 8003446:	9304      	str	r3, [sp, #16]
 8003448:	46a2      	mov	sl, r4
 800344a:	e7d2      	b.n	80033f2 <_vfiprintf_r+0xc6>
 800344c:	9b03      	ldr	r3, [sp, #12]
 800344e:	1d19      	adds	r1, r3, #4
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	9103      	str	r1, [sp, #12]
 8003454:	2b00      	cmp	r3, #0
 8003456:	bfbb      	ittet	lt
 8003458:	425b      	neglt	r3, r3
 800345a:	f042 0202 	orrlt.w	r2, r2, #2
 800345e:	9307      	strge	r3, [sp, #28]
 8003460:	9307      	strlt	r3, [sp, #28]
 8003462:	bfb8      	it	lt
 8003464:	9204      	strlt	r2, [sp, #16]
 8003466:	7823      	ldrb	r3, [r4, #0]
 8003468:	2b2e      	cmp	r3, #46	@ 0x2e
 800346a:	d10a      	bne.n	8003482 <_vfiprintf_r+0x156>
 800346c:	7863      	ldrb	r3, [r4, #1]
 800346e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003470:	d132      	bne.n	80034d8 <_vfiprintf_r+0x1ac>
 8003472:	9b03      	ldr	r3, [sp, #12]
 8003474:	1d1a      	adds	r2, r3, #4
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	9203      	str	r2, [sp, #12]
 800347a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800347e:	3402      	adds	r4, #2
 8003480:	9305      	str	r3, [sp, #20]
 8003482:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003558 <_vfiprintf_r+0x22c>
 8003486:	7821      	ldrb	r1, [r4, #0]
 8003488:	2203      	movs	r2, #3
 800348a:	4650      	mov	r0, sl
 800348c:	f7fc fea0 	bl	80001d0 <memchr>
 8003490:	b138      	cbz	r0, 80034a2 <_vfiprintf_r+0x176>
 8003492:	9b04      	ldr	r3, [sp, #16]
 8003494:	eba0 000a 	sub.w	r0, r0, sl
 8003498:	2240      	movs	r2, #64	@ 0x40
 800349a:	4082      	lsls	r2, r0
 800349c:	4313      	orrs	r3, r2
 800349e:	3401      	adds	r4, #1
 80034a0:	9304      	str	r3, [sp, #16]
 80034a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034a6:	4829      	ldr	r0, [pc, #164]	@ (800354c <_vfiprintf_r+0x220>)
 80034a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80034ac:	2206      	movs	r2, #6
 80034ae:	f7fc fe8f 	bl	80001d0 <memchr>
 80034b2:	2800      	cmp	r0, #0
 80034b4:	d03f      	beq.n	8003536 <_vfiprintf_r+0x20a>
 80034b6:	4b26      	ldr	r3, [pc, #152]	@ (8003550 <_vfiprintf_r+0x224>)
 80034b8:	bb1b      	cbnz	r3, 8003502 <_vfiprintf_r+0x1d6>
 80034ba:	9b03      	ldr	r3, [sp, #12]
 80034bc:	3307      	adds	r3, #7
 80034be:	f023 0307 	bic.w	r3, r3, #7
 80034c2:	3308      	adds	r3, #8
 80034c4:	9303      	str	r3, [sp, #12]
 80034c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80034c8:	443b      	add	r3, r7
 80034ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80034cc:	e76a      	b.n	80033a4 <_vfiprintf_r+0x78>
 80034ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80034d2:	460c      	mov	r4, r1
 80034d4:	2001      	movs	r0, #1
 80034d6:	e7a8      	b.n	800342a <_vfiprintf_r+0xfe>
 80034d8:	2300      	movs	r3, #0
 80034da:	3401      	adds	r4, #1
 80034dc:	9305      	str	r3, [sp, #20]
 80034de:	4619      	mov	r1, r3
 80034e0:	f04f 0c0a 	mov.w	ip, #10
 80034e4:	4620      	mov	r0, r4
 80034e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034ea:	3a30      	subs	r2, #48	@ 0x30
 80034ec:	2a09      	cmp	r2, #9
 80034ee:	d903      	bls.n	80034f8 <_vfiprintf_r+0x1cc>
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d0c6      	beq.n	8003482 <_vfiprintf_r+0x156>
 80034f4:	9105      	str	r1, [sp, #20]
 80034f6:	e7c4      	b.n	8003482 <_vfiprintf_r+0x156>
 80034f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80034fc:	4604      	mov	r4, r0
 80034fe:	2301      	movs	r3, #1
 8003500:	e7f0      	b.n	80034e4 <_vfiprintf_r+0x1b8>
 8003502:	ab03      	add	r3, sp, #12
 8003504:	9300      	str	r3, [sp, #0]
 8003506:	462a      	mov	r2, r5
 8003508:	4b12      	ldr	r3, [pc, #72]	@ (8003554 <_vfiprintf_r+0x228>)
 800350a:	a904      	add	r1, sp, #16
 800350c:	4630      	mov	r0, r6
 800350e:	f3af 8000 	nop.w
 8003512:	4607      	mov	r7, r0
 8003514:	1c78      	adds	r0, r7, #1
 8003516:	d1d6      	bne.n	80034c6 <_vfiprintf_r+0x19a>
 8003518:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800351a:	07d9      	lsls	r1, r3, #31
 800351c:	d405      	bmi.n	800352a <_vfiprintf_r+0x1fe>
 800351e:	89ab      	ldrh	r3, [r5, #12]
 8003520:	059a      	lsls	r2, r3, #22
 8003522:	d402      	bmi.n	800352a <_vfiprintf_r+0x1fe>
 8003524:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003526:	f7ff fed7 	bl	80032d8 <__retarget_lock_release_recursive>
 800352a:	89ab      	ldrh	r3, [r5, #12]
 800352c:	065b      	lsls	r3, r3, #25
 800352e:	f53f af1f 	bmi.w	8003370 <_vfiprintf_r+0x44>
 8003532:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003534:	e71e      	b.n	8003374 <_vfiprintf_r+0x48>
 8003536:	ab03      	add	r3, sp, #12
 8003538:	9300      	str	r3, [sp, #0]
 800353a:	462a      	mov	r2, r5
 800353c:	4b05      	ldr	r3, [pc, #20]	@ (8003554 <_vfiprintf_r+0x228>)
 800353e:	a904      	add	r1, sp, #16
 8003540:	4630      	mov	r0, r6
 8003542:	f000 f91b 	bl	800377c <_printf_i>
 8003546:	e7e4      	b.n	8003512 <_vfiprintf_r+0x1e6>
 8003548:	08003f84 	.word	0x08003f84
 800354c:	08003f8e 	.word	0x08003f8e
 8003550:	00000000 	.word	0x00000000
 8003554:	08003309 	.word	0x08003309
 8003558:	08003f8a 	.word	0x08003f8a

0800355c <sbrk_aligned>:
 800355c:	b570      	push	{r4, r5, r6, lr}
 800355e:	4e0f      	ldr	r6, [pc, #60]	@ (800359c <sbrk_aligned+0x40>)
 8003560:	460c      	mov	r4, r1
 8003562:	6831      	ldr	r1, [r6, #0]
 8003564:	4605      	mov	r5, r0
 8003566:	b911      	cbnz	r1, 800356e <sbrk_aligned+0x12>
 8003568:	f000 fc70 	bl	8003e4c <_sbrk_r>
 800356c:	6030      	str	r0, [r6, #0]
 800356e:	4621      	mov	r1, r4
 8003570:	4628      	mov	r0, r5
 8003572:	f000 fc6b 	bl	8003e4c <_sbrk_r>
 8003576:	1c43      	adds	r3, r0, #1
 8003578:	d103      	bne.n	8003582 <sbrk_aligned+0x26>
 800357a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800357e:	4620      	mov	r0, r4
 8003580:	bd70      	pop	{r4, r5, r6, pc}
 8003582:	1cc4      	adds	r4, r0, #3
 8003584:	f024 0403 	bic.w	r4, r4, #3
 8003588:	42a0      	cmp	r0, r4
 800358a:	d0f8      	beq.n	800357e <sbrk_aligned+0x22>
 800358c:	1a21      	subs	r1, r4, r0
 800358e:	4628      	mov	r0, r5
 8003590:	f000 fc5c 	bl	8003e4c <_sbrk_r>
 8003594:	3001      	adds	r0, #1
 8003596:	d1f2      	bne.n	800357e <sbrk_aligned+0x22>
 8003598:	e7ef      	b.n	800357a <sbrk_aligned+0x1e>
 800359a:	bf00      	nop
 800359c:	2000025c 	.word	0x2000025c

080035a0 <_malloc_r>:
 80035a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80035a4:	1ccd      	adds	r5, r1, #3
 80035a6:	f025 0503 	bic.w	r5, r5, #3
 80035aa:	3508      	adds	r5, #8
 80035ac:	2d0c      	cmp	r5, #12
 80035ae:	bf38      	it	cc
 80035b0:	250c      	movcc	r5, #12
 80035b2:	2d00      	cmp	r5, #0
 80035b4:	4606      	mov	r6, r0
 80035b6:	db01      	blt.n	80035bc <_malloc_r+0x1c>
 80035b8:	42a9      	cmp	r1, r5
 80035ba:	d904      	bls.n	80035c6 <_malloc_r+0x26>
 80035bc:	230c      	movs	r3, #12
 80035be:	6033      	str	r3, [r6, #0]
 80035c0:	2000      	movs	r0, #0
 80035c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800369c <_malloc_r+0xfc>
 80035ca:	f000 faa3 	bl	8003b14 <__malloc_lock>
 80035ce:	f8d8 3000 	ldr.w	r3, [r8]
 80035d2:	461c      	mov	r4, r3
 80035d4:	bb44      	cbnz	r4, 8003628 <_malloc_r+0x88>
 80035d6:	4629      	mov	r1, r5
 80035d8:	4630      	mov	r0, r6
 80035da:	f7ff ffbf 	bl	800355c <sbrk_aligned>
 80035de:	1c43      	adds	r3, r0, #1
 80035e0:	4604      	mov	r4, r0
 80035e2:	d158      	bne.n	8003696 <_malloc_r+0xf6>
 80035e4:	f8d8 4000 	ldr.w	r4, [r8]
 80035e8:	4627      	mov	r7, r4
 80035ea:	2f00      	cmp	r7, #0
 80035ec:	d143      	bne.n	8003676 <_malloc_r+0xd6>
 80035ee:	2c00      	cmp	r4, #0
 80035f0:	d04b      	beq.n	800368a <_malloc_r+0xea>
 80035f2:	6823      	ldr	r3, [r4, #0]
 80035f4:	4639      	mov	r1, r7
 80035f6:	4630      	mov	r0, r6
 80035f8:	eb04 0903 	add.w	r9, r4, r3
 80035fc:	f000 fc26 	bl	8003e4c <_sbrk_r>
 8003600:	4581      	cmp	r9, r0
 8003602:	d142      	bne.n	800368a <_malloc_r+0xea>
 8003604:	6821      	ldr	r1, [r4, #0]
 8003606:	1a6d      	subs	r5, r5, r1
 8003608:	4629      	mov	r1, r5
 800360a:	4630      	mov	r0, r6
 800360c:	f7ff ffa6 	bl	800355c <sbrk_aligned>
 8003610:	3001      	adds	r0, #1
 8003612:	d03a      	beq.n	800368a <_malloc_r+0xea>
 8003614:	6823      	ldr	r3, [r4, #0]
 8003616:	442b      	add	r3, r5
 8003618:	6023      	str	r3, [r4, #0]
 800361a:	f8d8 3000 	ldr.w	r3, [r8]
 800361e:	685a      	ldr	r2, [r3, #4]
 8003620:	bb62      	cbnz	r2, 800367c <_malloc_r+0xdc>
 8003622:	f8c8 7000 	str.w	r7, [r8]
 8003626:	e00f      	b.n	8003648 <_malloc_r+0xa8>
 8003628:	6822      	ldr	r2, [r4, #0]
 800362a:	1b52      	subs	r2, r2, r5
 800362c:	d420      	bmi.n	8003670 <_malloc_r+0xd0>
 800362e:	2a0b      	cmp	r2, #11
 8003630:	d917      	bls.n	8003662 <_malloc_r+0xc2>
 8003632:	1961      	adds	r1, r4, r5
 8003634:	42a3      	cmp	r3, r4
 8003636:	6025      	str	r5, [r4, #0]
 8003638:	bf18      	it	ne
 800363a:	6059      	strne	r1, [r3, #4]
 800363c:	6863      	ldr	r3, [r4, #4]
 800363e:	bf08      	it	eq
 8003640:	f8c8 1000 	streq.w	r1, [r8]
 8003644:	5162      	str	r2, [r4, r5]
 8003646:	604b      	str	r3, [r1, #4]
 8003648:	4630      	mov	r0, r6
 800364a:	f000 fa69 	bl	8003b20 <__malloc_unlock>
 800364e:	f104 000b 	add.w	r0, r4, #11
 8003652:	1d23      	adds	r3, r4, #4
 8003654:	f020 0007 	bic.w	r0, r0, #7
 8003658:	1ac2      	subs	r2, r0, r3
 800365a:	bf1c      	itt	ne
 800365c:	1a1b      	subne	r3, r3, r0
 800365e:	50a3      	strne	r3, [r4, r2]
 8003660:	e7af      	b.n	80035c2 <_malloc_r+0x22>
 8003662:	6862      	ldr	r2, [r4, #4]
 8003664:	42a3      	cmp	r3, r4
 8003666:	bf0c      	ite	eq
 8003668:	f8c8 2000 	streq.w	r2, [r8]
 800366c:	605a      	strne	r2, [r3, #4]
 800366e:	e7eb      	b.n	8003648 <_malloc_r+0xa8>
 8003670:	4623      	mov	r3, r4
 8003672:	6864      	ldr	r4, [r4, #4]
 8003674:	e7ae      	b.n	80035d4 <_malloc_r+0x34>
 8003676:	463c      	mov	r4, r7
 8003678:	687f      	ldr	r7, [r7, #4]
 800367a:	e7b6      	b.n	80035ea <_malloc_r+0x4a>
 800367c:	461a      	mov	r2, r3
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	42a3      	cmp	r3, r4
 8003682:	d1fb      	bne.n	800367c <_malloc_r+0xdc>
 8003684:	2300      	movs	r3, #0
 8003686:	6053      	str	r3, [r2, #4]
 8003688:	e7de      	b.n	8003648 <_malloc_r+0xa8>
 800368a:	230c      	movs	r3, #12
 800368c:	6033      	str	r3, [r6, #0]
 800368e:	4630      	mov	r0, r6
 8003690:	f000 fa46 	bl	8003b20 <__malloc_unlock>
 8003694:	e794      	b.n	80035c0 <_malloc_r+0x20>
 8003696:	6005      	str	r5, [r0, #0]
 8003698:	e7d6      	b.n	8003648 <_malloc_r+0xa8>
 800369a:	bf00      	nop
 800369c:	20000260 	.word	0x20000260

080036a0 <_printf_common>:
 80036a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036a4:	4616      	mov	r6, r2
 80036a6:	4698      	mov	r8, r3
 80036a8:	688a      	ldr	r2, [r1, #8]
 80036aa:	690b      	ldr	r3, [r1, #16]
 80036ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80036b0:	4293      	cmp	r3, r2
 80036b2:	bfb8      	it	lt
 80036b4:	4613      	movlt	r3, r2
 80036b6:	6033      	str	r3, [r6, #0]
 80036b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80036bc:	4607      	mov	r7, r0
 80036be:	460c      	mov	r4, r1
 80036c0:	b10a      	cbz	r2, 80036c6 <_printf_common+0x26>
 80036c2:	3301      	adds	r3, #1
 80036c4:	6033      	str	r3, [r6, #0]
 80036c6:	6823      	ldr	r3, [r4, #0]
 80036c8:	0699      	lsls	r1, r3, #26
 80036ca:	bf42      	ittt	mi
 80036cc:	6833      	ldrmi	r3, [r6, #0]
 80036ce:	3302      	addmi	r3, #2
 80036d0:	6033      	strmi	r3, [r6, #0]
 80036d2:	6825      	ldr	r5, [r4, #0]
 80036d4:	f015 0506 	ands.w	r5, r5, #6
 80036d8:	d106      	bne.n	80036e8 <_printf_common+0x48>
 80036da:	f104 0a19 	add.w	sl, r4, #25
 80036de:	68e3      	ldr	r3, [r4, #12]
 80036e0:	6832      	ldr	r2, [r6, #0]
 80036e2:	1a9b      	subs	r3, r3, r2
 80036e4:	42ab      	cmp	r3, r5
 80036e6:	dc26      	bgt.n	8003736 <_printf_common+0x96>
 80036e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80036ec:	6822      	ldr	r2, [r4, #0]
 80036ee:	3b00      	subs	r3, #0
 80036f0:	bf18      	it	ne
 80036f2:	2301      	movne	r3, #1
 80036f4:	0692      	lsls	r2, r2, #26
 80036f6:	d42b      	bmi.n	8003750 <_printf_common+0xb0>
 80036f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80036fc:	4641      	mov	r1, r8
 80036fe:	4638      	mov	r0, r7
 8003700:	47c8      	blx	r9
 8003702:	3001      	adds	r0, #1
 8003704:	d01e      	beq.n	8003744 <_printf_common+0xa4>
 8003706:	6823      	ldr	r3, [r4, #0]
 8003708:	6922      	ldr	r2, [r4, #16]
 800370a:	f003 0306 	and.w	r3, r3, #6
 800370e:	2b04      	cmp	r3, #4
 8003710:	bf02      	ittt	eq
 8003712:	68e5      	ldreq	r5, [r4, #12]
 8003714:	6833      	ldreq	r3, [r6, #0]
 8003716:	1aed      	subeq	r5, r5, r3
 8003718:	68a3      	ldr	r3, [r4, #8]
 800371a:	bf0c      	ite	eq
 800371c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003720:	2500      	movne	r5, #0
 8003722:	4293      	cmp	r3, r2
 8003724:	bfc4      	itt	gt
 8003726:	1a9b      	subgt	r3, r3, r2
 8003728:	18ed      	addgt	r5, r5, r3
 800372a:	2600      	movs	r6, #0
 800372c:	341a      	adds	r4, #26
 800372e:	42b5      	cmp	r5, r6
 8003730:	d11a      	bne.n	8003768 <_printf_common+0xc8>
 8003732:	2000      	movs	r0, #0
 8003734:	e008      	b.n	8003748 <_printf_common+0xa8>
 8003736:	2301      	movs	r3, #1
 8003738:	4652      	mov	r2, sl
 800373a:	4641      	mov	r1, r8
 800373c:	4638      	mov	r0, r7
 800373e:	47c8      	blx	r9
 8003740:	3001      	adds	r0, #1
 8003742:	d103      	bne.n	800374c <_printf_common+0xac>
 8003744:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003748:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800374c:	3501      	adds	r5, #1
 800374e:	e7c6      	b.n	80036de <_printf_common+0x3e>
 8003750:	18e1      	adds	r1, r4, r3
 8003752:	1c5a      	adds	r2, r3, #1
 8003754:	2030      	movs	r0, #48	@ 0x30
 8003756:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800375a:	4422      	add	r2, r4
 800375c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003760:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003764:	3302      	adds	r3, #2
 8003766:	e7c7      	b.n	80036f8 <_printf_common+0x58>
 8003768:	2301      	movs	r3, #1
 800376a:	4622      	mov	r2, r4
 800376c:	4641      	mov	r1, r8
 800376e:	4638      	mov	r0, r7
 8003770:	47c8      	blx	r9
 8003772:	3001      	adds	r0, #1
 8003774:	d0e6      	beq.n	8003744 <_printf_common+0xa4>
 8003776:	3601      	adds	r6, #1
 8003778:	e7d9      	b.n	800372e <_printf_common+0x8e>
	...

0800377c <_printf_i>:
 800377c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003780:	7e0f      	ldrb	r7, [r1, #24]
 8003782:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003784:	2f78      	cmp	r7, #120	@ 0x78
 8003786:	4691      	mov	r9, r2
 8003788:	4680      	mov	r8, r0
 800378a:	460c      	mov	r4, r1
 800378c:	469a      	mov	sl, r3
 800378e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003792:	d807      	bhi.n	80037a4 <_printf_i+0x28>
 8003794:	2f62      	cmp	r7, #98	@ 0x62
 8003796:	d80a      	bhi.n	80037ae <_printf_i+0x32>
 8003798:	2f00      	cmp	r7, #0
 800379a:	f000 80d2 	beq.w	8003942 <_printf_i+0x1c6>
 800379e:	2f58      	cmp	r7, #88	@ 0x58
 80037a0:	f000 80b9 	beq.w	8003916 <_printf_i+0x19a>
 80037a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80037a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80037ac:	e03a      	b.n	8003824 <_printf_i+0xa8>
 80037ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80037b2:	2b15      	cmp	r3, #21
 80037b4:	d8f6      	bhi.n	80037a4 <_printf_i+0x28>
 80037b6:	a101      	add	r1, pc, #4	@ (adr r1, 80037bc <_printf_i+0x40>)
 80037b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80037bc:	08003815 	.word	0x08003815
 80037c0:	08003829 	.word	0x08003829
 80037c4:	080037a5 	.word	0x080037a5
 80037c8:	080037a5 	.word	0x080037a5
 80037cc:	080037a5 	.word	0x080037a5
 80037d0:	080037a5 	.word	0x080037a5
 80037d4:	08003829 	.word	0x08003829
 80037d8:	080037a5 	.word	0x080037a5
 80037dc:	080037a5 	.word	0x080037a5
 80037e0:	080037a5 	.word	0x080037a5
 80037e4:	080037a5 	.word	0x080037a5
 80037e8:	08003929 	.word	0x08003929
 80037ec:	08003853 	.word	0x08003853
 80037f0:	080038e3 	.word	0x080038e3
 80037f4:	080037a5 	.word	0x080037a5
 80037f8:	080037a5 	.word	0x080037a5
 80037fc:	0800394b 	.word	0x0800394b
 8003800:	080037a5 	.word	0x080037a5
 8003804:	08003853 	.word	0x08003853
 8003808:	080037a5 	.word	0x080037a5
 800380c:	080037a5 	.word	0x080037a5
 8003810:	080038eb 	.word	0x080038eb
 8003814:	6833      	ldr	r3, [r6, #0]
 8003816:	1d1a      	adds	r2, r3, #4
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	6032      	str	r2, [r6, #0]
 800381c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003820:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003824:	2301      	movs	r3, #1
 8003826:	e09d      	b.n	8003964 <_printf_i+0x1e8>
 8003828:	6833      	ldr	r3, [r6, #0]
 800382a:	6820      	ldr	r0, [r4, #0]
 800382c:	1d19      	adds	r1, r3, #4
 800382e:	6031      	str	r1, [r6, #0]
 8003830:	0606      	lsls	r6, r0, #24
 8003832:	d501      	bpl.n	8003838 <_printf_i+0xbc>
 8003834:	681d      	ldr	r5, [r3, #0]
 8003836:	e003      	b.n	8003840 <_printf_i+0xc4>
 8003838:	0645      	lsls	r5, r0, #25
 800383a:	d5fb      	bpl.n	8003834 <_printf_i+0xb8>
 800383c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003840:	2d00      	cmp	r5, #0
 8003842:	da03      	bge.n	800384c <_printf_i+0xd0>
 8003844:	232d      	movs	r3, #45	@ 0x2d
 8003846:	426d      	negs	r5, r5
 8003848:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800384c:	4859      	ldr	r0, [pc, #356]	@ (80039b4 <_printf_i+0x238>)
 800384e:	230a      	movs	r3, #10
 8003850:	e011      	b.n	8003876 <_printf_i+0xfa>
 8003852:	6821      	ldr	r1, [r4, #0]
 8003854:	6833      	ldr	r3, [r6, #0]
 8003856:	0608      	lsls	r0, r1, #24
 8003858:	f853 5b04 	ldr.w	r5, [r3], #4
 800385c:	d402      	bmi.n	8003864 <_printf_i+0xe8>
 800385e:	0649      	lsls	r1, r1, #25
 8003860:	bf48      	it	mi
 8003862:	b2ad      	uxthmi	r5, r5
 8003864:	2f6f      	cmp	r7, #111	@ 0x6f
 8003866:	4853      	ldr	r0, [pc, #332]	@ (80039b4 <_printf_i+0x238>)
 8003868:	6033      	str	r3, [r6, #0]
 800386a:	bf14      	ite	ne
 800386c:	230a      	movne	r3, #10
 800386e:	2308      	moveq	r3, #8
 8003870:	2100      	movs	r1, #0
 8003872:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003876:	6866      	ldr	r6, [r4, #4]
 8003878:	60a6      	str	r6, [r4, #8]
 800387a:	2e00      	cmp	r6, #0
 800387c:	bfa2      	ittt	ge
 800387e:	6821      	ldrge	r1, [r4, #0]
 8003880:	f021 0104 	bicge.w	r1, r1, #4
 8003884:	6021      	strge	r1, [r4, #0]
 8003886:	b90d      	cbnz	r5, 800388c <_printf_i+0x110>
 8003888:	2e00      	cmp	r6, #0
 800388a:	d04b      	beq.n	8003924 <_printf_i+0x1a8>
 800388c:	4616      	mov	r6, r2
 800388e:	fbb5 f1f3 	udiv	r1, r5, r3
 8003892:	fb03 5711 	mls	r7, r3, r1, r5
 8003896:	5dc7      	ldrb	r7, [r0, r7]
 8003898:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800389c:	462f      	mov	r7, r5
 800389e:	42bb      	cmp	r3, r7
 80038a0:	460d      	mov	r5, r1
 80038a2:	d9f4      	bls.n	800388e <_printf_i+0x112>
 80038a4:	2b08      	cmp	r3, #8
 80038a6:	d10b      	bne.n	80038c0 <_printf_i+0x144>
 80038a8:	6823      	ldr	r3, [r4, #0]
 80038aa:	07df      	lsls	r7, r3, #31
 80038ac:	d508      	bpl.n	80038c0 <_printf_i+0x144>
 80038ae:	6923      	ldr	r3, [r4, #16]
 80038b0:	6861      	ldr	r1, [r4, #4]
 80038b2:	4299      	cmp	r1, r3
 80038b4:	bfde      	ittt	le
 80038b6:	2330      	movle	r3, #48	@ 0x30
 80038b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80038bc:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80038c0:	1b92      	subs	r2, r2, r6
 80038c2:	6122      	str	r2, [r4, #16]
 80038c4:	f8cd a000 	str.w	sl, [sp]
 80038c8:	464b      	mov	r3, r9
 80038ca:	aa03      	add	r2, sp, #12
 80038cc:	4621      	mov	r1, r4
 80038ce:	4640      	mov	r0, r8
 80038d0:	f7ff fee6 	bl	80036a0 <_printf_common>
 80038d4:	3001      	adds	r0, #1
 80038d6:	d14a      	bne.n	800396e <_printf_i+0x1f2>
 80038d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80038dc:	b004      	add	sp, #16
 80038de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038e2:	6823      	ldr	r3, [r4, #0]
 80038e4:	f043 0320 	orr.w	r3, r3, #32
 80038e8:	6023      	str	r3, [r4, #0]
 80038ea:	4833      	ldr	r0, [pc, #204]	@ (80039b8 <_printf_i+0x23c>)
 80038ec:	2778      	movs	r7, #120	@ 0x78
 80038ee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80038f2:	6823      	ldr	r3, [r4, #0]
 80038f4:	6831      	ldr	r1, [r6, #0]
 80038f6:	061f      	lsls	r7, r3, #24
 80038f8:	f851 5b04 	ldr.w	r5, [r1], #4
 80038fc:	d402      	bmi.n	8003904 <_printf_i+0x188>
 80038fe:	065f      	lsls	r7, r3, #25
 8003900:	bf48      	it	mi
 8003902:	b2ad      	uxthmi	r5, r5
 8003904:	6031      	str	r1, [r6, #0]
 8003906:	07d9      	lsls	r1, r3, #31
 8003908:	bf44      	itt	mi
 800390a:	f043 0320 	orrmi.w	r3, r3, #32
 800390e:	6023      	strmi	r3, [r4, #0]
 8003910:	b11d      	cbz	r5, 800391a <_printf_i+0x19e>
 8003912:	2310      	movs	r3, #16
 8003914:	e7ac      	b.n	8003870 <_printf_i+0xf4>
 8003916:	4827      	ldr	r0, [pc, #156]	@ (80039b4 <_printf_i+0x238>)
 8003918:	e7e9      	b.n	80038ee <_printf_i+0x172>
 800391a:	6823      	ldr	r3, [r4, #0]
 800391c:	f023 0320 	bic.w	r3, r3, #32
 8003920:	6023      	str	r3, [r4, #0]
 8003922:	e7f6      	b.n	8003912 <_printf_i+0x196>
 8003924:	4616      	mov	r6, r2
 8003926:	e7bd      	b.n	80038a4 <_printf_i+0x128>
 8003928:	6833      	ldr	r3, [r6, #0]
 800392a:	6825      	ldr	r5, [r4, #0]
 800392c:	6961      	ldr	r1, [r4, #20]
 800392e:	1d18      	adds	r0, r3, #4
 8003930:	6030      	str	r0, [r6, #0]
 8003932:	062e      	lsls	r6, r5, #24
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	d501      	bpl.n	800393c <_printf_i+0x1c0>
 8003938:	6019      	str	r1, [r3, #0]
 800393a:	e002      	b.n	8003942 <_printf_i+0x1c6>
 800393c:	0668      	lsls	r0, r5, #25
 800393e:	d5fb      	bpl.n	8003938 <_printf_i+0x1bc>
 8003940:	8019      	strh	r1, [r3, #0]
 8003942:	2300      	movs	r3, #0
 8003944:	6123      	str	r3, [r4, #16]
 8003946:	4616      	mov	r6, r2
 8003948:	e7bc      	b.n	80038c4 <_printf_i+0x148>
 800394a:	6833      	ldr	r3, [r6, #0]
 800394c:	1d1a      	adds	r2, r3, #4
 800394e:	6032      	str	r2, [r6, #0]
 8003950:	681e      	ldr	r6, [r3, #0]
 8003952:	6862      	ldr	r2, [r4, #4]
 8003954:	2100      	movs	r1, #0
 8003956:	4630      	mov	r0, r6
 8003958:	f7fc fc3a 	bl	80001d0 <memchr>
 800395c:	b108      	cbz	r0, 8003962 <_printf_i+0x1e6>
 800395e:	1b80      	subs	r0, r0, r6
 8003960:	6060      	str	r0, [r4, #4]
 8003962:	6863      	ldr	r3, [r4, #4]
 8003964:	6123      	str	r3, [r4, #16]
 8003966:	2300      	movs	r3, #0
 8003968:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800396c:	e7aa      	b.n	80038c4 <_printf_i+0x148>
 800396e:	6923      	ldr	r3, [r4, #16]
 8003970:	4632      	mov	r2, r6
 8003972:	4649      	mov	r1, r9
 8003974:	4640      	mov	r0, r8
 8003976:	47d0      	blx	sl
 8003978:	3001      	adds	r0, #1
 800397a:	d0ad      	beq.n	80038d8 <_printf_i+0x15c>
 800397c:	6823      	ldr	r3, [r4, #0]
 800397e:	079b      	lsls	r3, r3, #30
 8003980:	d413      	bmi.n	80039aa <_printf_i+0x22e>
 8003982:	68e0      	ldr	r0, [r4, #12]
 8003984:	9b03      	ldr	r3, [sp, #12]
 8003986:	4298      	cmp	r0, r3
 8003988:	bfb8      	it	lt
 800398a:	4618      	movlt	r0, r3
 800398c:	e7a6      	b.n	80038dc <_printf_i+0x160>
 800398e:	2301      	movs	r3, #1
 8003990:	4632      	mov	r2, r6
 8003992:	4649      	mov	r1, r9
 8003994:	4640      	mov	r0, r8
 8003996:	47d0      	blx	sl
 8003998:	3001      	adds	r0, #1
 800399a:	d09d      	beq.n	80038d8 <_printf_i+0x15c>
 800399c:	3501      	adds	r5, #1
 800399e:	68e3      	ldr	r3, [r4, #12]
 80039a0:	9903      	ldr	r1, [sp, #12]
 80039a2:	1a5b      	subs	r3, r3, r1
 80039a4:	42ab      	cmp	r3, r5
 80039a6:	dcf2      	bgt.n	800398e <_printf_i+0x212>
 80039a8:	e7eb      	b.n	8003982 <_printf_i+0x206>
 80039aa:	2500      	movs	r5, #0
 80039ac:	f104 0619 	add.w	r6, r4, #25
 80039b0:	e7f5      	b.n	800399e <_printf_i+0x222>
 80039b2:	bf00      	nop
 80039b4:	08003f95 	.word	0x08003f95
 80039b8:	08003fa6 	.word	0x08003fa6

080039bc <__sflush_r>:
 80039bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80039c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039c4:	0716      	lsls	r6, r2, #28
 80039c6:	4605      	mov	r5, r0
 80039c8:	460c      	mov	r4, r1
 80039ca:	d454      	bmi.n	8003a76 <__sflush_r+0xba>
 80039cc:	684b      	ldr	r3, [r1, #4]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	dc02      	bgt.n	80039d8 <__sflush_r+0x1c>
 80039d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	dd48      	ble.n	8003a6a <__sflush_r+0xae>
 80039d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80039da:	2e00      	cmp	r6, #0
 80039dc:	d045      	beq.n	8003a6a <__sflush_r+0xae>
 80039de:	2300      	movs	r3, #0
 80039e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80039e4:	682f      	ldr	r7, [r5, #0]
 80039e6:	6a21      	ldr	r1, [r4, #32]
 80039e8:	602b      	str	r3, [r5, #0]
 80039ea:	d030      	beq.n	8003a4e <__sflush_r+0x92>
 80039ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80039ee:	89a3      	ldrh	r3, [r4, #12]
 80039f0:	0759      	lsls	r1, r3, #29
 80039f2:	d505      	bpl.n	8003a00 <__sflush_r+0x44>
 80039f4:	6863      	ldr	r3, [r4, #4]
 80039f6:	1ad2      	subs	r2, r2, r3
 80039f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80039fa:	b10b      	cbz	r3, 8003a00 <__sflush_r+0x44>
 80039fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80039fe:	1ad2      	subs	r2, r2, r3
 8003a00:	2300      	movs	r3, #0
 8003a02:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003a04:	6a21      	ldr	r1, [r4, #32]
 8003a06:	4628      	mov	r0, r5
 8003a08:	47b0      	blx	r6
 8003a0a:	1c43      	adds	r3, r0, #1
 8003a0c:	89a3      	ldrh	r3, [r4, #12]
 8003a0e:	d106      	bne.n	8003a1e <__sflush_r+0x62>
 8003a10:	6829      	ldr	r1, [r5, #0]
 8003a12:	291d      	cmp	r1, #29
 8003a14:	d82b      	bhi.n	8003a6e <__sflush_r+0xb2>
 8003a16:	4a2a      	ldr	r2, [pc, #168]	@ (8003ac0 <__sflush_r+0x104>)
 8003a18:	410a      	asrs	r2, r1
 8003a1a:	07d6      	lsls	r6, r2, #31
 8003a1c:	d427      	bmi.n	8003a6e <__sflush_r+0xb2>
 8003a1e:	2200      	movs	r2, #0
 8003a20:	6062      	str	r2, [r4, #4]
 8003a22:	04d9      	lsls	r1, r3, #19
 8003a24:	6922      	ldr	r2, [r4, #16]
 8003a26:	6022      	str	r2, [r4, #0]
 8003a28:	d504      	bpl.n	8003a34 <__sflush_r+0x78>
 8003a2a:	1c42      	adds	r2, r0, #1
 8003a2c:	d101      	bne.n	8003a32 <__sflush_r+0x76>
 8003a2e:	682b      	ldr	r3, [r5, #0]
 8003a30:	b903      	cbnz	r3, 8003a34 <__sflush_r+0x78>
 8003a32:	6560      	str	r0, [r4, #84]	@ 0x54
 8003a34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003a36:	602f      	str	r7, [r5, #0]
 8003a38:	b1b9      	cbz	r1, 8003a6a <__sflush_r+0xae>
 8003a3a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003a3e:	4299      	cmp	r1, r3
 8003a40:	d002      	beq.n	8003a48 <__sflush_r+0x8c>
 8003a42:	4628      	mov	r0, r5
 8003a44:	f000 fa24 	bl	8003e90 <_free_r>
 8003a48:	2300      	movs	r3, #0
 8003a4a:	6363      	str	r3, [r4, #52]	@ 0x34
 8003a4c:	e00d      	b.n	8003a6a <__sflush_r+0xae>
 8003a4e:	2301      	movs	r3, #1
 8003a50:	4628      	mov	r0, r5
 8003a52:	47b0      	blx	r6
 8003a54:	4602      	mov	r2, r0
 8003a56:	1c50      	adds	r0, r2, #1
 8003a58:	d1c9      	bne.n	80039ee <__sflush_r+0x32>
 8003a5a:	682b      	ldr	r3, [r5, #0]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d0c6      	beq.n	80039ee <__sflush_r+0x32>
 8003a60:	2b1d      	cmp	r3, #29
 8003a62:	d001      	beq.n	8003a68 <__sflush_r+0xac>
 8003a64:	2b16      	cmp	r3, #22
 8003a66:	d11e      	bne.n	8003aa6 <__sflush_r+0xea>
 8003a68:	602f      	str	r7, [r5, #0]
 8003a6a:	2000      	movs	r0, #0
 8003a6c:	e022      	b.n	8003ab4 <__sflush_r+0xf8>
 8003a6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a72:	b21b      	sxth	r3, r3
 8003a74:	e01b      	b.n	8003aae <__sflush_r+0xf2>
 8003a76:	690f      	ldr	r7, [r1, #16]
 8003a78:	2f00      	cmp	r7, #0
 8003a7a:	d0f6      	beq.n	8003a6a <__sflush_r+0xae>
 8003a7c:	0793      	lsls	r3, r2, #30
 8003a7e:	680e      	ldr	r6, [r1, #0]
 8003a80:	bf08      	it	eq
 8003a82:	694b      	ldreq	r3, [r1, #20]
 8003a84:	600f      	str	r7, [r1, #0]
 8003a86:	bf18      	it	ne
 8003a88:	2300      	movne	r3, #0
 8003a8a:	eba6 0807 	sub.w	r8, r6, r7
 8003a8e:	608b      	str	r3, [r1, #8]
 8003a90:	f1b8 0f00 	cmp.w	r8, #0
 8003a94:	dde9      	ble.n	8003a6a <__sflush_r+0xae>
 8003a96:	6a21      	ldr	r1, [r4, #32]
 8003a98:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003a9a:	4643      	mov	r3, r8
 8003a9c:	463a      	mov	r2, r7
 8003a9e:	4628      	mov	r0, r5
 8003aa0:	47b0      	blx	r6
 8003aa2:	2800      	cmp	r0, #0
 8003aa4:	dc08      	bgt.n	8003ab8 <__sflush_r+0xfc>
 8003aa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003aaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003aae:	81a3      	strh	r3, [r4, #12]
 8003ab0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ab8:	4407      	add	r7, r0
 8003aba:	eba8 0800 	sub.w	r8, r8, r0
 8003abe:	e7e7      	b.n	8003a90 <__sflush_r+0xd4>
 8003ac0:	dfbffffe 	.word	0xdfbffffe

08003ac4 <_fflush_r>:
 8003ac4:	b538      	push	{r3, r4, r5, lr}
 8003ac6:	690b      	ldr	r3, [r1, #16]
 8003ac8:	4605      	mov	r5, r0
 8003aca:	460c      	mov	r4, r1
 8003acc:	b913      	cbnz	r3, 8003ad4 <_fflush_r+0x10>
 8003ace:	2500      	movs	r5, #0
 8003ad0:	4628      	mov	r0, r5
 8003ad2:	bd38      	pop	{r3, r4, r5, pc}
 8003ad4:	b118      	cbz	r0, 8003ade <_fflush_r+0x1a>
 8003ad6:	6a03      	ldr	r3, [r0, #32]
 8003ad8:	b90b      	cbnz	r3, 8003ade <_fflush_r+0x1a>
 8003ada:	f7ff fb23 	bl	8003124 <__sinit>
 8003ade:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d0f3      	beq.n	8003ace <_fflush_r+0xa>
 8003ae6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003ae8:	07d0      	lsls	r0, r2, #31
 8003aea:	d404      	bmi.n	8003af6 <_fflush_r+0x32>
 8003aec:	0599      	lsls	r1, r3, #22
 8003aee:	d402      	bmi.n	8003af6 <_fflush_r+0x32>
 8003af0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003af2:	f7ff fbf0 	bl	80032d6 <__retarget_lock_acquire_recursive>
 8003af6:	4628      	mov	r0, r5
 8003af8:	4621      	mov	r1, r4
 8003afa:	f7ff ff5f 	bl	80039bc <__sflush_r>
 8003afe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003b00:	07da      	lsls	r2, r3, #31
 8003b02:	4605      	mov	r5, r0
 8003b04:	d4e4      	bmi.n	8003ad0 <_fflush_r+0xc>
 8003b06:	89a3      	ldrh	r3, [r4, #12]
 8003b08:	059b      	lsls	r3, r3, #22
 8003b0a:	d4e1      	bmi.n	8003ad0 <_fflush_r+0xc>
 8003b0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003b0e:	f7ff fbe3 	bl	80032d8 <__retarget_lock_release_recursive>
 8003b12:	e7dd      	b.n	8003ad0 <_fflush_r+0xc>

08003b14 <__malloc_lock>:
 8003b14:	4801      	ldr	r0, [pc, #4]	@ (8003b1c <__malloc_lock+0x8>)
 8003b16:	f7ff bbde 	b.w	80032d6 <__retarget_lock_acquire_recursive>
 8003b1a:	bf00      	nop
 8003b1c:	20000258 	.word	0x20000258

08003b20 <__malloc_unlock>:
 8003b20:	4801      	ldr	r0, [pc, #4]	@ (8003b28 <__malloc_unlock+0x8>)
 8003b22:	f7ff bbd9 	b.w	80032d8 <__retarget_lock_release_recursive>
 8003b26:	bf00      	nop
 8003b28:	20000258 	.word	0x20000258

08003b2c <__sread>:
 8003b2c:	b510      	push	{r4, lr}
 8003b2e:	460c      	mov	r4, r1
 8003b30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b34:	f000 f978 	bl	8003e28 <_read_r>
 8003b38:	2800      	cmp	r0, #0
 8003b3a:	bfab      	itete	ge
 8003b3c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003b3e:	89a3      	ldrhlt	r3, [r4, #12]
 8003b40:	181b      	addge	r3, r3, r0
 8003b42:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003b46:	bfac      	ite	ge
 8003b48:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003b4a:	81a3      	strhlt	r3, [r4, #12]
 8003b4c:	bd10      	pop	{r4, pc}

08003b4e <__swrite>:
 8003b4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b52:	461f      	mov	r7, r3
 8003b54:	898b      	ldrh	r3, [r1, #12]
 8003b56:	05db      	lsls	r3, r3, #23
 8003b58:	4605      	mov	r5, r0
 8003b5a:	460c      	mov	r4, r1
 8003b5c:	4616      	mov	r6, r2
 8003b5e:	d505      	bpl.n	8003b6c <__swrite+0x1e>
 8003b60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b64:	2302      	movs	r3, #2
 8003b66:	2200      	movs	r2, #0
 8003b68:	f000 f94c 	bl	8003e04 <_lseek_r>
 8003b6c:	89a3      	ldrh	r3, [r4, #12]
 8003b6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b72:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003b76:	81a3      	strh	r3, [r4, #12]
 8003b78:	4632      	mov	r2, r6
 8003b7a:	463b      	mov	r3, r7
 8003b7c:	4628      	mov	r0, r5
 8003b7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b82:	f000 b973 	b.w	8003e6c <_write_r>

08003b86 <__sseek>:
 8003b86:	b510      	push	{r4, lr}
 8003b88:	460c      	mov	r4, r1
 8003b8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b8e:	f000 f939 	bl	8003e04 <_lseek_r>
 8003b92:	1c43      	adds	r3, r0, #1
 8003b94:	89a3      	ldrh	r3, [r4, #12]
 8003b96:	bf15      	itete	ne
 8003b98:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003b9a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003b9e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003ba2:	81a3      	strheq	r3, [r4, #12]
 8003ba4:	bf18      	it	ne
 8003ba6:	81a3      	strhne	r3, [r4, #12]
 8003ba8:	bd10      	pop	{r4, pc}

08003baa <__sclose>:
 8003baa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bae:	f000 b8f7 	b.w	8003da0 <_close_r>

08003bb2 <__swbuf_r>:
 8003bb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bb4:	460e      	mov	r6, r1
 8003bb6:	4614      	mov	r4, r2
 8003bb8:	4605      	mov	r5, r0
 8003bba:	b118      	cbz	r0, 8003bc4 <__swbuf_r+0x12>
 8003bbc:	6a03      	ldr	r3, [r0, #32]
 8003bbe:	b90b      	cbnz	r3, 8003bc4 <__swbuf_r+0x12>
 8003bc0:	f7ff fab0 	bl	8003124 <__sinit>
 8003bc4:	69a3      	ldr	r3, [r4, #24]
 8003bc6:	60a3      	str	r3, [r4, #8]
 8003bc8:	89a3      	ldrh	r3, [r4, #12]
 8003bca:	071a      	lsls	r2, r3, #28
 8003bcc:	d501      	bpl.n	8003bd2 <__swbuf_r+0x20>
 8003bce:	6923      	ldr	r3, [r4, #16]
 8003bd0:	b943      	cbnz	r3, 8003be4 <__swbuf_r+0x32>
 8003bd2:	4621      	mov	r1, r4
 8003bd4:	4628      	mov	r0, r5
 8003bd6:	f000 f82b 	bl	8003c30 <__swsetup_r>
 8003bda:	b118      	cbz	r0, 8003be4 <__swbuf_r+0x32>
 8003bdc:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8003be0:	4638      	mov	r0, r7
 8003be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003be4:	6823      	ldr	r3, [r4, #0]
 8003be6:	6922      	ldr	r2, [r4, #16]
 8003be8:	1a98      	subs	r0, r3, r2
 8003bea:	6963      	ldr	r3, [r4, #20]
 8003bec:	b2f6      	uxtb	r6, r6
 8003bee:	4283      	cmp	r3, r0
 8003bf0:	4637      	mov	r7, r6
 8003bf2:	dc05      	bgt.n	8003c00 <__swbuf_r+0x4e>
 8003bf4:	4621      	mov	r1, r4
 8003bf6:	4628      	mov	r0, r5
 8003bf8:	f7ff ff64 	bl	8003ac4 <_fflush_r>
 8003bfc:	2800      	cmp	r0, #0
 8003bfe:	d1ed      	bne.n	8003bdc <__swbuf_r+0x2a>
 8003c00:	68a3      	ldr	r3, [r4, #8]
 8003c02:	3b01      	subs	r3, #1
 8003c04:	60a3      	str	r3, [r4, #8]
 8003c06:	6823      	ldr	r3, [r4, #0]
 8003c08:	1c5a      	adds	r2, r3, #1
 8003c0a:	6022      	str	r2, [r4, #0]
 8003c0c:	701e      	strb	r6, [r3, #0]
 8003c0e:	6962      	ldr	r2, [r4, #20]
 8003c10:	1c43      	adds	r3, r0, #1
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d004      	beq.n	8003c20 <__swbuf_r+0x6e>
 8003c16:	89a3      	ldrh	r3, [r4, #12]
 8003c18:	07db      	lsls	r3, r3, #31
 8003c1a:	d5e1      	bpl.n	8003be0 <__swbuf_r+0x2e>
 8003c1c:	2e0a      	cmp	r6, #10
 8003c1e:	d1df      	bne.n	8003be0 <__swbuf_r+0x2e>
 8003c20:	4621      	mov	r1, r4
 8003c22:	4628      	mov	r0, r5
 8003c24:	f7ff ff4e 	bl	8003ac4 <_fflush_r>
 8003c28:	2800      	cmp	r0, #0
 8003c2a:	d0d9      	beq.n	8003be0 <__swbuf_r+0x2e>
 8003c2c:	e7d6      	b.n	8003bdc <__swbuf_r+0x2a>
	...

08003c30 <__swsetup_r>:
 8003c30:	b538      	push	{r3, r4, r5, lr}
 8003c32:	4b29      	ldr	r3, [pc, #164]	@ (8003cd8 <__swsetup_r+0xa8>)
 8003c34:	4605      	mov	r5, r0
 8003c36:	6818      	ldr	r0, [r3, #0]
 8003c38:	460c      	mov	r4, r1
 8003c3a:	b118      	cbz	r0, 8003c44 <__swsetup_r+0x14>
 8003c3c:	6a03      	ldr	r3, [r0, #32]
 8003c3e:	b90b      	cbnz	r3, 8003c44 <__swsetup_r+0x14>
 8003c40:	f7ff fa70 	bl	8003124 <__sinit>
 8003c44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c48:	0719      	lsls	r1, r3, #28
 8003c4a:	d422      	bmi.n	8003c92 <__swsetup_r+0x62>
 8003c4c:	06da      	lsls	r2, r3, #27
 8003c4e:	d407      	bmi.n	8003c60 <__swsetup_r+0x30>
 8003c50:	2209      	movs	r2, #9
 8003c52:	602a      	str	r2, [r5, #0]
 8003c54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c58:	81a3      	strh	r3, [r4, #12]
 8003c5a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003c5e:	e033      	b.n	8003cc8 <__swsetup_r+0x98>
 8003c60:	0758      	lsls	r0, r3, #29
 8003c62:	d512      	bpl.n	8003c8a <__swsetup_r+0x5a>
 8003c64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003c66:	b141      	cbz	r1, 8003c7a <__swsetup_r+0x4a>
 8003c68:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003c6c:	4299      	cmp	r1, r3
 8003c6e:	d002      	beq.n	8003c76 <__swsetup_r+0x46>
 8003c70:	4628      	mov	r0, r5
 8003c72:	f000 f90d 	bl	8003e90 <_free_r>
 8003c76:	2300      	movs	r3, #0
 8003c78:	6363      	str	r3, [r4, #52]	@ 0x34
 8003c7a:	89a3      	ldrh	r3, [r4, #12]
 8003c7c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003c80:	81a3      	strh	r3, [r4, #12]
 8003c82:	2300      	movs	r3, #0
 8003c84:	6063      	str	r3, [r4, #4]
 8003c86:	6923      	ldr	r3, [r4, #16]
 8003c88:	6023      	str	r3, [r4, #0]
 8003c8a:	89a3      	ldrh	r3, [r4, #12]
 8003c8c:	f043 0308 	orr.w	r3, r3, #8
 8003c90:	81a3      	strh	r3, [r4, #12]
 8003c92:	6923      	ldr	r3, [r4, #16]
 8003c94:	b94b      	cbnz	r3, 8003caa <__swsetup_r+0x7a>
 8003c96:	89a3      	ldrh	r3, [r4, #12]
 8003c98:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003c9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ca0:	d003      	beq.n	8003caa <__swsetup_r+0x7a>
 8003ca2:	4621      	mov	r1, r4
 8003ca4:	4628      	mov	r0, r5
 8003ca6:	f000 f83f 	bl	8003d28 <__smakebuf_r>
 8003caa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cae:	f013 0201 	ands.w	r2, r3, #1
 8003cb2:	d00a      	beq.n	8003cca <__swsetup_r+0x9a>
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	60a2      	str	r2, [r4, #8]
 8003cb8:	6962      	ldr	r2, [r4, #20]
 8003cba:	4252      	negs	r2, r2
 8003cbc:	61a2      	str	r2, [r4, #24]
 8003cbe:	6922      	ldr	r2, [r4, #16]
 8003cc0:	b942      	cbnz	r2, 8003cd4 <__swsetup_r+0xa4>
 8003cc2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003cc6:	d1c5      	bne.n	8003c54 <__swsetup_r+0x24>
 8003cc8:	bd38      	pop	{r3, r4, r5, pc}
 8003cca:	0799      	lsls	r1, r3, #30
 8003ccc:	bf58      	it	pl
 8003cce:	6962      	ldrpl	r2, [r4, #20]
 8003cd0:	60a2      	str	r2, [r4, #8]
 8003cd2:	e7f4      	b.n	8003cbe <__swsetup_r+0x8e>
 8003cd4:	2000      	movs	r0, #0
 8003cd6:	e7f7      	b.n	8003cc8 <__swsetup_r+0x98>
 8003cd8:	20000018 	.word	0x20000018

08003cdc <__swhatbuf_r>:
 8003cdc:	b570      	push	{r4, r5, r6, lr}
 8003cde:	460c      	mov	r4, r1
 8003ce0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ce4:	2900      	cmp	r1, #0
 8003ce6:	b096      	sub	sp, #88	@ 0x58
 8003ce8:	4615      	mov	r5, r2
 8003cea:	461e      	mov	r6, r3
 8003cec:	da0d      	bge.n	8003d0a <__swhatbuf_r+0x2e>
 8003cee:	89a3      	ldrh	r3, [r4, #12]
 8003cf0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003cf4:	f04f 0100 	mov.w	r1, #0
 8003cf8:	bf14      	ite	ne
 8003cfa:	2340      	movne	r3, #64	@ 0x40
 8003cfc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003d00:	2000      	movs	r0, #0
 8003d02:	6031      	str	r1, [r6, #0]
 8003d04:	602b      	str	r3, [r5, #0]
 8003d06:	b016      	add	sp, #88	@ 0x58
 8003d08:	bd70      	pop	{r4, r5, r6, pc}
 8003d0a:	466a      	mov	r2, sp
 8003d0c:	f000 f858 	bl	8003dc0 <_fstat_r>
 8003d10:	2800      	cmp	r0, #0
 8003d12:	dbec      	blt.n	8003cee <__swhatbuf_r+0x12>
 8003d14:	9901      	ldr	r1, [sp, #4]
 8003d16:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003d1a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003d1e:	4259      	negs	r1, r3
 8003d20:	4159      	adcs	r1, r3
 8003d22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003d26:	e7eb      	b.n	8003d00 <__swhatbuf_r+0x24>

08003d28 <__smakebuf_r>:
 8003d28:	898b      	ldrh	r3, [r1, #12]
 8003d2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d2c:	079d      	lsls	r5, r3, #30
 8003d2e:	4606      	mov	r6, r0
 8003d30:	460c      	mov	r4, r1
 8003d32:	d507      	bpl.n	8003d44 <__smakebuf_r+0x1c>
 8003d34:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003d38:	6023      	str	r3, [r4, #0]
 8003d3a:	6123      	str	r3, [r4, #16]
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	6163      	str	r3, [r4, #20]
 8003d40:	b003      	add	sp, #12
 8003d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d44:	ab01      	add	r3, sp, #4
 8003d46:	466a      	mov	r2, sp
 8003d48:	f7ff ffc8 	bl	8003cdc <__swhatbuf_r>
 8003d4c:	9f00      	ldr	r7, [sp, #0]
 8003d4e:	4605      	mov	r5, r0
 8003d50:	4639      	mov	r1, r7
 8003d52:	4630      	mov	r0, r6
 8003d54:	f7ff fc24 	bl	80035a0 <_malloc_r>
 8003d58:	b948      	cbnz	r0, 8003d6e <__smakebuf_r+0x46>
 8003d5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d5e:	059a      	lsls	r2, r3, #22
 8003d60:	d4ee      	bmi.n	8003d40 <__smakebuf_r+0x18>
 8003d62:	f023 0303 	bic.w	r3, r3, #3
 8003d66:	f043 0302 	orr.w	r3, r3, #2
 8003d6a:	81a3      	strh	r3, [r4, #12]
 8003d6c:	e7e2      	b.n	8003d34 <__smakebuf_r+0xc>
 8003d6e:	89a3      	ldrh	r3, [r4, #12]
 8003d70:	6020      	str	r0, [r4, #0]
 8003d72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d76:	81a3      	strh	r3, [r4, #12]
 8003d78:	9b01      	ldr	r3, [sp, #4]
 8003d7a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003d7e:	b15b      	cbz	r3, 8003d98 <__smakebuf_r+0x70>
 8003d80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d84:	4630      	mov	r0, r6
 8003d86:	f000 f82d 	bl	8003de4 <_isatty_r>
 8003d8a:	b128      	cbz	r0, 8003d98 <__smakebuf_r+0x70>
 8003d8c:	89a3      	ldrh	r3, [r4, #12]
 8003d8e:	f023 0303 	bic.w	r3, r3, #3
 8003d92:	f043 0301 	orr.w	r3, r3, #1
 8003d96:	81a3      	strh	r3, [r4, #12]
 8003d98:	89a3      	ldrh	r3, [r4, #12]
 8003d9a:	431d      	orrs	r5, r3
 8003d9c:	81a5      	strh	r5, [r4, #12]
 8003d9e:	e7cf      	b.n	8003d40 <__smakebuf_r+0x18>

08003da0 <_close_r>:
 8003da0:	b538      	push	{r3, r4, r5, lr}
 8003da2:	4d06      	ldr	r5, [pc, #24]	@ (8003dbc <_close_r+0x1c>)
 8003da4:	2300      	movs	r3, #0
 8003da6:	4604      	mov	r4, r0
 8003da8:	4608      	mov	r0, r1
 8003daa:	602b      	str	r3, [r5, #0]
 8003dac:	f7fc ffa6 	bl	8000cfc <_close>
 8003db0:	1c43      	adds	r3, r0, #1
 8003db2:	d102      	bne.n	8003dba <_close_r+0x1a>
 8003db4:	682b      	ldr	r3, [r5, #0]
 8003db6:	b103      	cbz	r3, 8003dba <_close_r+0x1a>
 8003db8:	6023      	str	r3, [r4, #0]
 8003dba:	bd38      	pop	{r3, r4, r5, pc}
 8003dbc:	20000264 	.word	0x20000264

08003dc0 <_fstat_r>:
 8003dc0:	b538      	push	{r3, r4, r5, lr}
 8003dc2:	4d07      	ldr	r5, [pc, #28]	@ (8003de0 <_fstat_r+0x20>)
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	4604      	mov	r4, r0
 8003dc8:	4608      	mov	r0, r1
 8003dca:	4611      	mov	r1, r2
 8003dcc:	602b      	str	r3, [r5, #0]
 8003dce:	f7fc ffa1 	bl	8000d14 <_fstat>
 8003dd2:	1c43      	adds	r3, r0, #1
 8003dd4:	d102      	bne.n	8003ddc <_fstat_r+0x1c>
 8003dd6:	682b      	ldr	r3, [r5, #0]
 8003dd8:	b103      	cbz	r3, 8003ddc <_fstat_r+0x1c>
 8003dda:	6023      	str	r3, [r4, #0]
 8003ddc:	bd38      	pop	{r3, r4, r5, pc}
 8003dde:	bf00      	nop
 8003de0:	20000264 	.word	0x20000264

08003de4 <_isatty_r>:
 8003de4:	b538      	push	{r3, r4, r5, lr}
 8003de6:	4d06      	ldr	r5, [pc, #24]	@ (8003e00 <_isatty_r+0x1c>)
 8003de8:	2300      	movs	r3, #0
 8003dea:	4604      	mov	r4, r0
 8003dec:	4608      	mov	r0, r1
 8003dee:	602b      	str	r3, [r5, #0]
 8003df0:	f7fc ffa0 	bl	8000d34 <_isatty>
 8003df4:	1c43      	adds	r3, r0, #1
 8003df6:	d102      	bne.n	8003dfe <_isatty_r+0x1a>
 8003df8:	682b      	ldr	r3, [r5, #0]
 8003dfa:	b103      	cbz	r3, 8003dfe <_isatty_r+0x1a>
 8003dfc:	6023      	str	r3, [r4, #0]
 8003dfe:	bd38      	pop	{r3, r4, r5, pc}
 8003e00:	20000264 	.word	0x20000264

08003e04 <_lseek_r>:
 8003e04:	b538      	push	{r3, r4, r5, lr}
 8003e06:	4d07      	ldr	r5, [pc, #28]	@ (8003e24 <_lseek_r+0x20>)
 8003e08:	4604      	mov	r4, r0
 8003e0a:	4608      	mov	r0, r1
 8003e0c:	4611      	mov	r1, r2
 8003e0e:	2200      	movs	r2, #0
 8003e10:	602a      	str	r2, [r5, #0]
 8003e12:	461a      	mov	r2, r3
 8003e14:	f7fc ff99 	bl	8000d4a <_lseek>
 8003e18:	1c43      	adds	r3, r0, #1
 8003e1a:	d102      	bne.n	8003e22 <_lseek_r+0x1e>
 8003e1c:	682b      	ldr	r3, [r5, #0]
 8003e1e:	b103      	cbz	r3, 8003e22 <_lseek_r+0x1e>
 8003e20:	6023      	str	r3, [r4, #0]
 8003e22:	bd38      	pop	{r3, r4, r5, pc}
 8003e24:	20000264 	.word	0x20000264

08003e28 <_read_r>:
 8003e28:	b538      	push	{r3, r4, r5, lr}
 8003e2a:	4d07      	ldr	r5, [pc, #28]	@ (8003e48 <_read_r+0x20>)
 8003e2c:	4604      	mov	r4, r0
 8003e2e:	4608      	mov	r0, r1
 8003e30:	4611      	mov	r1, r2
 8003e32:	2200      	movs	r2, #0
 8003e34:	602a      	str	r2, [r5, #0]
 8003e36:	461a      	mov	r2, r3
 8003e38:	f7fc ff27 	bl	8000c8a <_read>
 8003e3c:	1c43      	adds	r3, r0, #1
 8003e3e:	d102      	bne.n	8003e46 <_read_r+0x1e>
 8003e40:	682b      	ldr	r3, [r5, #0]
 8003e42:	b103      	cbz	r3, 8003e46 <_read_r+0x1e>
 8003e44:	6023      	str	r3, [r4, #0]
 8003e46:	bd38      	pop	{r3, r4, r5, pc}
 8003e48:	20000264 	.word	0x20000264

08003e4c <_sbrk_r>:
 8003e4c:	b538      	push	{r3, r4, r5, lr}
 8003e4e:	4d06      	ldr	r5, [pc, #24]	@ (8003e68 <_sbrk_r+0x1c>)
 8003e50:	2300      	movs	r3, #0
 8003e52:	4604      	mov	r4, r0
 8003e54:	4608      	mov	r0, r1
 8003e56:	602b      	str	r3, [r5, #0]
 8003e58:	f7fc ff84 	bl	8000d64 <_sbrk>
 8003e5c:	1c43      	adds	r3, r0, #1
 8003e5e:	d102      	bne.n	8003e66 <_sbrk_r+0x1a>
 8003e60:	682b      	ldr	r3, [r5, #0]
 8003e62:	b103      	cbz	r3, 8003e66 <_sbrk_r+0x1a>
 8003e64:	6023      	str	r3, [r4, #0]
 8003e66:	bd38      	pop	{r3, r4, r5, pc}
 8003e68:	20000264 	.word	0x20000264

08003e6c <_write_r>:
 8003e6c:	b538      	push	{r3, r4, r5, lr}
 8003e6e:	4d07      	ldr	r5, [pc, #28]	@ (8003e8c <_write_r+0x20>)
 8003e70:	4604      	mov	r4, r0
 8003e72:	4608      	mov	r0, r1
 8003e74:	4611      	mov	r1, r2
 8003e76:	2200      	movs	r2, #0
 8003e78:	602a      	str	r2, [r5, #0]
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	f7fc ff22 	bl	8000cc4 <_write>
 8003e80:	1c43      	adds	r3, r0, #1
 8003e82:	d102      	bne.n	8003e8a <_write_r+0x1e>
 8003e84:	682b      	ldr	r3, [r5, #0]
 8003e86:	b103      	cbz	r3, 8003e8a <_write_r+0x1e>
 8003e88:	6023      	str	r3, [r4, #0]
 8003e8a:	bd38      	pop	{r3, r4, r5, pc}
 8003e8c:	20000264 	.word	0x20000264

08003e90 <_free_r>:
 8003e90:	b538      	push	{r3, r4, r5, lr}
 8003e92:	4605      	mov	r5, r0
 8003e94:	2900      	cmp	r1, #0
 8003e96:	d041      	beq.n	8003f1c <_free_r+0x8c>
 8003e98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e9c:	1f0c      	subs	r4, r1, #4
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	bfb8      	it	lt
 8003ea2:	18e4      	addlt	r4, r4, r3
 8003ea4:	f7ff fe36 	bl	8003b14 <__malloc_lock>
 8003ea8:	4a1d      	ldr	r2, [pc, #116]	@ (8003f20 <_free_r+0x90>)
 8003eaa:	6813      	ldr	r3, [r2, #0]
 8003eac:	b933      	cbnz	r3, 8003ebc <_free_r+0x2c>
 8003eae:	6063      	str	r3, [r4, #4]
 8003eb0:	6014      	str	r4, [r2, #0]
 8003eb2:	4628      	mov	r0, r5
 8003eb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003eb8:	f7ff be32 	b.w	8003b20 <__malloc_unlock>
 8003ebc:	42a3      	cmp	r3, r4
 8003ebe:	d908      	bls.n	8003ed2 <_free_r+0x42>
 8003ec0:	6820      	ldr	r0, [r4, #0]
 8003ec2:	1821      	adds	r1, r4, r0
 8003ec4:	428b      	cmp	r3, r1
 8003ec6:	bf01      	itttt	eq
 8003ec8:	6819      	ldreq	r1, [r3, #0]
 8003eca:	685b      	ldreq	r3, [r3, #4]
 8003ecc:	1809      	addeq	r1, r1, r0
 8003ece:	6021      	streq	r1, [r4, #0]
 8003ed0:	e7ed      	b.n	8003eae <_free_r+0x1e>
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	b10b      	cbz	r3, 8003edc <_free_r+0x4c>
 8003ed8:	42a3      	cmp	r3, r4
 8003eda:	d9fa      	bls.n	8003ed2 <_free_r+0x42>
 8003edc:	6811      	ldr	r1, [r2, #0]
 8003ede:	1850      	adds	r0, r2, r1
 8003ee0:	42a0      	cmp	r0, r4
 8003ee2:	d10b      	bne.n	8003efc <_free_r+0x6c>
 8003ee4:	6820      	ldr	r0, [r4, #0]
 8003ee6:	4401      	add	r1, r0
 8003ee8:	1850      	adds	r0, r2, r1
 8003eea:	4283      	cmp	r3, r0
 8003eec:	6011      	str	r1, [r2, #0]
 8003eee:	d1e0      	bne.n	8003eb2 <_free_r+0x22>
 8003ef0:	6818      	ldr	r0, [r3, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	6053      	str	r3, [r2, #4]
 8003ef6:	4408      	add	r0, r1
 8003ef8:	6010      	str	r0, [r2, #0]
 8003efa:	e7da      	b.n	8003eb2 <_free_r+0x22>
 8003efc:	d902      	bls.n	8003f04 <_free_r+0x74>
 8003efe:	230c      	movs	r3, #12
 8003f00:	602b      	str	r3, [r5, #0]
 8003f02:	e7d6      	b.n	8003eb2 <_free_r+0x22>
 8003f04:	6820      	ldr	r0, [r4, #0]
 8003f06:	1821      	adds	r1, r4, r0
 8003f08:	428b      	cmp	r3, r1
 8003f0a:	bf04      	itt	eq
 8003f0c:	6819      	ldreq	r1, [r3, #0]
 8003f0e:	685b      	ldreq	r3, [r3, #4]
 8003f10:	6063      	str	r3, [r4, #4]
 8003f12:	bf04      	itt	eq
 8003f14:	1809      	addeq	r1, r1, r0
 8003f16:	6021      	streq	r1, [r4, #0]
 8003f18:	6054      	str	r4, [r2, #4]
 8003f1a:	e7ca      	b.n	8003eb2 <_free_r+0x22>
 8003f1c:	bd38      	pop	{r3, r4, r5, pc}
 8003f1e:	bf00      	nop
 8003f20:	20000260 	.word	0x20000260

08003f24 <_init>:
 8003f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f26:	bf00      	nop
 8003f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f2a:	bc08      	pop	{r3}
 8003f2c:	469e      	mov	lr, r3
 8003f2e:	4770      	bx	lr

08003f30 <_fini>:
 8003f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f32:	bf00      	nop
 8003f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f36:	bc08      	pop	{r3}
 8003f38:	469e      	mov	lr, r3
 8003f3a:	4770      	bx	lr
