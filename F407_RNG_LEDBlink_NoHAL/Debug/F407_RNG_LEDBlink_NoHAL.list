
F407_RNG_LEDBlink_NoHAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001f4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800037c  08000384  00001384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800037c  0800037c  00001384  2**0
                  CONTENTS
  4 .ARM          00000000  0800037c  0800037c  00001384  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800037c  08000384  00001384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800037c  0800037c  0000137c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000380  08000380  00001380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001384  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001384  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000397  00000000  00000000  000013b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000134  00000000  00000000  0000174b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000050  00000000  00000000  00001880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000033  00000000  00000000  000018d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000181c3  00000000  00000000  00001903  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000051b  00000000  00000000  00019ac6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00088437  00000000  00000000  00019fe1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a2418  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000084  00000000  00000000  000a245c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  000a24e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000364 	.word	0x08000364

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000364 	.word	0x08000364

080001c8 <main>:
#define	RNG_EN			(1 << 2)		// Enable the RNG

void make_delay(uint32_t delay_count);

int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0

	uint32_t random_number[] = {0, 0};				// Generated random number
 80001ce:	2300      	movs	r3, #0
 80001d0:	607b      	str	r3, [r7, #4]
 80001d2:	2300      	movs	r3, #0
 80001d4:	60bb      	str	r3, [r7, #8]

	// Set up the LED pin
	RCC->AHB1ENR |= GPIOD_EN;				// Enable port D clock on the AHB1 bus
 80001d6:	4b2e      	ldr	r3, [pc, #184]	@ (8000290 <main+0xc8>)
 80001d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001da:	4a2d      	ldr	r2, [pc, #180]	@ (8000290 <main+0xc8>)
 80001dc:	f043 0308 	orr.w	r3, r3, #8
 80001e0:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOD->MODER |= GPIOD_MODE;				// Make Pin 13 of port D an output
 80001e2:	4b2c      	ldr	r3, [pc, #176]	@ (8000294 <main+0xcc>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4a2b      	ldr	r2, [pc, #172]	@ (8000294 <main+0xcc>)
 80001e8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80001ec:	6013      	str	r3, [r2, #0]
	GPIOD->ODR &= ~(1 << 13);				// Set Pin 13 low to keep LED off
 80001ee:	4b29      	ldr	r3, [pc, #164]	@ (8000294 <main+0xcc>)
 80001f0:	695b      	ldr	r3, [r3, #20]
 80001f2:	4a28      	ldr	r2, [pc, #160]	@ (8000294 <main+0xcc>)
 80001f4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80001f8:	6153      	str	r3, [r2, #20]

	// Set up the RNG
	RCC->AHB2ENR |= RNGCLK_EN;				// Enable RNG clock
 80001fa:	4b25      	ldr	r3, [pc, #148]	@ (8000290 <main+0xc8>)
 80001fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80001fe:	4a24      	ldr	r2, [pc, #144]	@ (8000290 <main+0xc8>)
 8000200:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000204:	6353      	str	r3, [r2, #52]	@ 0x34
	RCC->CR |= PLL_EN; 						// Turn on the PLL
 8000206:	4b22      	ldr	r3, [pc, #136]	@ (8000290 <main+0xc8>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	4a21      	ldr	r2, [pc, #132]	@ (8000290 <main+0xc8>)
 800020c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000210:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == 0); 	// Wait until PLL is active
 8000212:	bf00      	nop
 8000214:	4b1e      	ldr	r3, [pc, #120]	@ (8000290 <main+0xc8>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800021c:	2b00      	cmp	r3, #0
 800021e:	d0f9      	beq.n	8000214 <main+0x4c>
	RNG->CR |= RNG_EN;						// Enable the random number generator
 8000220:	4b1d      	ldr	r3, [pc, #116]	@ (8000298 <main+0xd0>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a1c      	ldr	r2, [pc, #112]	@ (8000298 <main+0xd0>)
 8000226:	f043 0304 	orr.w	r3, r3, #4
 800022a:	6013      	str	r3, [r2, #0]
	RNG->DR;								// Ignore the first number generated
 800022c:	4b1a      	ldr	r3, [pc, #104]	@ (8000298 <main+0xd0>)
 800022e:	689b      	ldr	r3, [r3, #8]

	while(1)								// When new data is available, grab it.
	{
		for(uint8_t i = 0; i < 2; i++)		// Generate two numbers
 8000230:	2300      	movs	r3, #0
 8000232:	73fb      	strb	r3, [r7, #15]
 8000234:	e011      	b.n	800025a <main+0x92>
		{
			while((RNG->SR & RNG_SR_DRDY) == 0);
 8000236:	bf00      	nop
 8000238:	4b17      	ldr	r3, [pc, #92]	@ (8000298 <main+0xd0>)
 800023a:	685b      	ldr	r3, [r3, #4]
 800023c:	f003 0301 	and.w	r3, r3, #1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d0f9      	beq.n	8000238 <main+0x70>
			random_number[i] = RNG->DR;
 8000244:	4a14      	ldr	r2, [pc, #80]	@ (8000298 <main+0xd0>)
 8000246:	7bfb      	ldrb	r3, [r7, #15]
 8000248:	6892      	ldr	r2, [r2, #8]
 800024a:	009b      	lsls	r3, r3, #2
 800024c:	3310      	adds	r3, #16
 800024e:	443b      	add	r3, r7
 8000250:	f843 2c0c 	str.w	r2, [r3, #-12]
		for(uint8_t i = 0; i < 2; i++)		// Generate two numbers
 8000254:	7bfb      	ldrb	r3, [r7, #15]
 8000256:	3301      	adds	r3, #1
 8000258:	73fb      	strb	r3, [r7, #15]
 800025a:	7bfb      	ldrb	r3, [r7, #15]
 800025c:	2b01      	cmp	r3, #1
 800025e:	d9ea      	bls.n	8000236 <main+0x6e>
		}

		GPIOD->ODR |= (1 << 13);				// Turn the LED on by setting Pin 13 high
 8000260:	4b0c      	ldr	r3, [pc, #48]	@ (8000294 <main+0xcc>)
 8000262:	695b      	ldr	r3, [r3, #20]
 8000264:	4a0b      	ldr	r2, [pc, #44]	@ (8000294 <main+0xcc>)
 8000266:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800026a:	6153      	str	r3, [r2, #20]
		make_delay(random_number[0] >> 14);		// Reduce the delay
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	0b9b      	lsrs	r3, r3, #14
 8000270:	4618      	mov	r0, r3
 8000272:	f000 f813 	bl	800029c <make_delay>

		GPIOD->ODR &= ~(1 << 13);				// Turn the LED off by setting Pin 13 low
 8000276:	4b07      	ldr	r3, [pc, #28]	@ (8000294 <main+0xcc>)
 8000278:	695b      	ldr	r3, [r3, #20]
 800027a:	4a06      	ldr	r2, [pc, #24]	@ (8000294 <main+0xcc>)
 800027c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000280:	6153      	str	r3, [r2, #20]
		make_delay(random_number[1] >> 14);		// Reduce the delay
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	0b9b      	lsrs	r3, r3, #14
 8000286:	4618      	mov	r0, r3
 8000288:	f000 f808 	bl	800029c <make_delay>
		for(uint8_t i = 0; i < 2; i++)		// Generate two numbers
 800028c:	e7d0      	b.n	8000230 <main+0x68>
 800028e:	bf00      	nop
 8000290:	40023800 	.word	0x40023800
 8000294:	40020c00 	.word	0x40020c00
 8000298:	50060800 	.word	0x50060800

0800029c <make_delay>:
	}

}

void make_delay(uint32_t delay_count)
{
 800029c:	b480      	push	{r7}
 800029e:	b085      	sub	sp, #20
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
	uint32_t i;
	for(i = 0; i <= delay_count; i++){}
 80002a4:	2300      	movs	r3, #0
 80002a6:	60fb      	str	r3, [r7, #12]
 80002a8:	e002      	b.n	80002b0 <make_delay+0x14>
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	3301      	adds	r3, #1
 80002ae:	60fb      	str	r3, [r7, #12]
 80002b0:	68fa      	ldr	r2, [r7, #12]
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	429a      	cmp	r2, r3
 80002b6:	d9f8      	bls.n	80002aa <make_delay+0xe>
}
 80002b8:	bf00      	nop
 80002ba:	bf00      	nop
 80002bc:	3714      	adds	r7, #20
 80002be:	46bd      	mov	sp, r7
 80002c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c4:	4770      	bx	lr
	...

080002c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002c8:	480d      	ldr	r0, [pc, #52]	@ (8000300 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ca:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002cc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002d0:	480c      	ldr	r0, [pc, #48]	@ (8000304 <LoopForever+0x6>)
  ldr r1, =_edata
 80002d2:	490d      	ldr	r1, [pc, #52]	@ (8000308 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002d4:	4a0d      	ldr	r2, [pc, #52]	@ (800030c <LoopForever+0xe>)
  movs r3, #0
 80002d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002d8:	e002      	b.n	80002e0 <LoopCopyDataInit>

080002da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002de:	3304      	adds	r3, #4

080002e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002e4:	d3f9      	bcc.n	80002da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000310 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002e8:	4c0a      	ldr	r4, [pc, #40]	@ (8000314 <LoopForever+0x16>)
  movs r3, #0
 80002ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002ec:	e001      	b.n	80002f2 <LoopFillZerobss>

080002ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002f0:	3204      	adds	r2, #4

080002f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002f4:	d3fb      	bcc.n	80002ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002f6:	f000 f811 	bl	800031c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002fa:	f7ff ff65 	bl	80001c8 <main>

080002fe <LoopForever>:

LoopForever:
  b LoopForever
 80002fe:	e7fe      	b.n	80002fe <LoopForever>
  ldr   r0, =_estack
 8000300:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000304:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000308:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800030c:	08000384 	.word	0x08000384
  ldr r2, =_sbss
 8000310:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000314:	2000001c 	.word	0x2000001c

08000318 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000318:	e7fe      	b.n	8000318 <ADC_IRQHandler>
	...

0800031c <__libc_init_array>:
 800031c:	b570      	push	{r4, r5, r6, lr}
 800031e:	4d0d      	ldr	r5, [pc, #52]	@ (8000354 <__libc_init_array+0x38>)
 8000320:	4c0d      	ldr	r4, [pc, #52]	@ (8000358 <__libc_init_array+0x3c>)
 8000322:	1b64      	subs	r4, r4, r5
 8000324:	10a4      	asrs	r4, r4, #2
 8000326:	2600      	movs	r6, #0
 8000328:	42a6      	cmp	r6, r4
 800032a:	d109      	bne.n	8000340 <__libc_init_array+0x24>
 800032c:	4d0b      	ldr	r5, [pc, #44]	@ (800035c <__libc_init_array+0x40>)
 800032e:	4c0c      	ldr	r4, [pc, #48]	@ (8000360 <__libc_init_array+0x44>)
 8000330:	f000 f818 	bl	8000364 <_init>
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	10a4      	asrs	r4, r4, #2
 8000338:	2600      	movs	r6, #0
 800033a:	42a6      	cmp	r6, r4
 800033c:	d105      	bne.n	800034a <__libc_init_array+0x2e>
 800033e:	bd70      	pop	{r4, r5, r6, pc}
 8000340:	f855 3b04 	ldr.w	r3, [r5], #4
 8000344:	4798      	blx	r3
 8000346:	3601      	adds	r6, #1
 8000348:	e7ee      	b.n	8000328 <__libc_init_array+0xc>
 800034a:	f855 3b04 	ldr.w	r3, [r5], #4
 800034e:	4798      	blx	r3
 8000350:	3601      	adds	r6, #1
 8000352:	e7f2      	b.n	800033a <__libc_init_array+0x1e>
 8000354:	0800037c 	.word	0x0800037c
 8000358:	0800037c 	.word	0x0800037c
 800035c:	0800037c 	.word	0x0800037c
 8000360:	08000380 	.word	0x08000380

08000364 <_init>:
 8000364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000366:	bf00      	nop
 8000368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800036a:	bc08      	pop	{r3}
 800036c:	469e      	mov	lr, r3
 800036e:	4770      	bx	lr

08000370 <_fini>:
 8000370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000372:	bf00      	nop
 8000374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000376:	bc08      	pop	{r3}
 8000378:	469e      	mov	lr, r3
 800037a:	4770      	bx	lr
