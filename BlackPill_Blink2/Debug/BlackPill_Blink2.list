
BlackPill_Blink2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000237c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  0800251c  0800251c  0000351c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025b8  080025b8  00004068  2**0
                  CONTENTS
  4 .ARM          00000008  080025b8  080025b8  000035b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080025c0  080025c0  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025c0  080025c0  000035c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080025c4  080025c4  000035c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080025c8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000068  08002630  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  08002630  00004220  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000091d7  00000000  00000000  00004098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000170d  00000000  00000000  0000d26f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00003ae8  00000000  00000000  0000e97c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006c0  00000000  00000000  00012468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000050d  00000000  00000000  00012b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016265  00000000  00000000  00013035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a56e  00000000  00000000  0002929a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008754e  00000000  00000000  00033808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000bad56  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000183c  00000000  00000000  000bad9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  000bc5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002504 	.word	0x08002504

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08002504 	.word	0x08002504

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000570:	b530      	push	{r4, r5, lr}
 8000572:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000574:	2400      	movs	r4, #0
 8000576:	9403      	str	r4, [sp, #12]
 8000578:	9404      	str	r4, [sp, #16]
 800057a:	9405      	str	r4, [sp, #20]
 800057c:	9406      	str	r4, [sp, #24]
 800057e:	9407      	str	r4, [sp, #28]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000580:	9400      	str	r4, [sp, #0]
 8000582:	4b19      	ldr	r3, [pc, #100]	@ (80005e8 <MX_GPIO_Init+0x78>)
 8000584:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000586:	f042 0204 	orr.w	r2, r2, #4
 800058a:	631a      	str	r2, [r3, #48]	@ 0x30
 800058c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800058e:	f002 0204 	and.w	r2, r2, #4
 8000592:	9200      	str	r2, [sp, #0]
 8000594:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000596:	9401      	str	r4, [sp, #4]
 8000598:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800059a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800059e:	631a      	str	r2, [r3, #48]	@ 0x30
 80005a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005a2:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80005a6:	9201      	str	r2, [sp, #4]
 80005a8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005aa:	9402      	str	r4, [sp, #8]
 80005ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005ae:	f042 0201 	orr.w	r2, r2, #1
 80005b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80005b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b6:	f003 0301 	and.w	r3, r3, #1
 80005ba:	9302      	str	r3, [sp, #8]
 80005bc:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80005be:	4d0b      	ldr	r5, [pc, #44]	@ (80005ec <MX_GPIO_Init+0x7c>)
 80005c0:	2201      	movs	r2, #1
 80005c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005c6:	4628      	mov	r0, r5
 80005c8:	f000 fb48 	bl	8000c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80005cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005d0:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80005d2:	2311      	movs	r3, #17
 80005d4:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d6:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d8:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80005da:	a903      	add	r1, sp, #12
 80005dc:	4628      	mov	r0, r5
 80005de:	f000 fa59 	bl	8000a94 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005e2:	b009      	add	sp, #36	@ 0x24
 80005e4:	bd30      	pop	{r4, r5, pc}
 80005e6:	bf00      	nop
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40020800 	.word	0x40020800

080005f0 <_write>:
  if (fd == 1 || fd == 2) {
 80005f0:	3801      	subs	r0, #1
 80005f2:	2801      	cmp	r0, #1
 80005f4:	d80a      	bhi.n	800060c <_write+0x1c>
int _write(int fd, char* ptr, int len) {
 80005f6:	b510      	push	{r4, lr}
 80005f8:	4614      	mov	r4, r2
    hstatus = HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80005fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005fe:	b292      	uxth	r2, r2
 8000600:	4805      	ldr	r0, [pc, #20]	@ (8000618 <_write+0x28>)
 8000602:	f000 ff8a 	bl	800151a <HAL_UART_Transmit>
    if (hstatus == HAL_OK)
 8000606:	b920      	cbnz	r0, 8000612 <_write+0x22>
      return len;
 8000608:	4620      	mov	r0, r4
}
 800060a:	bd10      	pop	{r4, pc}
  return -1;
 800060c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8000610:	4770      	bx	lr
      return -1;
 8000612:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000616:	e7f8      	b.n	800060a <_write+0x1a>
 8000618:	20000084 	.word	0x20000084

0800061c <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800061c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800061e:	e7fe      	b.n	800061e <Error_Handler+0x2>

08000620 <MX_USART1_UART_Init>:
{
 8000620:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8000622:	480a      	ldr	r0, [pc, #40]	@ (800064c <MX_USART1_UART_Init+0x2c>)
 8000624:	4b0a      	ldr	r3, [pc, #40]	@ (8000650 <MX_USART1_UART_Init+0x30>)
 8000626:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8000628:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800062c:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800062e:	2300      	movs	r3, #0
 8000630:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000632:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000634:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000636:	220c      	movs	r2, #12
 8000638:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800063a:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800063c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800063e:	f000 ff3c 	bl	80014ba <HAL_UART_Init>
 8000642:	b900      	cbnz	r0, 8000646 <MX_USART1_UART_Init+0x26>
}
 8000644:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000646:	f7ff ffe9 	bl	800061c <Error_Handler>
 800064a:	bf00      	nop
 800064c:	20000084 	.word	0x20000084
 8000650:	40011000 	.word	0x40011000

08000654 <SystemClock_Config>:
{
 8000654:	b500      	push	{lr}
 8000656:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000658:	2230      	movs	r2, #48	@ 0x30
 800065a:	2100      	movs	r1, #0
 800065c:	a808      	add	r0, sp, #32
 800065e:	f001 f9cd 	bl	80019fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000662:	2300      	movs	r3, #0
 8000664:	9303      	str	r3, [sp, #12]
 8000666:	9304      	str	r3, [sp, #16]
 8000668:	9305      	str	r3, [sp, #20]
 800066a:	9306      	str	r3, [sp, #24]
 800066c:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 800066e:	9301      	str	r3, [sp, #4]
 8000670:	4a1f      	ldr	r2, [pc, #124]	@ (80006f0 <SystemClock_Config+0x9c>)
 8000672:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8000674:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8000678:	6411      	str	r1, [r2, #64]	@ 0x40
 800067a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800067c:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8000680:	9201      	str	r2, [sp, #4]
 8000682:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000684:	9302      	str	r3, [sp, #8]
 8000686:	4b1b      	ldr	r3, [pc, #108]	@ (80006f4 <SystemClock_Config+0xa0>)
 8000688:	681a      	ldr	r2, [r3, #0]
 800068a:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000696:	9302      	str	r3, [sp, #8]
 8000698:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800069a:	2301      	movs	r3, #1
 800069c:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800069e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006a2:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a4:	2302      	movs	r3, #2
 80006a6:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80006ac:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80006ae:	220c      	movs	r2, #12
 80006b0:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80006b2:	2260      	movs	r2, #96	@ 0x60
 80006b4:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b6:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006b8:	2304      	movs	r3, #4
 80006ba:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006bc:	a808      	add	r0, sp, #32
 80006be:	f000 fadd 	bl	8000c7c <HAL_RCC_OscConfig>
 80006c2:	b988      	cbnz	r0, 80006e8 <SystemClock_Config+0x94>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c4:	230f      	movs	r3, #15
 80006c6:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c8:	2302      	movs	r3, #2
 80006ca:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006d0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80006d4:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d6:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006d8:	2103      	movs	r1, #3
 80006da:	a803      	add	r0, sp, #12
 80006dc:	f000 fd1e 	bl	800111c <HAL_RCC_ClockConfig>
 80006e0:	b920      	cbnz	r0, 80006ec <SystemClock_Config+0x98>
}
 80006e2:	b015      	add	sp, #84	@ 0x54
 80006e4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80006e8:	f7ff ff98 	bl	800061c <Error_Handler>
    Error_Handler();
 80006ec:	f7ff ff96 	bl	800061c <Error_Handler>
 80006f0:	40023800 	.word	0x40023800
 80006f4:	40007000 	.word	0x40007000

080006f8 <main>:
{
 80006f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_Init();
 80006fa:	f000 f935 	bl	8000968 <HAL_Init>
  SystemClock_Config();
 80006fe:	f7ff ffa9 	bl	8000654 <SystemClock_Config>
  MX_GPIO_Init();
 8000702:	f7ff ff35 	bl	8000570 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000706:	f7ff ff8b 	bl	8000620 <MX_USART1_UART_Init>
  printf("Blink2 starting ...\r\n");
 800070a:	4814      	ldr	r0, [pc, #80]	@ (800075c <main+0x64>)
 800070c:	f001 f896 	bl	800183c <puts>
  uint32_t loop_cnt = 0;
 8000710:	2500      	movs	r5, #0
  uint32_t last_tick = 0;
 8000712:	462f      	mov	r7, r5
  uint32_t last_blink = 0;
 8000714:	462e      	mov	r6, r5
 8000716:	e015      	b.n	8000744 <main+0x4c>
		 printf("Toggling GPIO at %lu\r\n", now);
 8000718:	4601      	mov	r1, r0
 800071a:	4811      	ldr	r0, [pc, #68]	@ (8000760 <main+0x68>)
 800071c:	f001 f826 	bl	800176c <iprintf>
		 HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000720:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000724:	480f      	ldr	r0, [pc, #60]	@ (8000764 <main+0x6c>)
 8000726:	f000 fa9f 	bl	8000c68 <HAL_GPIO_TogglePin>
		 last_blink = now;
 800072a:	4626      	mov	r6, r4
 800072c:	e011      	b.n	8000752 <main+0x5a>
		 printf("Tick %lu (loop count: %lu)\r\n", now/1000, loop_cnt);  // Convert msec to seconds
 800072e:	490e      	ldr	r1, [pc, #56]	@ (8000768 <main+0x70>)
 8000730:	fba1 3104 	umull	r3, r1, r1, r4
 8000734:	462a      	mov	r2, r5
 8000736:	0989      	lsrs	r1, r1, #6
 8000738:	480c      	ldr	r0, [pc, #48]	@ (800076c <main+0x74>)
 800073a:	f001 f817 	bl	800176c <iprintf>
		 last_tick = now;
 800073e:	4627      	mov	r7, r4
		 loop_cnt = 0;
 8000740:	2500      	movs	r5, #0
	 loop_cnt++;
 8000742:	3501      	adds	r5, #1
	 now = HAL_GetTick();
 8000744:	f000 f936 	bl	80009b4 <HAL_GetTick>
 8000748:	4604      	mov	r4, r0
	 if(now - last_blink >= 500)
 800074a:	1b83      	subs	r3, r0, r6
 800074c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000750:	d2e2      	bcs.n	8000718 <main+0x20>
	 if(now - last_tick >= 1000)
 8000752:	1be3      	subs	r3, r4, r7
 8000754:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000758:	d3f3      	bcc.n	8000742 <main+0x4a>
 800075a:	e7e8      	b.n	800072e <main+0x36>
 800075c:	0800251c 	.word	0x0800251c
 8000760:	08002534 	.word	0x08002534
 8000764:	40020800 	.word	0x40020800
 8000768:	10624dd3 	.word	0x10624dd3
 800076c:	0800254c 	.word	0x0800254c

08000770 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000770:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000772:	2100      	movs	r1, #0
 8000774:	9100      	str	r1, [sp, #0]
 8000776:	4b0b      	ldr	r3, [pc, #44]	@ (80007a4 <HAL_MspInit+0x34>)
 8000778:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800077a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800077e:	645a      	str	r2, [r3, #68]	@ 0x44
 8000780:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000782:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000786:	9200      	str	r2, [sp, #0]
 8000788:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800078a:	9101      	str	r1, [sp, #4]
 800078c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800078e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000792:	641a      	str	r2, [r3, #64]	@ 0x40
 8000794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000796:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800079a:	9301      	str	r3, [sp, #4]
 800079c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800079e:	b002      	add	sp, #8
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	40023800 	.word	0x40023800

080007a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007a8:	b500      	push	{lr}
 80007aa:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ac:	2300      	movs	r3, #0
 80007ae:	9303      	str	r3, [sp, #12]
 80007b0:	9304      	str	r3, [sp, #16]
 80007b2:	9305      	str	r3, [sp, #20]
 80007b4:	9306      	str	r3, [sp, #24]
 80007b6:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 80007b8:	6802      	ldr	r2, [r0, #0]
 80007ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80007be:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 80007c2:	429a      	cmp	r2, r3
 80007c4:	d002      	beq.n	80007cc <HAL_UART_MspInit+0x24>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80007c6:	b009      	add	sp, #36	@ 0x24
 80007c8:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 80007cc:	2100      	movs	r1, #0
 80007ce:	9101      	str	r1, [sp, #4]
 80007d0:	f503 3394 	add.w	r3, r3, #75776	@ 0x12800
 80007d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80007d6:	f042 0210 	orr.w	r2, r2, #16
 80007da:	645a      	str	r2, [r3, #68]	@ 0x44
 80007dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80007de:	f002 0210 	and.w	r2, r2, #16
 80007e2:	9201      	str	r2, [sp, #4]
 80007e4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e6:	9102      	str	r1, [sp, #8]
 80007e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80007ea:	f042 0201 	orr.w	r2, r2, #1
 80007ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	9302      	str	r3, [sp, #8]
 80007f8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80007fa:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80007fe:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000800:	2302      	movs	r3, #2
 8000802:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000804:	2303      	movs	r3, #3
 8000806:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000808:	2307      	movs	r3, #7
 800080a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080c:	a903      	add	r1, sp, #12
 800080e:	4802      	ldr	r0, [pc, #8]	@ (8000818 <HAL_UART_MspInit+0x70>)
 8000810:	f000 f940 	bl	8000a94 <HAL_GPIO_Init>
}
 8000814:	e7d7      	b.n	80007c6 <HAL_UART_MspInit+0x1e>
 8000816:	bf00      	nop
 8000818:	40020000 	.word	0x40020000

0800081c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800081c:	e7fe      	b.n	800081c <NMI_Handler>

0800081e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800081e:	e7fe      	b.n	800081e <HardFault_Handler>

08000820 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000820:	e7fe      	b.n	8000820 <MemManage_Handler>

08000822 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000822:	e7fe      	b.n	8000822 <BusFault_Handler>

08000824 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000824:	e7fe      	b.n	8000824 <UsageFault_Handler>

08000826 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000826:	4770      	bx	lr

08000828 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000828:	4770      	bx	lr

0800082a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800082a:	4770      	bx	lr

0800082c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800082c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800082e:	f000 f8b5 	bl	800099c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000832:	bd08      	pop	{r3, pc}

08000834 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000834:	b570      	push	{r4, r5, r6, lr}
 8000836:	460c      	mov	r4, r1
 8000838:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800083a:	2500      	movs	r5, #0
 800083c:	e006      	b.n	800084c <_read+0x18>
  {
    *ptr++ = __io_getchar();
 800083e:	f3af 8000 	nop.w
 8000842:	4621      	mov	r1, r4
 8000844:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000848:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 800084a:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800084c:	42b5      	cmp	r5, r6
 800084e:	dbf6      	blt.n	800083e <_read+0xa>
  }

  return len;
}
 8000850:	4630      	mov	r0, r6
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8000854:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000858:	4770      	bx	lr

0800085a <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800085a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800085e:	604b      	str	r3, [r1, #4]
  return 0;
}
 8000860:	2000      	movs	r0, #0
 8000862:	4770      	bx	lr

08000864 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8000864:	2001      	movs	r0, #1
 8000866:	4770      	bx	lr

08000868 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8000868:	2000      	movs	r0, #0
 800086a:	4770      	bx	lr

0800086c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800086c:	b510      	push	{r4, lr}
 800086e:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000870:	4a0c      	ldr	r2, [pc, #48]	@ (80008a4 <_sbrk+0x38>)
 8000872:	490d      	ldr	r1, [pc, #52]	@ (80008a8 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000874:	480d      	ldr	r0, [pc, #52]	@ (80008ac <_sbrk+0x40>)
 8000876:	6800      	ldr	r0, [r0, #0]
 8000878:	b140      	cbz	r0, 800088c <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800087a:	480c      	ldr	r0, [pc, #48]	@ (80008ac <_sbrk+0x40>)
 800087c:	6800      	ldr	r0, [r0, #0]
 800087e:	4403      	add	r3, r0
 8000880:	1a52      	subs	r2, r2, r1
 8000882:	4293      	cmp	r3, r2
 8000884:	d806      	bhi.n	8000894 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000886:	4a09      	ldr	r2, [pc, #36]	@ (80008ac <_sbrk+0x40>)
 8000888:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 800088a:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800088c:	4807      	ldr	r0, [pc, #28]	@ (80008ac <_sbrk+0x40>)
 800088e:	4c08      	ldr	r4, [pc, #32]	@ (80008b0 <_sbrk+0x44>)
 8000890:	6004      	str	r4, [r0, #0]
 8000892:	e7f2      	b.n	800087a <_sbrk+0xe>
    errno = ENOMEM;
 8000894:	f001 f900 	bl	8001a98 <__errno>
 8000898:	230c      	movs	r3, #12
 800089a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800089c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80008a0:	e7f3      	b.n	800088a <_sbrk+0x1e>
 80008a2:	bf00      	nop
 80008a4:	20020000 	.word	0x20020000
 80008a8:	00000400 	.word	0x00000400
 80008ac:	200000cc 	.word	0x200000cc
 80008b0:	20000220 	.word	0x20000220

080008b4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008b4:	4a03      	ldr	r2, [pc, #12]	@ (80008c4 <SystemInit+0x10>)
 80008b6:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80008ba:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008be:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008c2:	4770      	bx	lr
 80008c4:	e000ed00 	.word	0xe000ed00

080008c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80008c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000900 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80008cc:	f7ff fff2 	bl	80008b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008d0:	480c      	ldr	r0, [pc, #48]	@ (8000904 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008d2:	490d      	ldr	r1, [pc, #52]	@ (8000908 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008d4:	4a0d      	ldr	r2, [pc, #52]	@ (800090c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008d8:	e002      	b.n	80008e0 <LoopCopyDataInit>

080008da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008de:	3304      	adds	r3, #4

080008e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008e4:	d3f9      	bcc.n	80008da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000910 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008e8:	4c0a      	ldr	r4, [pc, #40]	@ (8000914 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008ec:	e001      	b.n	80008f2 <LoopFillZerobss>

080008ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008f0:	3204      	adds	r2, #4

080008f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008f4:	d3fb      	bcc.n	80008ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008f6:	f001 f8d5 	bl	8001aa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008fa:	f7ff fefd 	bl	80006f8 <main>
  bx  lr    
 80008fe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000900:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000904:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000908:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800090c:	080025c8 	.word	0x080025c8
  ldr r2, =_sbss
 8000910:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000914:	20000220 	.word	0x20000220

08000918 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000918:	e7fe      	b.n	8000918 <ADC_IRQHandler>
	...

0800091c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800091c:	b510      	push	{r4, lr}
 800091e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000920:	4b0e      	ldr	r3, [pc, #56]	@ (800095c <HAL_InitTick+0x40>)
 8000922:	781a      	ldrb	r2, [r3, #0]
 8000924:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000928:	fbb3 f3f2 	udiv	r3, r3, r2
 800092c:	4a0c      	ldr	r2, [pc, #48]	@ (8000960 <HAL_InitTick+0x44>)
 800092e:	6810      	ldr	r0, [r2, #0]
 8000930:	fbb0 f0f3 	udiv	r0, r0, r3
 8000934:	f000 f89a 	bl	8000a6c <HAL_SYSTICK_Config>
 8000938:	b968      	cbnz	r0, 8000956 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800093a:	2c0f      	cmp	r4, #15
 800093c:	d901      	bls.n	8000942 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800093e:	2001      	movs	r0, #1
 8000940:	e00a      	b.n	8000958 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000942:	2200      	movs	r2, #0
 8000944:	4621      	mov	r1, r4
 8000946:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800094a:	f000 f87f 	bl	8000a4c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800094e:	4b05      	ldr	r3, [pc, #20]	@ (8000964 <HAL_InitTick+0x48>)
 8000950:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000952:	2000      	movs	r0, #0
 8000954:	e000      	b.n	8000958 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000956:	2001      	movs	r0, #1
}
 8000958:	bd10      	pop	{r4, pc}
 800095a:	bf00      	nop
 800095c:	20000004 	.word	0x20000004
 8000960:	20000000 	.word	0x20000000
 8000964:	20000008 	.word	0x20000008

08000968 <HAL_Init>:
{
 8000968:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800096a:	4b0b      	ldr	r3, [pc, #44]	@ (8000998 <HAL_Init+0x30>)
 800096c:	681a      	ldr	r2, [r3, #0]
 800096e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000972:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800097a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000982:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000984:	2003      	movs	r0, #3
 8000986:	f000 f84f 	bl	8000a28 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800098a:	200f      	movs	r0, #15
 800098c:	f7ff ffc6 	bl	800091c <HAL_InitTick>
  HAL_MspInit();
 8000990:	f7ff feee 	bl	8000770 <HAL_MspInit>
}
 8000994:	2000      	movs	r0, #0
 8000996:	bd08      	pop	{r3, pc}
 8000998:	40023c00 	.word	0x40023c00

0800099c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800099c:	4a03      	ldr	r2, [pc, #12]	@ (80009ac <HAL_IncTick+0x10>)
 800099e:	6811      	ldr	r1, [r2, #0]
 80009a0:	4b03      	ldr	r3, [pc, #12]	@ (80009b0 <HAL_IncTick+0x14>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	440b      	add	r3, r1
 80009a6:	6013      	str	r3, [r2, #0]
}
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	200000d0 	.word	0x200000d0
 80009b0:	20000004 	.word	0x20000004

080009b4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80009b4:	4b01      	ldr	r3, [pc, #4]	@ (80009bc <HAL_GetTick+0x8>)
 80009b6:	6818      	ldr	r0, [r3, #0]
}
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	200000d0 	.word	0x200000d0

080009c0 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80009c0:	2800      	cmp	r0, #0
 80009c2:	db08      	blt.n	80009d6 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009c4:	0109      	lsls	r1, r1, #4
 80009c6:	b2c9      	uxtb	r1, r1
 80009c8:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80009cc:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80009d0:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 80009d4:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d6:	f000 000f 	and.w	r0, r0, #15
 80009da:	0109      	lsls	r1, r1, #4
 80009dc:	b2c9      	uxtb	r1, r1
 80009de:	4b01      	ldr	r3, [pc, #4]	@ (80009e4 <__NVIC_SetPriority+0x24>)
 80009e0:	5419      	strb	r1, [r3, r0]
  }
}
 80009e2:	4770      	bx	lr
 80009e4:	e000ed14 	.word	0xe000ed14

080009e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009e8:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009ea:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009ee:	f1c0 0c07 	rsb	ip, r0, #7
 80009f2:	f1bc 0f04 	cmp.w	ip, #4
 80009f6:	bf28      	it	cs
 80009f8:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009fc:	1d03      	adds	r3, r0, #4
 80009fe:	2b06      	cmp	r3, #6
 8000a00:	d90f      	bls.n	8000a22 <NVIC_EncodePriority+0x3a>
 8000a02:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a04:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8000a08:	fa0e f00c 	lsl.w	r0, lr, ip
 8000a0c:	ea21 0100 	bic.w	r1, r1, r0
 8000a10:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a12:	fa0e fe03 	lsl.w	lr, lr, r3
 8000a16:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8000a1a:	ea41 0002 	orr.w	r0, r1, r2
 8000a1e:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a22:	2300      	movs	r3, #0
 8000a24:	e7ee      	b.n	8000a04 <NVIC_EncodePriority+0x1c>
	...

08000a28 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a28:	4a07      	ldr	r2, [pc, #28]	@ (8000a48 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000a2a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a2c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000a30:	041b      	lsls	r3, r3, #16
 8000a32:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a34:	0200      	lsls	r0, r0, #8
 8000a36:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a3a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000a3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000a44:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000a46:	4770      	bx	lr
 8000a48:	e000ed00 	.word	0xe000ed00

08000a4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a4c:	b510      	push	{r4, lr}
 8000a4e:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a50:	4b05      	ldr	r3, [pc, #20]	@ (8000a68 <HAL_NVIC_SetPriority+0x1c>)
 8000a52:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a54:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000a58:	f7ff ffc6 	bl	80009e8 <NVIC_EncodePriority>
 8000a5c:	4601      	mov	r1, r0
 8000a5e:	4620      	mov	r0, r4
 8000a60:	f7ff ffae 	bl	80009c0 <__NVIC_SetPriority>
}
 8000a64:	bd10      	pop	{r4, pc}
 8000a66:	bf00      	nop
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a6c:	3801      	subs	r0, #1
 8000a6e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000a72:	d20b      	bcs.n	8000a8c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a74:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000a78:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a7a:	4a05      	ldr	r2, [pc, #20]	@ (8000a90 <HAL_SYSTICK_Config+0x24>)
 8000a7c:	21f0      	movs	r1, #240	@ 0xf0
 8000a7e:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a82:	2000      	movs	r0, #0
 8000a84:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a86:	2207      	movs	r2, #7
 8000a88:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a8a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000a8c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000a8e:	4770      	bx	lr
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a94:	2300      	movs	r3, #0
 8000a96:	2b0f      	cmp	r3, #15
 8000a98:	f200 80d7 	bhi.w	8000c4a <HAL_GPIO_Init+0x1b6>
{
 8000a9c:	b570      	push	{r4, r5, r6, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	e065      	b.n	8000b6e <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000aa2:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000aa4:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000aa8:	2403      	movs	r4, #3
 8000aaa:	fa04 f40e 	lsl.w	r4, r4, lr
 8000aae:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ab2:	68cc      	ldr	r4, [r1, #12]
 8000ab4:	fa04 f40e 	lsl.w	r4, r4, lr
 8000ab8:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8000aba:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000abc:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000abe:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ac2:	684a      	ldr	r2, [r1, #4]
 8000ac4:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8000ac8:	409a      	lsls	r2, r3
 8000aca:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8000acc:	6042      	str	r2, [r0, #4]
 8000ace:	e05c      	b.n	8000b8a <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ad0:	08dc      	lsrs	r4, r3, #3
 8000ad2:	3408      	adds	r4, #8
 8000ad4:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ad8:	f003 0507 	and.w	r5, r3, #7
 8000adc:	00ad      	lsls	r5, r5, #2
 8000ade:	f04f 0e0f 	mov.w	lr, #15
 8000ae2:	fa0e fe05 	lsl.w	lr, lr, r5
 8000ae6:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000aea:	690a      	ldr	r2, [r1, #16]
 8000aec:	40aa      	lsls	r2, r5
 8000aee:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000af2:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8000af6:	e05c      	b.n	8000bb2 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000af8:	2204      	movs	r2, #4
 8000afa:	e000      	b.n	8000afe <HAL_GPIO_Init+0x6a>
 8000afc:	2200      	movs	r2, #0
 8000afe:	fa02 f20e 	lsl.w	r2, r2, lr
 8000b02:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b04:	3402      	adds	r4, #2
 8000b06:	4d51      	ldr	r5, [pc, #324]	@ (8000c4c <HAL_GPIO_Init+0x1b8>)
 8000b08:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b0c:	4a50      	ldr	r2, [pc, #320]	@ (8000c50 <HAL_GPIO_Init+0x1bc>)
 8000b0e:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000b10:	ea6f 020c 	mvn.w	r2, ip
 8000b14:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000b18:	684e      	ldr	r6, [r1, #4]
 8000b1a:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8000b1e:	d001      	beq.n	8000b24 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8000b20:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8000b24:	4c4a      	ldr	r4, [pc, #296]	@ (8000c50 <HAL_GPIO_Init+0x1bc>)
 8000b26:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8000b28:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000b2a:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000b2e:	684e      	ldr	r6, [r1, #4]
 8000b30:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8000b34:	d001      	beq.n	8000b3a <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8000b36:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8000b3a:	4c45      	ldr	r4, [pc, #276]	@ (8000c50 <HAL_GPIO_Init+0x1bc>)
 8000b3c:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8000b3e:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000b40:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000b44:	684e      	ldr	r6, [r1, #4]
 8000b46:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8000b4a:	d001      	beq.n	8000b50 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8000b4c:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8000b50:	4c3f      	ldr	r4, [pc, #252]	@ (8000c50 <HAL_GPIO_Init+0x1bc>)
 8000b52:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b54:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8000b56:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000b58:	684d      	ldr	r5, [r1, #4]
 8000b5a:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8000b5e:	d001      	beq.n	8000b64 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8000b60:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8000b64:	4c3a      	ldr	r4, [pc, #232]	@ (8000c50 <HAL_GPIO_Init+0x1bc>)
 8000b66:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b68:	3301      	adds	r3, #1
 8000b6a:	2b0f      	cmp	r3, #15
 8000b6c:	d86b      	bhi.n	8000c46 <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 8000b6e:	2201      	movs	r2, #1
 8000b70:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b72:	680c      	ldr	r4, [r1, #0]
 8000b74:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8000b78:	ea32 0404 	bics.w	r4, r2, r4
 8000b7c:	d1f4      	bne.n	8000b68 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b7e:	684c      	ldr	r4, [r1, #4]
 8000b80:	f004 0403 	and.w	r4, r4, #3
 8000b84:	3c01      	subs	r4, #1
 8000b86:	2c01      	cmp	r4, #1
 8000b88:	d98b      	bls.n	8000aa2 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b8a:	684a      	ldr	r2, [r1, #4]
 8000b8c:	f002 0203 	and.w	r2, r2, #3
 8000b90:	2a03      	cmp	r2, #3
 8000b92:	d009      	beq.n	8000ba8 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8000b94:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b96:	005d      	lsls	r5, r3, #1
 8000b98:	2203      	movs	r2, #3
 8000b9a:	40aa      	lsls	r2, r5
 8000b9c:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ba0:	688a      	ldr	r2, [r1, #8]
 8000ba2:	40aa      	lsls	r2, r5
 8000ba4:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8000ba6:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ba8:	684a      	ldr	r2, [r1, #4]
 8000baa:	f002 0203 	and.w	r2, r2, #3
 8000bae:	2a02      	cmp	r2, #2
 8000bb0:	d08e      	beq.n	8000ad0 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8000bb2:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000bb4:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000bb8:	2203      	movs	r2, #3
 8000bba:	fa02 f20e 	lsl.w	r2, r2, lr
 8000bbe:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000bc2:	684a      	ldr	r2, [r1, #4]
 8000bc4:	f002 0203 	and.w	r2, r2, #3
 8000bc8:	fa02 f20e 	lsl.w	r2, r2, lr
 8000bcc:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8000bce:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000bd0:	684a      	ldr	r2, [r1, #4]
 8000bd2:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8000bd6:	d0c7      	beq.n	8000b68 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd8:	2200      	movs	r2, #0
 8000bda:	9201      	str	r2, [sp, #4]
 8000bdc:	4a1d      	ldr	r2, [pc, #116]	@ (8000c54 <HAL_GPIO_Init+0x1c0>)
 8000bde:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8000be0:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8000be4:	6454      	str	r4, [r2, #68]	@ 0x44
 8000be6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8000be8:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000bec:	9201      	str	r2, [sp, #4]
 8000bee:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000bf0:	089c      	lsrs	r4, r3, #2
 8000bf2:	1ca5      	adds	r5, r4, #2
 8000bf4:	4a15      	ldr	r2, [pc, #84]	@ (8000c4c <HAL_GPIO_Init+0x1b8>)
 8000bf6:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000bfa:	f003 0e03 	and.w	lr, r3, #3
 8000bfe:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000c02:	220f      	movs	r2, #15
 8000c04:	fa02 f20e 	lsl.w	r2, r2, lr
 8000c08:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c0c:	4a12      	ldr	r2, [pc, #72]	@ (8000c58 <HAL_GPIO_Init+0x1c4>)
 8000c0e:	4290      	cmp	r0, r2
 8000c10:	f43f af74 	beq.w	8000afc <HAL_GPIO_Init+0x68>
 8000c14:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000c18:	4290      	cmp	r0, r2
 8000c1a:	d00e      	beq.n	8000c3a <HAL_GPIO_Init+0x1a6>
 8000c1c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d00c      	beq.n	8000c3e <HAL_GPIO_Init+0x1aa>
 8000c24:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000c28:	4290      	cmp	r0, r2
 8000c2a:	d00a      	beq.n	8000c42 <HAL_GPIO_Init+0x1ae>
 8000c2c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f43f af61 	beq.w	8000af8 <HAL_GPIO_Init+0x64>
 8000c36:	2207      	movs	r2, #7
 8000c38:	e761      	b.n	8000afe <HAL_GPIO_Init+0x6a>
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	e75f      	b.n	8000afe <HAL_GPIO_Init+0x6a>
 8000c3e:	2202      	movs	r2, #2
 8000c40:	e75d      	b.n	8000afe <HAL_GPIO_Init+0x6a>
 8000c42:	2203      	movs	r2, #3
 8000c44:	e75b      	b.n	8000afe <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8000c46:	b002      	add	sp, #8
 8000c48:	bd70      	pop	{r4, r5, r6, pc}
 8000c4a:	4770      	bx	lr
 8000c4c:	40013800 	.word	0x40013800
 8000c50:	40013c00 	.word	0x40013c00
 8000c54:	40023800 	.word	0x40023800
 8000c58:	40020000 	.word	0x40020000

08000c5c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c5c:	b10a      	cbz	r2, 8000c62 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c5e:	6181      	str	r1, [r0, #24]
 8000c60:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000c62:	0409      	lsls	r1, r1, #16
 8000c64:	6181      	str	r1, [r0, #24]
  }
}
 8000c66:	4770      	bx	lr

08000c68 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000c68:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c6a:	ea01 0203 	and.w	r2, r1, r3
 8000c6e:	ea21 0103 	bic.w	r1, r1, r3
 8000c72:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000c76:	6181      	str	r1, [r0, #24]
}
 8000c78:	4770      	bx	lr
	...

08000c7c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c7c:	2800      	cmp	r0, #0
 8000c7e:	f000 81e0 	beq.w	8001042 <HAL_RCC_OscConfig+0x3c6>
{
 8000c82:	b570      	push	{r4, r5, r6, lr}
 8000c84:	b082      	sub	sp, #8
 8000c86:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c88:	6803      	ldr	r3, [r0, #0]
 8000c8a:	f013 0f01 	tst.w	r3, #1
 8000c8e:	d03b      	beq.n	8000d08 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000c90:	4b9f      	ldr	r3, [pc, #636]	@ (8000f10 <HAL_RCC_OscConfig+0x294>)
 8000c92:	689b      	ldr	r3, [r3, #8]
 8000c94:	f003 030c 	and.w	r3, r3, #12
 8000c98:	2b04      	cmp	r3, #4
 8000c9a:	d02c      	beq.n	8000cf6 <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c9c:	4b9c      	ldr	r3, [pc, #624]	@ (8000f10 <HAL_RCC_OscConfig+0x294>)
 8000c9e:	689b      	ldr	r3, [r3, #8]
 8000ca0:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000ca4:	2b08      	cmp	r3, #8
 8000ca6:	d021      	beq.n	8000cec <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ca8:	6863      	ldr	r3, [r4, #4]
 8000caa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000cae:	d04f      	beq.n	8000d50 <HAL_RCC_OscConfig+0xd4>
 8000cb0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000cb4:	d052      	beq.n	8000d5c <HAL_RCC_OscConfig+0xe0>
 8000cb6:	4b96      	ldr	r3, [pc, #600]	@ (8000f10 <HAL_RCC_OscConfig+0x294>)
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8000cc6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000cc8:	6863      	ldr	r3, [r4, #4]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d050      	beq.n	8000d70 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cce:	f7ff fe71 	bl	80009b4 <HAL_GetTick>
 8000cd2:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cd4:	4b8e      	ldr	r3, [pc, #568]	@ (8000f10 <HAL_RCC_OscConfig+0x294>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000cdc:	d114      	bne.n	8000d08 <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cde:	f7ff fe69 	bl	80009b4 <HAL_GetTick>
 8000ce2:	1b40      	subs	r0, r0, r5
 8000ce4:	2864      	cmp	r0, #100	@ 0x64
 8000ce6:	d9f5      	bls.n	8000cd4 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8000ce8:	2003      	movs	r0, #3
 8000cea:	e1b1      	b.n	8001050 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000cec:	4b88      	ldr	r3, [pc, #544]	@ (8000f10 <HAL_RCC_OscConfig+0x294>)
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8000cf4:	d0d8      	beq.n	8000ca8 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cf6:	4b86      	ldr	r3, [pc, #536]	@ (8000f10 <HAL_RCC_OscConfig+0x294>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000cfe:	d003      	beq.n	8000d08 <HAL_RCC_OscConfig+0x8c>
 8000d00:	6863      	ldr	r3, [r4, #4]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f000 819f 	beq.w	8001046 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d08:	6823      	ldr	r3, [r4, #0]
 8000d0a:	f013 0f02 	tst.w	r3, #2
 8000d0e:	d054      	beq.n	8000dba <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000d10:	4b7f      	ldr	r3, [pc, #508]	@ (8000f10 <HAL_RCC_OscConfig+0x294>)
 8000d12:	689b      	ldr	r3, [r3, #8]
 8000d14:	f013 0f0c 	tst.w	r3, #12
 8000d18:	d03e      	beq.n	8000d98 <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d1a:	4b7d      	ldr	r3, [pc, #500]	@ (8000f10 <HAL_RCC_OscConfig+0x294>)
 8000d1c:	689b      	ldr	r3, [r3, #8]
 8000d1e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000d22:	2b08      	cmp	r3, #8
 8000d24:	d033      	beq.n	8000d8e <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000d26:	68e3      	ldr	r3, [r4, #12]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d068      	beq.n	8000dfe <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d2c:	4b79      	ldr	r3, [pc, #484]	@ (8000f14 <HAL_RCC_OscConfig+0x298>)
 8000d2e:	2201      	movs	r2, #1
 8000d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d32:	f7ff fe3f 	bl	80009b4 <HAL_GetTick>
 8000d36:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d38:	4b75      	ldr	r3, [pc, #468]	@ (8000f10 <HAL_RCC_OscConfig+0x294>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f013 0f02 	tst.w	r3, #2
 8000d40:	d154      	bne.n	8000dec <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d42:	f7ff fe37 	bl	80009b4 <HAL_GetTick>
 8000d46:	1b40      	subs	r0, r0, r5
 8000d48:	2802      	cmp	r0, #2
 8000d4a:	d9f5      	bls.n	8000d38 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8000d4c:	2003      	movs	r0, #3
 8000d4e:	e17f      	b.n	8001050 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d50:	4a6f      	ldr	r2, [pc, #444]	@ (8000f10 <HAL_RCC_OscConfig+0x294>)
 8000d52:	6813      	ldr	r3, [r2, #0]
 8000d54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d58:	6013      	str	r3, [r2, #0]
 8000d5a:	e7b5      	b.n	8000cc8 <HAL_RCC_OscConfig+0x4c>
 8000d5c:	4b6c      	ldr	r3, [pc, #432]	@ (8000f10 <HAL_RCC_OscConfig+0x294>)
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	e7ab      	b.n	8000cc8 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8000d70:	f7ff fe20 	bl	80009b4 <HAL_GetTick>
 8000d74:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d76:	4b66      	ldr	r3, [pc, #408]	@ (8000f10 <HAL_RCC_OscConfig+0x294>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000d7e:	d0c3      	beq.n	8000d08 <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d80:	f7ff fe18 	bl	80009b4 <HAL_GetTick>
 8000d84:	1b40      	subs	r0, r0, r5
 8000d86:	2864      	cmp	r0, #100	@ 0x64
 8000d88:	d9f5      	bls.n	8000d76 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8000d8a:	2003      	movs	r0, #3
 8000d8c:	e160      	b.n	8001050 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d8e:	4b60      	ldr	r3, [pc, #384]	@ (8000f10 <HAL_RCC_OscConfig+0x294>)
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8000d96:	d1c6      	bne.n	8000d26 <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d98:	4b5d      	ldr	r3, [pc, #372]	@ (8000f10 <HAL_RCC_OscConfig+0x294>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f013 0f02 	tst.w	r3, #2
 8000da0:	d003      	beq.n	8000daa <HAL_RCC_OscConfig+0x12e>
 8000da2:	68e3      	ldr	r3, [r4, #12]
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	f040 8150 	bne.w	800104a <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000daa:	4a59      	ldr	r2, [pc, #356]	@ (8000f10 <HAL_RCC_OscConfig+0x294>)
 8000dac:	6813      	ldr	r3, [r2, #0]
 8000dae:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8000db2:	6921      	ldr	r1, [r4, #16]
 8000db4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000db8:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dba:	6823      	ldr	r3, [r4, #0]
 8000dbc:	f013 0f08 	tst.w	r3, #8
 8000dc0:	d042      	beq.n	8000e48 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000dc2:	6963      	ldr	r3, [r4, #20]
 8000dc4:	b36b      	cbz	r3, 8000e22 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dc6:	4b53      	ldr	r3, [pc, #332]	@ (8000f14 <HAL_RCC_OscConfig+0x298>)
 8000dc8:	2201      	movs	r2, #1
 8000dca:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000dce:	f7ff fdf1 	bl	80009b4 <HAL_GetTick>
 8000dd2:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dd4:	4b4e      	ldr	r3, [pc, #312]	@ (8000f10 <HAL_RCC_OscConfig+0x294>)
 8000dd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000dd8:	f013 0f02 	tst.w	r3, #2
 8000ddc:	d134      	bne.n	8000e48 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000dde:	f7ff fde9 	bl	80009b4 <HAL_GetTick>
 8000de2:	1b40      	subs	r0, r0, r5
 8000de4:	2802      	cmp	r0, #2
 8000de6:	d9f5      	bls.n	8000dd4 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8000de8:	2003      	movs	r0, #3
 8000dea:	e131      	b.n	8001050 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dec:	4a48      	ldr	r2, [pc, #288]	@ (8000f10 <HAL_RCC_OscConfig+0x294>)
 8000dee:	6813      	ldr	r3, [r2, #0]
 8000df0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8000df4:	6921      	ldr	r1, [r4, #16]
 8000df6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000dfa:	6013      	str	r3, [r2, #0]
 8000dfc:	e7dd      	b.n	8000dba <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8000dfe:	4b45      	ldr	r3, [pc, #276]	@ (8000f14 <HAL_RCC_OscConfig+0x298>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e04:	f7ff fdd6 	bl	80009b4 <HAL_GetTick>
 8000e08:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e0a:	4b41      	ldr	r3, [pc, #260]	@ (8000f10 <HAL_RCC_OscConfig+0x294>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f013 0f02 	tst.w	r3, #2
 8000e12:	d0d2      	beq.n	8000dba <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e14:	f7ff fdce 	bl	80009b4 <HAL_GetTick>
 8000e18:	1b40      	subs	r0, r0, r5
 8000e1a:	2802      	cmp	r0, #2
 8000e1c:	d9f5      	bls.n	8000e0a <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8000e1e:	2003      	movs	r0, #3
 8000e20:	e116      	b.n	8001050 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e22:	4b3c      	ldr	r3, [pc, #240]	@ (8000f14 <HAL_RCC_OscConfig+0x298>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e2a:	f7ff fdc3 	bl	80009b4 <HAL_GetTick>
 8000e2e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e30:	4b37      	ldr	r3, [pc, #220]	@ (8000f10 <HAL_RCC_OscConfig+0x294>)
 8000e32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000e34:	f013 0f02 	tst.w	r3, #2
 8000e38:	d006      	beq.n	8000e48 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e3a:	f7ff fdbb 	bl	80009b4 <HAL_GetTick>
 8000e3e:	1b40      	subs	r0, r0, r5
 8000e40:	2802      	cmp	r0, #2
 8000e42:	d9f5      	bls.n	8000e30 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8000e44:	2003      	movs	r0, #3
 8000e46:	e103      	b.n	8001050 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e48:	6823      	ldr	r3, [r4, #0]
 8000e4a:	f013 0f04 	tst.w	r3, #4
 8000e4e:	d077      	beq.n	8000f40 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e50:	4b2f      	ldr	r3, [pc, #188]	@ (8000f10 <HAL_RCC_OscConfig+0x294>)
 8000e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e54:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8000e58:	d133      	bne.n	8000ec2 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	9301      	str	r3, [sp, #4]
 8000e5e:	4b2c      	ldr	r3, [pc, #176]	@ (8000f10 <HAL_RCC_OscConfig+0x294>)
 8000e60:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e62:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000e66:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e6e:	9301      	str	r3, [sp, #4]
 8000e70:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000e72:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e74:	4b28      	ldr	r3, [pc, #160]	@ (8000f18 <HAL_RCC_OscConfig+0x29c>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8000e7c:	d023      	beq.n	8000ec6 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e7e:	68a3      	ldr	r3, [r4, #8]
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d034      	beq.n	8000eee <HAL_RCC_OscConfig+0x272>
 8000e84:	2b05      	cmp	r3, #5
 8000e86:	d038      	beq.n	8000efa <HAL_RCC_OscConfig+0x27e>
 8000e88:	4b21      	ldr	r3, [pc, #132]	@ (8000f10 <HAL_RCC_OscConfig+0x294>)
 8000e8a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8000e8c:	f022 0201 	bic.w	r2, r2, #1
 8000e90:	671a      	str	r2, [r3, #112]	@ 0x70
 8000e92:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8000e94:	f022 0204 	bic.w	r2, r2, #4
 8000e98:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000e9a:	68a3      	ldr	r3, [r4, #8]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d03d      	beq.n	8000f1c <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ea0:	f7ff fd88 	bl	80009b4 <HAL_GetTick>
 8000ea4:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ea6:	4b1a      	ldr	r3, [pc, #104]	@ (8000f10 <HAL_RCC_OscConfig+0x294>)
 8000ea8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000eaa:	f013 0f02 	tst.w	r3, #2
 8000eae:	d146      	bne.n	8000f3e <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000eb0:	f7ff fd80 	bl	80009b4 <HAL_GetTick>
 8000eb4:	1b80      	subs	r0, r0, r6
 8000eb6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000eba:	4298      	cmp	r0, r3
 8000ebc:	d9f3      	bls.n	8000ea6 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8000ebe:	2003      	movs	r0, #3
 8000ec0:	e0c6      	b.n	8001050 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 8000ec2:	2500      	movs	r5, #0
 8000ec4:	e7d6      	b.n	8000e74 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ec6:	4a14      	ldr	r2, [pc, #80]	@ (8000f18 <HAL_RCC_OscConfig+0x29c>)
 8000ec8:	6813      	ldr	r3, [r2, #0]
 8000eca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ece:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000ed0:	f7ff fd70 	bl	80009b4 <HAL_GetTick>
 8000ed4:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ed6:	4b10      	ldr	r3, [pc, #64]	@ (8000f18 <HAL_RCC_OscConfig+0x29c>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8000ede:	d1ce      	bne.n	8000e7e <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ee0:	f7ff fd68 	bl	80009b4 <HAL_GetTick>
 8000ee4:	1b80      	subs	r0, r0, r6
 8000ee6:	2802      	cmp	r0, #2
 8000ee8:	d9f5      	bls.n	8000ed6 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8000eea:	2003      	movs	r0, #3
 8000eec:	e0b0      	b.n	8001050 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000eee:	4a08      	ldr	r2, [pc, #32]	@ (8000f10 <HAL_RCC_OscConfig+0x294>)
 8000ef0:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8000ef2:	f043 0301 	orr.w	r3, r3, #1
 8000ef6:	6713      	str	r3, [r2, #112]	@ 0x70
 8000ef8:	e7cf      	b.n	8000e9a <HAL_RCC_OscConfig+0x21e>
 8000efa:	4b05      	ldr	r3, [pc, #20]	@ (8000f10 <HAL_RCC_OscConfig+0x294>)
 8000efc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8000efe:	f042 0204 	orr.w	r2, r2, #4
 8000f02:	671a      	str	r2, [r3, #112]	@ 0x70
 8000f04:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8000f06:	f042 0201 	orr.w	r2, r2, #1
 8000f0a:	671a      	str	r2, [r3, #112]	@ 0x70
 8000f0c:	e7c5      	b.n	8000e9a <HAL_RCC_OscConfig+0x21e>
 8000f0e:	bf00      	nop
 8000f10:	40023800 	.word	0x40023800
 8000f14:	42470000 	.word	0x42470000
 8000f18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f1c:	f7ff fd4a 	bl	80009b4 <HAL_GetTick>
 8000f20:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f22:	4b52      	ldr	r3, [pc, #328]	@ (800106c <HAL_RCC_OscConfig+0x3f0>)
 8000f24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000f26:	f013 0f02 	tst.w	r3, #2
 8000f2a:	d008      	beq.n	8000f3e <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f2c:	f7ff fd42 	bl	80009b4 <HAL_GetTick>
 8000f30:	1b80      	subs	r0, r0, r6
 8000f32:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000f36:	4298      	cmp	r0, r3
 8000f38:	d9f3      	bls.n	8000f22 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8000f3a:	2003      	movs	r0, #3
 8000f3c:	e088      	b.n	8001050 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8000f3e:	b9ed      	cbnz	r5, 8000f7c <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f40:	69a3      	ldr	r3, [r4, #24]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	f000 8083 	beq.w	800104e <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000f48:	4a48      	ldr	r2, [pc, #288]	@ (800106c <HAL_RCC_OscConfig+0x3f0>)
 8000f4a:	6892      	ldr	r2, [r2, #8]
 8000f4c:	f002 020c 	and.w	r2, r2, #12
 8000f50:	2a08      	cmp	r2, #8
 8000f52:	d051      	beq.n	8000ff8 <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d017      	beq.n	8000f88 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f58:	4b45      	ldr	r3, [pc, #276]	@ (8001070 <HAL_RCC_OscConfig+0x3f4>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f5e:	f7ff fd29 	bl	80009b4 <HAL_GetTick>
 8000f62:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f64:	4b41      	ldr	r3, [pc, #260]	@ (800106c <HAL_RCC_OscConfig+0x3f0>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8000f6c:	d042      	beq.n	8000ff4 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f6e:	f7ff fd21 	bl	80009b4 <HAL_GetTick>
 8000f72:	1b00      	subs	r0, r0, r4
 8000f74:	2802      	cmp	r0, #2
 8000f76:	d9f5      	bls.n	8000f64 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8000f78:	2003      	movs	r0, #3
 8000f7a:	e069      	b.n	8001050 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f7c:	4a3b      	ldr	r2, [pc, #236]	@ (800106c <HAL_RCC_OscConfig+0x3f0>)
 8000f7e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8000f80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000f84:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f86:	e7db      	b.n	8000f40 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8000f88:	4b39      	ldr	r3, [pc, #228]	@ (8001070 <HAL_RCC_OscConfig+0x3f4>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8000f8e:	f7ff fd11 	bl	80009b4 <HAL_GetTick>
 8000f92:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f94:	4b35      	ldr	r3, [pc, #212]	@ (800106c <HAL_RCC_OscConfig+0x3f0>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8000f9c:	d006      	beq.n	8000fac <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f9e:	f7ff fd09 	bl	80009b4 <HAL_GetTick>
 8000fa2:	1b40      	subs	r0, r0, r5
 8000fa4:	2802      	cmp	r0, #2
 8000fa6:	d9f5      	bls.n	8000f94 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8000fa8:	2003      	movs	r0, #3
 8000faa:	e051      	b.n	8001050 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000fac:	69e3      	ldr	r3, [r4, #28]
 8000fae:	6a22      	ldr	r2, [r4, #32]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8000fb4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000fb8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8000fba:	0852      	lsrs	r2, r2, #1
 8000fbc:	3a01      	subs	r2, #1
 8000fbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000fc2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8000fc4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000fc8:	4a28      	ldr	r2, [pc, #160]	@ (800106c <HAL_RCC_OscConfig+0x3f0>)
 8000fca:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8000fcc:	4b28      	ldr	r3, [pc, #160]	@ (8001070 <HAL_RCC_OscConfig+0x3f4>)
 8000fce:	2201      	movs	r2, #1
 8000fd0:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8000fd2:	f7ff fcef 	bl	80009b4 <HAL_GetTick>
 8000fd6:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fd8:	4b24      	ldr	r3, [pc, #144]	@ (800106c <HAL_RCC_OscConfig+0x3f0>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8000fe0:	d106      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fe2:	f7ff fce7 	bl	80009b4 <HAL_GetTick>
 8000fe6:	1b00      	subs	r0, r0, r4
 8000fe8:	2802      	cmp	r0, #2
 8000fea:	d9f5      	bls.n	8000fd8 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8000fec:	2003      	movs	r0, #3
 8000fee:	e02f      	b.n	8001050 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8000ff0:	2000      	movs	r0, #0
 8000ff2:	e02d      	b.n	8001050 <HAL_RCC_OscConfig+0x3d4>
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	e02b      	b.n	8001050 <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d02b      	beq.n	8001054 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8000ffc:	4b1b      	ldr	r3, [pc, #108]	@ (800106c <HAL_RCC_OscConfig+0x3f0>)
 8000ffe:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001000:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8001004:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001006:	4291      	cmp	r1, r2
 8001008:	d126      	bne.n	8001058 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800100a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800100e:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001010:	428a      	cmp	r2, r1
 8001012:	d123      	bne.n	800105c <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001014:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001016:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 800101a:	401a      	ands	r2, r3
 800101c:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001020:	d11e      	bne.n	8001060 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001022:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8001026:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001028:	0852      	lsrs	r2, r2, #1
 800102a:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800102c:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001030:	d118      	bne.n	8001064 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001032:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8001036:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001038:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 800103c:	d114      	bne.n	8001068 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 800103e:	2000      	movs	r0, #0
 8001040:	e006      	b.n	8001050 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 8001042:	2001      	movs	r0, #1
}
 8001044:	4770      	bx	lr
        return HAL_ERROR;
 8001046:	2001      	movs	r0, #1
 8001048:	e002      	b.n	8001050 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 800104a:	2001      	movs	r0, #1
 800104c:	e000      	b.n	8001050 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 800104e:	2000      	movs	r0, #0
}
 8001050:	b002      	add	sp, #8
 8001052:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001054:	2001      	movs	r0, #1
 8001056:	e7fb      	b.n	8001050 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8001058:	2001      	movs	r0, #1
 800105a:	e7f9      	b.n	8001050 <HAL_RCC_OscConfig+0x3d4>
 800105c:	2001      	movs	r0, #1
 800105e:	e7f7      	b.n	8001050 <HAL_RCC_OscConfig+0x3d4>
 8001060:	2001      	movs	r0, #1
 8001062:	e7f5      	b.n	8001050 <HAL_RCC_OscConfig+0x3d4>
 8001064:	2001      	movs	r0, #1
 8001066:	e7f3      	b.n	8001050 <HAL_RCC_OscConfig+0x3d4>
 8001068:	2001      	movs	r0, #1
 800106a:	e7f1      	b.n	8001050 <HAL_RCC_OscConfig+0x3d4>
 800106c:	40023800 	.word	0x40023800
 8001070:	42470000 	.word	0x42470000

08001074 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001074:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001076:	4b26      	ldr	r3, [pc, #152]	@ (8001110 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	f003 030c 	and.w	r3, r3, #12
 800107e:	2b04      	cmp	r3, #4
 8001080:	d041      	beq.n	8001106 <HAL_RCC_GetSysClockFreq+0x92>
 8001082:	2b08      	cmp	r3, #8
 8001084:	d141      	bne.n	800110a <HAL_RCC_GetSysClockFreq+0x96>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001086:	4b22      	ldr	r3, [pc, #136]	@ (8001110 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001088:	685a      	ldr	r2, [r3, #4]
 800108a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001094:	d012      	beq.n	80010bc <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001096:	4b1e      	ldr	r3, [pc, #120]	@ (8001110 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001098:	6859      	ldr	r1, [r3, #4]
 800109a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800109e:	481d      	ldr	r0, [pc, #116]	@ (8001114 <HAL_RCC_GetSysClockFreq+0xa0>)
 80010a0:	2300      	movs	r3, #0
 80010a2:	fba1 0100 	umull	r0, r1, r1, r0
 80010a6:	f7ff f8eb 	bl	8000280 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80010aa:	4b19      	ldr	r3, [pc, #100]	@ (8001110 <HAL_RCC_GetSysClockFreq+0x9c>)
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80010b2:	3301      	adds	r3, #1
 80010b4:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 80010b6:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80010ba:	e027      	b.n	800110c <HAL_RCC_GetSysClockFreq+0x98>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80010bc:	4b14      	ldr	r3, [pc, #80]	@ (8001110 <HAL_RCC_GetSysClockFreq+0x9c>)
 80010be:	6858      	ldr	r0, [r3, #4]
 80010c0:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80010c4:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 80010c8:	ebbc 0c00 	subs.w	ip, ip, r0
 80010cc:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80010d0:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80010d4:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 80010d8:	ea4f 118c 	mov.w	r1, ip, lsl #6
 80010dc:	ebb1 010c 	subs.w	r1, r1, ip
 80010e0:	eb63 030e 	sbc.w	r3, r3, lr
 80010e4:	00db      	lsls	r3, r3, #3
 80010e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80010ea:	00c9      	lsls	r1, r1, #3
 80010ec:	eb11 0c00 	adds.w	ip, r1, r0
 80010f0:	f143 0300 	adc.w	r3, r3, #0
 80010f4:	0299      	lsls	r1, r3, #10
 80010f6:	2300      	movs	r3, #0
 80010f8:	ea4f 208c 	mov.w	r0, ip, lsl #10
 80010fc:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8001100:	f7ff f8be 	bl	8000280 <__aeabi_uldivmod>
 8001104:	e7d1      	b.n	80010aa <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 8001106:	4803      	ldr	r0, [pc, #12]	@ (8001114 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001108:	e000      	b.n	800110c <HAL_RCC_GetSysClockFreq+0x98>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800110a:	4803      	ldr	r0, [pc, #12]	@ (8001118 <HAL_RCC_GetSysClockFreq+0xa4>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800110c:	bd08      	pop	{r3, pc}
 800110e:	bf00      	nop
 8001110:	40023800 	.word	0x40023800
 8001114:	017d7840 	.word	0x017d7840
 8001118:	00f42400 	.word	0x00f42400

0800111c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800111c:	2800      	cmp	r0, #0
 800111e:	f000 809b 	beq.w	8001258 <HAL_RCC_ClockConfig+0x13c>
{
 8001122:	b570      	push	{r4, r5, r6, lr}
 8001124:	460d      	mov	r5, r1
 8001126:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001128:	4b4f      	ldr	r3, [pc, #316]	@ (8001268 <HAL_RCC_ClockConfig+0x14c>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 0307 	and.w	r3, r3, #7
 8001130:	428b      	cmp	r3, r1
 8001132:	d208      	bcs.n	8001146 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001134:	b2cb      	uxtb	r3, r1
 8001136:	4a4c      	ldr	r2, [pc, #304]	@ (8001268 <HAL_RCC_ClockConfig+0x14c>)
 8001138:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800113a:	6813      	ldr	r3, [r2, #0]
 800113c:	f003 0307 	and.w	r3, r3, #7
 8001140:	428b      	cmp	r3, r1
 8001142:	f040 808b 	bne.w	800125c <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001146:	6823      	ldr	r3, [r4, #0]
 8001148:	f013 0f02 	tst.w	r3, #2
 800114c:	d017      	beq.n	800117e <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800114e:	f013 0f04 	tst.w	r3, #4
 8001152:	d004      	beq.n	800115e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001154:	4a45      	ldr	r2, [pc, #276]	@ (800126c <HAL_RCC_ClockConfig+0x150>)
 8001156:	6893      	ldr	r3, [r2, #8]
 8001158:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800115c:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800115e:	6823      	ldr	r3, [r4, #0]
 8001160:	f013 0f08 	tst.w	r3, #8
 8001164:	d004      	beq.n	8001170 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001166:	4a41      	ldr	r2, [pc, #260]	@ (800126c <HAL_RCC_ClockConfig+0x150>)
 8001168:	6893      	ldr	r3, [r2, #8]
 800116a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800116e:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001170:	4a3e      	ldr	r2, [pc, #248]	@ (800126c <HAL_RCC_ClockConfig+0x150>)
 8001172:	6893      	ldr	r3, [r2, #8]
 8001174:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001178:	68a1      	ldr	r1, [r4, #8]
 800117a:	430b      	orrs	r3, r1
 800117c:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800117e:	6823      	ldr	r3, [r4, #0]
 8001180:	f013 0f01 	tst.w	r3, #1
 8001184:	d032      	beq.n	80011ec <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001186:	6863      	ldr	r3, [r4, #4]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d021      	beq.n	80011d0 <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800118c:	1e9a      	subs	r2, r3, #2
 800118e:	2a01      	cmp	r2, #1
 8001190:	d925      	bls.n	80011de <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001192:	4a36      	ldr	r2, [pc, #216]	@ (800126c <HAL_RCC_ClockConfig+0x150>)
 8001194:	6812      	ldr	r2, [r2, #0]
 8001196:	f012 0f02 	tst.w	r2, #2
 800119a:	d061      	beq.n	8001260 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800119c:	4933      	ldr	r1, [pc, #204]	@ (800126c <HAL_RCC_ClockConfig+0x150>)
 800119e:	688a      	ldr	r2, [r1, #8]
 80011a0:	f022 0203 	bic.w	r2, r2, #3
 80011a4:	4313      	orrs	r3, r2
 80011a6:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80011a8:	f7ff fc04 	bl	80009b4 <HAL_GetTick>
 80011ac:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011ae:	4b2f      	ldr	r3, [pc, #188]	@ (800126c <HAL_RCC_ClockConfig+0x150>)
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	f003 030c 	and.w	r3, r3, #12
 80011b6:	6862      	ldr	r2, [r4, #4]
 80011b8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80011bc:	d016      	beq.n	80011ec <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011be:	f7ff fbf9 	bl	80009b4 <HAL_GetTick>
 80011c2:	1b80      	subs	r0, r0, r6
 80011c4:	f241 3388 	movw	r3, #5000	@ 0x1388
 80011c8:	4298      	cmp	r0, r3
 80011ca:	d9f0      	bls.n	80011ae <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 80011cc:	2003      	movs	r0, #3
 80011ce:	e042      	b.n	8001256 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011d0:	4a26      	ldr	r2, [pc, #152]	@ (800126c <HAL_RCC_ClockConfig+0x150>)
 80011d2:	6812      	ldr	r2, [r2, #0]
 80011d4:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 80011d8:	d1e0      	bne.n	800119c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80011da:	2001      	movs	r0, #1
 80011dc:	e03b      	b.n	8001256 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011de:	4a23      	ldr	r2, [pc, #140]	@ (800126c <HAL_RCC_ClockConfig+0x150>)
 80011e0:	6812      	ldr	r2, [r2, #0]
 80011e2:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 80011e6:	d1d9      	bne.n	800119c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80011e8:	2001      	movs	r0, #1
 80011ea:	e034      	b.n	8001256 <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011ec:	4b1e      	ldr	r3, [pc, #120]	@ (8001268 <HAL_RCC_ClockConfig+0x14c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 0307 	and.w	r3, r3, #7
 80011f4:	42ab      	cmp	r3, r5
 80011f6:	d907      	bls.n	8001208 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011f8:	b2ea      	uxtb	r2, r5
 80011fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001268 <HAL_RCC_ClockConfig+0x14c>)
 80011fc:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 0307 	and.w	r3, r3, #7
 8001204:	42ab      	cmp	r3, r5
 8001206:	d12d      	bne.n	8001264 <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001208:	6823      	ldr	r3, [r4, #0]
 800120a:	f013 0f04 	tst.w	r3, #4
 800120e:	d006      	beq.n	800121e <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001210:	4a16      	ldr	r2, [pc, #88]	@ (800126c <HAL_RCC_ClockConfig+0x150>)
 8001212:	6893      	ldr	r3, [r2, #8]
 8001214:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8001218:	68e1      	ldr	r1, [r4, #12]
 800121a:	430b      	orrs	r3, r1
 800121c:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800121e:	6823      	ldr	r3, [r4, #0]
 8001220:	f013 0f08 	tst.w	r3, #8
 8001224:	d007      	beq.n	8001236 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001226:	4a11      	ldr	r2, [pc, #68]	@ (800126c <HAL_RCC_ClockConfig+0x150>)
 8001228:	6893      	ldr	r3, [r2, #8]
 800122a:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800122e:	6921      	ldr	r1, [r4, #16]
 8001230:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001234:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001236:	f7ff ff1d 	bl	8001074 <HAL_RCC_GetSysClockFreq>
 800123a:	4b0c      	ldr	r3, [pc, #48]	@ (800126c <HAL_RCC_ClockConfig+0x150>)
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001242:	4a0b      	ldr	r2, [pc, #44]	@ (8001270 <HAL_RCC_ClockConfig+0x154>)
 8001244:	5cd3      	ldrb	r3, [r2, r3]
 8001246:	40d8      	lsrs	r0, r3
 8001248:	4b0a      	ldr	r3, [pc, #40]	@ (8001274 <HAL_RCC_ClockConfig+0x158>)
 800124a:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800124c:	4b0a      	ldr	r3, [pc, #40]	@ (8001278 <HAL_RCC_ClockConfig+0x15c>)
 800124e:	6818      	ldr	r0, [r3, #0]
 8001250:	f7ff fb64 	bl	800091c <HAL_InitTick>
  return HAL_OK;
 8001254:	2000      	movs	r0, #0
}
 8001256:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001258:	2001      	movs	r0, #1
}
 800125a:	4770      	bx	lr
      return HAL_ERROR;
 800125c:	2001      	movs	r0, #1
 800125e:	e7fa      	b.n	8001256 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8001260:	2001      	movs	r0, #1
 8001262:	e7f8      	b.n	8001256 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8001264:	2001      	movs	r0, #1
 8001266:	e7f6      	b.n	8001256 <HAL_RCC_ClockConfig+0x13a>
 8001268:	40023c00 	.word	0x40023c00
 800126c:	40023800 	.word	0x40023800
 8001270:	08002574 	.word	0x08002574
 8001274:	20000000 	.word	0x20000000
 8001278:	20000008 	.word	0x20000008

0800127c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800127c:	4b01      	ldr	r3, [pc, #4]	@ (8001284 <HAL_RCC_GetHCLKFreq+0x8>)
 800127e:	6818      	ldr	r0, [r3, #0]
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	20000000 	.word	0x20000000

08001288 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001288:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800128a:	f7ff fff7 	bl	800127c <HAL_RCC_GetHCLKFreq>
 800128e:	4b04      	ldr	r3, [pc, #16]	@ (80012a0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001296:	4a03      	ldr	r2, [pc, #12]	@ (80012a4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001298:	5cd3      	ldrb	r3, [r2, r3]
}
 800129a:	40d8      	lsrs	r0, r3
 800129c:	bd08      	pop	{r3, pc}
 800129e:	bf00      	nop
 80012a0:	40023800 	.word	0x40023800
 80012a4:	0800256c 	.word	0x0800256c

080012a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80012a8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80012aa:	f7ff ffe7 	bl	800127c <HAL_RCC_GetHCLKFreq>
 80012ae:	4b04      	ldr	r3, [pc, #16]	@ (80012c0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80012b6:	4a03      	ldr	r2, [pc, #12]	@ (80012c4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80012b8:	5cd3      	ldrb	r3, [r2, r3]
}
 80012ba:	40d8      	lsrs	r0, r3
 80012bc:	bd08      	pop	{r3, pc}
 80012be:	bf00      	nop
 80012c0:	40023800 	.word	0x40023800
 80012c4:	0800256c 	.word	0x0800256c

080012c8 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80012c8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80012ca:	f102 030c 	add.w	r3, r2, #12
 80012ce:	e853 3f00 	ldrex	r3, [r3]
 80012d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80012d6:	320c      	adds	r2, #12
 80012d8:	e842 3100 	strex	r1, r3, [r2]
 80012dc:	2900      	cmp	r1, #0
 80012de:	d1f3      	bne.n	80012c8 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80012e0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80012e2:	f102 0314 	add.w	r3, r2, #20
 80012e6:	e853 3f00 	ldrex	r3, [r3]
 80012ea:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80012ee:	3214      	adds	r2, #20
 80012f0:	e842 3100 	strex	r1, r3, [r2]
 80012f4:	2900      	cmp	r1, #0
 80012f6:	d1f3      	bne.n	80012e0 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80012f8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d005      	beq.n	800130a <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80012fe:	2320      	movs	r3, #32
 8001300:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001304:	2300      	movs	r3, #0
 8001306:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8001308:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800130a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800130c:	f102 030c 	add.w	r3, r2, #12
 8001310:	e853 3f00 	ldrex	r3, [r3]
 8001314:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001318:	320c      	adds	r2, #12
 800131a:	e842 3100 	strex	r1, r3, [r2]
 800131e:	2900      	cmp	r1, #0
 8001320:	d1f3      	bne.n	800130a <UART_EndRxTransfer+0x42>
 8001322:	e7ec      	b.n	80012fe <UART_EndRxTransfer+0x36>

08001324 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001324:	b510      	push	{r4, lr}
 8001326:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001328:	6802      	ldr	r2, [r0, #0]
 800132a:	6913      	ldr	r3, [r2, #16]
 800132c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001330:	68c1      	ldr	r1, [r0, #12]
 8001332:	430b      	orrs	r3, r1
 8001334:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001336:	6883      	ldr	r3, [r0, #8]
 8001338:	6902      	ldr	r2, [r0, #16]
 800133a:	431a      	orrs	r2, r3
 800133c:	6943      	ldr	r3, [r0, #20]
 800133e:	431a      	orrs	r2, r3
 8001340:	69c3      	ldr	r3, [r0, #28]
 8001342:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8001344:	6801      	ldr	r1, [r0, #0]
 8001346:	68cb      	ldr	r3, [r1, #12]
 8001348:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 800134c:	f023 030c 	bic.w	r3, r3, #12
 8001350:	4313      	orrs	r3, r2
 8001352:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001354:	6802      	ldr	r2, [r0, #0]
 8001356:	6953      	ldr	r3, [r2, #20]
 8001358:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800135c:	6981      	ldr	r1, [r0, #24]
 800135e:	430b      	orrs	r3, r1
 8001360:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001362:	6803      	ldr	r3, [r0, #0]
 8001364:	4a31      	ldr	r2, [pc, #196]	@ (800142c <UART_SetConfig+0x108>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d006      	beq.n	8001378 <UART_SetConfig+0x54>
 800136a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800136e:	4293      	cmp	r3, r2
 8001370:	d002      	beq.n	8001378 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001372:	f7ff ff89 	bl	8001288 <HAL_RCC_GetPCLK1Freq>
 8001376:	e001      	b.n	800137c <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001378:	f7ff ff96 	bl	80012a8 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800137c:	69e3      	ldr	r3, [r4, #28]
 800137e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001382:	d029      	beq.n	80013d8 <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001384:	2100      	movs	r1, #0
 8001386:	1803      	adds	r3, r0, r0
 8001388:	4149      	adcs	r1, r1
 800138a:	181b      	adds	r3, r3, r0
 800138c:	f141 0100 	adc.w	r1, r1, #0
 8001390:	00c9      	lsls	r1, r1, #3
 8001392:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	1818      	adds	r0, r3, r0
 800139a:	6863      	ldr	r3, [r4, #4]
 800139c:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80013a0:	ea4f 7393 	mov.w	r3, r3, lsr #30
 80013a4:	f141 0100 	adc.w	r1, r1, #0
 80013a8:	f7fe ff6a 	bl	8000280 <__aeabi_uldivmod>
 80013ac:	4a20      	ldr	r2, [pc, #128]	@ (8001430 <UART_SetConfig+0x10c>)
 80013ae:	fba2 3100 	umull	r3, r1, r2, r0
 80013b2:	0949      	lsrs	r1, r1, #5
 80013b4:	2364      	movs	r3, #100	@ 0x64
 80013b6:	fb03 0311 	mls	r3, r3, r1, r0
 80013ba:	011b      	lsls	r3, r3, #4
 80013bc:	3332      	adds	r3, #50	@ 0x32
 80013be:	fba2 2303 	umull	r2, r3, r2, r3
 80013c2:	095b      	lsrs	r3, r3, #5
 80013c4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80013c8:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80013cc:	f003 030f 	and.w	r3, r3, #15
 80013d0:	6821      	ldr	r1, [r4, #0]
 80013d2:	4413      	add	r3, r2
 80013d4:	608b      	str	r3, [r1, #8]
  }
}
 80013d6:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80013d8:	2300      	movs	r3, #0
 80013da:	1802      	adds	r2, r0, r0
 80013dc:	eb43 0103 	adc.w	r1, r3, r3
 80013e0:	1812      	adds	r2, r2, r0
 80013e2:	f141 0100 	adc.w	r1, r1, #0
 80013e6:	00c9      	lsls	r1, r1, #3
 80013e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80013ec:	00d2      	lsls	r2, r2, #3
 80013ee:	1810      	adds	r0, r2, r0
 80013f0:	f141 0100 	adc.w	r1, r1, #0
 80013f4:	6862      	ldr	r2, [r4, #4]
 80013f6:	1892      	adds	r2, r2, r2
 80013f8:	415b      	adcs	r3, r3
 80013fa:	f7fe ff41 	bl	8000280 <__aeabi_uldivmod>
 80013fe:	4a0c      	ldr	r2, [pc, #48]	@ (8001430 <UART_SetConfig+0x10c>)
 8001400:	fba2 3100 	umull	r3, r1, r2, r0
 8001404:	0949      	lsrs	r1, r1, #5
 8001406:	2364      	movs	r3, #100	@ 0x64
 8001408:	fb03 0311 	mls	r3, r3, r1, r0
 800140c:	00db      	lsls	r3, r3, #3
 800140e:	3332      	adds	r3, #50	@ 0x32
 8001410:	fba2 2303 	umull	r2, r3, r2, r3
 8001414:	095b      	lsrs	r3, r3, #5
 8001416:	005a      	lsls	r2, r3, #1
 8001418:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 800141c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001420:	f003 0307 	and.w	r3, r3, #7
 8001424:	6821      	ldr	r1, [r4, #0]
 8001426:	4413      	add	r3, r2
 8001428:	608b      	str	r3, [r1, #8]
 800142a:	e7d4      	b.n	80013d6 <UART_SetConfig+0xb2>
 800142c:	40011000 	.word	0x40011000
 8001430:	51eb851f 	.word	0x51eb851f

08001434 <UART_WaitOnFlagUntilTimeout>:
{
 8001434:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001438:	b083      	sub	sp, #12
 800143a:	4605      	mov	r5, r0
 800143c:	460e      	mov	r6, r1
 800143e:	4617      	mov	r7, r2
 8001440:	4699      	mov	r9, r3
 8001442:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001446:	682b      	ldr	r3, [r5, #0]
 8001448:	681c      	ldr	r4, [r3, #0]
 800144a:	ea36 0404 	bics.w	r4, r6, r4
 800144e:	bf0c      	ite	eq
 8001450:	2401      	moveq	r4, #1
 8001452:	2400      	movne	r4, #0
 8001454:	42bc      	cmp	r4, r7
 8001456:	d128      	bne.n	80014aa <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 8001458:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 800145c:	d0f3      	beq.n	8001446 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800145e:	f7ff faa9 	bl	80009b4 <HAL_GetTick>
 8001462:	eba0 0009 	sub.w	r0, r0, r9
 8001466:	4540      	cmp	r0, r8
 8001468:	d823      	bhi.n	80014b2 <UART_WaitOnFlagUntilTimeout+0x7e>
 800146a:	f1b8 0f00 	cmp.w	r8, #0
 800146e:	d022      	beq.n	80014b6 <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001470:	682b      	ldr	r3, [r5, #0]
 8001472:	68da      	ldr	r2, [r3, #12]
 8001474:	f012 0f04 	tst.w	r2, #4
 8001478:	d0e5      	beq.n	8001446 <UART_WaitOnFlagUntilTimeout+0x12>
 800147a:	2e80      	cmp	r6, #128	@ 0x80
 800147c:	d0e3      	beq.n	8001446 <UART_WaitOnFlagUntilTimeout+0x12>
 800147e:	2e40      	cmp	r6, #64	@ 0x40
 8001480:	d0e1      	beq.n	8001446 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	f012 0f08 	tst.w	r2, #8
 8001488:	d0dd      	beq.n	8001446 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_OREFLAG(huart);
 800148a:	2400      	movs	r4, #0
 800148c:	9401      	str	r4, [sp, #4]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	9201      	str	r2, [sp, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	9301      	str	r3, [sp, #4]
 8001496:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 8001498:	4628      	mov	r0, r5
 800149a:	f7ff ff15 	bl	80012c8 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800149e:	2308      	movs	r3, #8
 80014a0:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 80014a2:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 80014a6:	2001      	movs	r0, #1
 80014a8:	e000      	b.n	80014ac <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 80014aa:	2000      	movs	r0, #0
}
 80014ac:	b003      	add	sp, #12
 80014ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 80014b2:	2003      	movs	r0, #3
 80014b4:	e7fa      	b.n	80014ac <UART_WaitOnFlagUntilTimeout+0x78>
 80014b6:	2003      	movs	r0, #3
 80014b8:	e7f8      	b.n	80014ac <UART_WaitOnFlagUntilTimeout+0x78>

080014ba <HAL_UART_Init>:
  if (huart == NULL)
 80014ba:	b360      	cbz	r0, 8001516 <HAL_UART_Init+0x5c>
{
 80014bc:	b510      	push	{r4, lr}
 80014be:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80014c0:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80014c4:	b313      	cbz	r3, 800150c <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 80014c6:	2324      	movs	r3, #36	@ 0x24
 80014c8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 80014cc:	6822      	ldr	r2, [r4, #0]
 80014ce:	68d3      	ldr	r3, [r2, #12]
 80014d0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80014d4:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80014d6:	4620      	mov	r0, r4
 80014d8:	f7ff ff24 	bl	8001324 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80014dc:	6822      	ldr	r2, [r4, #0]
 80014de:	6913      	ldr	r3, [r2, #16]
 80014e0:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 80014e4:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80014e6:	6822      	ldr	r2, [r4, #0]
 80014e8:	6953      	ldr	r3, [r2, #20]
 80014ea:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 80014ee:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80014f0:	6822      	ldr	r2, [r4, #0]
 80014f2:	68d3      	ldr	r3, [r2, #12]
 80014f4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80014f8:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014fa:	2000      	movs	r0, #0
 80014fc:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80014fe:	2320      	movs	r3, #32
 8001500:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001504:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001508:	6360      	str	r0, [r4, #52]	@ 0x34
}
 800150a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800150c:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8001510:	f7ff f94a 	bl	80007a8 <HAL_UART_MspInit>
 8001514:	e7d7      	b.n	80014c6 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8001516:	2001      	movs	r0, #1
}
 8001518:	4770      	bx	lr

0800151a <HAL_UART_Transmit>:
{
 800151a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001522:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8001526:	b2db      	uxtb	r3, r3
 8001528:	2b20      	cmp	r3, #32
 800152a:	d156      	bne.n	80015da <HAL_UART_Transmit+0xc0>
 800152c:	4604      	mov	r4, r0
 800152e:	460d      	mov	r5, r1
 8001530:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8001532:	2900      	cmp	r1, #0
 8001534:	d055      	beq.n	80015e2 <HAL_UART_Transmit+0xc8>
 8001536:	b90a      	cbnz	r2, 800153c <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 8001538:	2001      	movs	r0, #1
 800153a:	e04f      	b.n	80015dc <HAL_UART_Transmit+0xc2>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800153c:	2300      	movs	r3, #0
 800153e:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001540:	2321      	movs	r3, #33	@ 0x21
 8001542:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8001546:	f7ff fa35 	bl	80009b4 <HAL_GetTick>
 800154a:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 800154c:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001550:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001554:	68a3      	ldr	r3, [r4, #8]
 8001556:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800155a:	d002      	beq.n	8001562 <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 800155c:	f04f 0800 	mov.w	r8, #0
 8001560:	e014      	b.n	800158c <HAL_UART_Transmit+0x72>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001562:	6923      	ldr	r3, [r4, #16]
 8001564:	b32b      	cbz	r3, 80015b2 <HAL_UART_Transmit+0x98>
      pdata16bits = NULL;
 8001566:	f04f 0800 	mov.w	r8, #0
 800156a:	e00f      	b.n	800158c <HAL_UART_Transmit+0x72>
        huart->gState = HAL_UART_STATE_READY;
 800156c:	2320      	movs	r3, #32
 800156e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 8001572:	2003      	movs	r0, #3
 8001574:	e032      	b.n	80015dc <HAL_UART_Transmit+0xc2>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001576:	f838 3b02 	ldrh.w	r3, [r8], #2
 800157a:	6822      	ldr	r2, [r4, #0]
 800157c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001580:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8001582:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8001584:	b292      	uxth	r2, r2
 8001586:	3a01      	subs	r2, #1
 8001588:	b292      	uxth	r2, r2
 800158a:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800158c:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 800158e:	b29b      	uxth	r3, r3
 8001590:	b193      	cbz	r3, 80015b8 <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001592:	9600      	str	r6, [sp, #0]
 8001594:	463b      	mov	r3, r7
 8001596:	2200      	movs	r2, #0
 8001598:	2180      	movs	r1, #128	@ 0x80
 800159a:	4620      	mov	r0, r4
 800159c:	f7ff ff4a 	bl	8001434 <UART_WaitOnFlagUntilTimeout>
 80015a0:	2800      	cmp	r0, #0
 80015a2:	d1e3      	bne.n	800156c <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 80015a4:	2d00      	cmp	r5, #0
 80015a6:	d0e6      	beq.n	8001576 <HAL_UART_Transmit+0x5c>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80015a8:	f815 2b01 	ldrb.w	r2, [r5], #1
 80015ac:	6823      	ldr	r3, [r4, #0]
 80015ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80015b0:	e7e7      	b.n	8001582 <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 80015b2:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 80015b4:	2500      	movs	r5, #0
 80015b6:	e7e9      	b.n	800158c <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80015b8:	9600      	str	r6, [sp, #0]
 80015ba:	463b      	mov	r3, r7
 80015bc:	2200      	movs	r2, #0
 80015be:	2140      	movs	r1, #64	@ 0x40
 80015c0:	4620      	mov	r0, r4
 80015c2:	f7ff ff37 	bl	8001434 <UART_WaitOnFlagUntilTimeout>
 80015c6:	b918      	cbnz	r0, 80015d0 <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 80015c8:	2320      	movs	r3, #32
 80015ca:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 80015ce:	e005      	b.n	80015dc <HAL_UART_Transmit+0xc2>
      huart->gState = HAL_UART_STATE_READY;
 80015d0:	2320      	movs	r3, #32
 80015d2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 80015d6:	2003      	movs	r0, #3
 80015d8:	e000      	b.n	80015dc <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 80015da:	2002      	movs	r0, #2
}
 80015dc:	b002      	add	sp, #8
 80015de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 80015e2:	2001      	movs	r0, #1
 80015e4:	e7fa      	b.n	80015dc <HAL_UART_Transmit+0xc2>
	...

080015e8 <std>:
 80015e8:	2300      	movs	r3, #0
 80015ea:	b510      	push	{r4, lr}
 80015ec:	4604      	mov	r4, r0
 80015ee:	e9c0 3300 	strd	r3, r3, [r0]
 80015f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80015f6:	6083      	str	r3, [r0, #8]
 80015f8:	8181      	strh	r1, [r0, #12]
 80015fa:	6643      	str	r3, [r0, #100]	@ 0x64
 80015fc:	81c2      	strh	r2, [r0, #14]
 80015fe:	6183      	str	r3, [r0, #24]
 8001600:	4619      	mov	r1, r3
 8001602:	2208      	movs	r2, #8
 8001604:	305c      	adds	r0, #92	@ 0x5c
 8001606:	f000 f9f9 	bl	80019fc <memset>
 800160a:	4b0d      	ldr	r3, [pc, #52]	@ (8001640 <std+0x58>)
 800160c:	6263      	str	r3, [r4, #36]	@ 0x24
 800160e:	4b0d      	ldr	r3, [pc, #52]	@ (8001644 <std+0x5c>)
 8001610:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001612:	4b0d      	ldr	r3, [pc, #52]	@ (8001648 <std+0x60>)
 8001614:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001616:	4b0d      	ldr	r3, [pc, #52]	@ (800164c <std+0x64>)
 8001618:	6323      	str	r3, [r4, #48]	@ 0x30
 800161a:	4b0d      	ldr	r3, [pc, #52]	@ (8001650 <std+0x68>)
 800161c:	6224      	str	r4, [r4, #32]
 800161e:	429c      	cmp	r4, r3
 8001620:	d006      	beq.n	8001630 <std+0x48>
 8001622:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001626:	4294      	cmp	r4, r2
 8001628:	d002      	beq.n	8001630 <std+0x48>
 800162a:	33d0      	adds	r3, #208	@ 0xd0
 800162c:	429c      	cmp	r4, r3
 800162e:	d105      	bne.n	800163c <std+0x54>
 8001630:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001638:	f000 ba58 	b.w	8001aec <__retarget_lock_init_recursive>
 800163c:	bd10      	pop	{r4, pc}
 800163e:	bf00      	nop
 8001640:	0800184d 	.word	0x0800184d
 8001644:	0800186f 	.word	0x0800186f
 8001648:	080018a7 	.word	0x080018a7
 800164c:	080018cb 	.word	0x080018cb
 8001650:	200000d4 	.word	0x200000d4

08001654 <stdio_exit_handler>:
 8001654:	4a02      	ldr	r2, [pc, #8]	@ (8001660 <stdio_exit_handler+0xc>)
 8001656:	4903      	ldr	r1, [pc, #12]	@ (8001664 <stdio_exit_handler+0x10>)
 8001658:	4803      	ldr	r0, [pc, #12]	@ (8001668 <stdio_exit_handler+0x14>)
 800165a:	f000 b869 	b.w	8001730 <_fwalk_sglue>
 800165e:	bf00      	nop
 8001660:	2000000c 	.word	0x2000000c
 8001664:	0800238d 	.word	0x0800238d
 8001668:	2000001c 	.word	0x2000001c

0800166c <cleanup_stdio>:
 800166c:	6841      	ldr	r1, [r0, #4]
 800166e:	4b0c      	ldr	r3, [pc, #48]	@ (80016a0 <cleanup_stdio+0x34>)
 8001670:	4299      	cmp	r1, r3
 8001672:	b510      	push	{r4, lr}
 8001674:	4604      	mov	r4, r0
 8001676:	d001      	beq.n	800167c <cleanup_stdio+0x10>
 8001678:	f000 fe88 	bl	800238c <_fflush_r>
 800167c:	68a1      	ldr	r1, [r4, #8]
 800167e:	4b09      	ldr	r3, [pc, #36]	@ (80016a4 <cleanup_stdio+0x38>)
 8001680:	4299      	cmp	r1, r3
 8001682:	d002      	beq.n	800168a <cleanup_stdio+0x1e>
 8001684:	4620      	mov	r0, r4
 8001686:	f000 fe81 	bl	800238c <_fflush_r>
 800168a:	68e1      	ldr	r1, [r4, #12]
 800168c:	4b06      	ldr	r3, [pc, #24]	@ (80016a8 <cleanup_stdio+0x3c>)
 800168e:	4299      	cmp	r1, r3
 8001690:	d004      	beq.n	800169c <cleanup_stdio+0x30>
 8001692:	4620      	mov	r0, r4
 8001694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001698:	f000 be78 	b.w	800238c <_fflush_r>
 800169c:	bd10      	pop	{r4, pc}
 800169e:	bf00      	nop
 80016a0:	200000d4 	.word	0x200000d4
 80016a4:	2000013c 	.word	0x2000013c
 80016a8:	200001a4 	.word	0x200001a4

080016ac <global_stdio_init.part.0>:
 80016ac:	b510      	push	{r4, lr}
 80016ae:	4b0b      	ldr	r3, [pc, #44]	@ (80016dc <global_stdio_init.part.0+0x30>)
 80016b0:	4c0b      	ldr	r4, [pc, #44]	@ (80016e0 <global_stdio_init.part.0+0x34>)
 80016b2:	4a0c      	ldr	r2, [pc, #48]	@ (80016e4 <global_stdio_init.part.0+0x38>)
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	4620      	mov	r0, r4
 80016b8:	2200      	movs	r2, #0
 80016ba:	2104      	movs	r1, #4
 80016bc:	f7ff ff94 	bl	80015e8 <std>
 80016c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80016c4:	2201      	movs	r2, #1
 80016c6:	2109      	movs	r1, #9
 80016c8:	f7ff ff8e 	bl	80015e8 <std>
 80016cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80016d0:	2202      	movs	r2, #2
 80016d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80016d6:	2112      	movs	r1, #18
 80016d8:	f7ff bf86 	b.w	80015e8 <std>
 80016dc:	2000020c 	.word	0x2000020c
 80016e0:	200000d4 	.word	0x200000d4
 80016e4:	08001655 	.word	0x08001655

080016e8 <__sfp_lock_acquire>:
 80016e8:	4801      	ldr	r0, [pc, #4]	@ (80016f0 <__sfp_lock_acquire+0x8>)
 80016ea:	f000 ba00 	b.w	8001aee <__retarget_lock_acquire_recursive>
 80016ee:	bf00      	nop
 80016f0:	20000215 	.word	0x20000215

080016f4 <__sfp_lock_release>:
 80016f4:	4801      	ldr	r0, [pc, #4]	@ (80016fc <__sfp_lock_release+0x8>)
 80016f6:	f000 b9fb 	b.w	8001af0 <__retarget_lock_release_recursive>
 80016fa:	bf00      	nop
 80016fc:	20000215 	.word	0x20000215

08001700 <__sinit>:
 8001700:	b510      	push	{r4, lr}
 8001702:	4604      	mov	r4, r0
 8001704:	f7ff fff0 	bl	80016e8 <__sfp_lock_acquire>
 8001708:	6a23      	ldr	r3, [r4, #32]
 800170a:	b11b      	cbz	r3, 8001714 <__sinit+0x14>
 800170c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001710:	f7ff bff0 	b.w	80016f4 <__sfp_lock_release>
 8001714:	4b04      	ldr	r3, [pc, #16]	@ (8001728 <__sinit+0x28>)
 8001716:	6223      	str	r3, [r4, #32]
 8001718:	4b04      	ldr	r3, [pc, #16]	@ (800172c <__sinit+0x2c>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d1f5      	bne.n	800170c <__sinit+0xc>
 8001720:	f7ff ffc4 	bl	80016ac <global_stdio_init.part.0>
 8001724:	e7f2      	b.n	800170c <__sinit+0xc>
 8001726:	bf00      	nop
 8001728:	0800166d 	.word	0x0800166d
 800172c:	2000020c 	.word	0x2000020c

08001730 <_fwalk_sglue>:
 8001730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001734:	4607      	mov	r7, r0
 8001736:	4688      	mov	r8, r1
 8001738:	4614      	mov	r4, r2
 800173a:	2600      	movs	r6, #0
 800173c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001740:	f1b9 0901 	subs.w	r9, r9, #1
 8001744:	d505      	bpl.n	8001752 <_fwalk_sglue+0x22>
 8001746:	6824      	ldr	r4, [r4, #0]
 8001748:	2c00      	cmp	r4, #0
 800174a:	d1f7      	bne.n	800173c <_fwalk_sglue+0xc>
 800174c:	4630      	mov	r0, r6
 800174e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001752:	89ab      	ldrh	r3, [r5, #12]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d907      	bls.n	8001768 <_fwalk_sglue+0x38>
 8001758:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800175c:	3301      	adds	r3, #1
 800175e:	d003      	beq.n	8001768 <_fwalk_sglue+0x38>
 8001760:	4629      	mov	r1, r5
 8001762:	4638      	mov	r0, r7
 8001764:	47c0      	blx	r8
 8001766:	4306      	orrs	r6, r0
 8001768:	3568      	adds	r5, #104	@ 0x68
 800176a:	e7e9      	b.n	8001740 <_fwalk_sglue+0x10>

0800176c <iprintf>:
 800176c:	b40f      	push	{r0, r1, r2, r3}
 800176e:	b507      	push	{r0, r1, r2, lr}
 8001770:	4906      	ldr	r1, [pc, #24]	@ (800178c <iprintf+0x20>)
 8001772:	ab04      	add	r3, sp, #16
 8001774:	6808      	ldr	r0, [r1, #0]
 8001776:	f853 2b04 	ldr.w	r2, [r3], #4
 800177a:	6881      	ldr	r1, [r0, #8]
 800177c:	9301      	str	r3, [sp, #4]
 800177e:	f000 fadb 	bl	8001d38 <_vfiprintf_r>
 8001782:	b003      	add	sp, #12
 8001784:	f85d eb04 	ldr.w	lr, [sp], #4
 8001788:	b004      	add	sp, #16
 800178a:	4770      	bx	lr
 800178c:	20000018 	.word	0x20000018

08001790 <_puts_r>:
 8001790:	6a03      	ldr	r3, [r0, #32]
 8001792:	b570      	push	{r4, r5, r6, lr}
 8001794:	6884      	ldr	r4, [r0, #8]
 8001796:	4605      	mov	r5, r0
 8001798:	460e      	mov	r6, r1
 800179a:	b90b      	cbnz	r3, 80017a0 <_puts_r+0x10>
 800179c:	f7ff ffb0 	bl	8001700 <__sinit>
 80017a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80017a2:	07db      	lsls	r3, r3, #31
 80017a4:	d405      	bmi.n	80017b2 <_puts_r+0x22>
 80017a6:	89a3      	ldrh	r3, [r4, #12]
 80017a8:	0598      	lsls	r0, r3, #22
 80017aa:	d402      	bmi.n	80017b2 <_puts_r+0x22>
 80017ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80017ae:	f000 f99e 	bl	8001aee <__retarget_lock_acquire_recursive>
 80017b2:	89a3      	ldrh	r3, [r4, #12]
 80017b4:	0719      	lsls	r1, r3, #28
 80017b6:	d502      	bpl.n	80017be <_puts_r+0x2e>
 80017b8:	6923      	ldr	r3, [r4, #16]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d135      	bne.n	800182a <_puts_r+0x9a>
 80017be:	4621      	mov	r1, r4
 80017c0:	4628      	mov	r0, r5
 80017c2:	f000 f8c5 	bl	8001950 <__swsetup_r>
 80017c6:	b380      	cbz	r0, 800182a <_puts_r+0x9a>
 80017c8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80017cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80017ce:	07da      	lsls	r2, r3, #31
 80017d0:	d405      	bmi.n	80017de <_puts_r+0x4e>
 80017d2:	89a3      	ldrh	r3, [r4, #12]
 80017d4:	059b      	lsls	r3, r3, #22
 80017d6:	d402      	bmi.n	80017de <_puts_r+0x4e>
 80017d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80017da:	f000 f989 	bl	8001af0 <__retarget_lock_release_recursive>
 80017de:	4628      	mov	r0, r5
 80017e0:	bd70      	pop	{r4, r5, r6, pc}
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	da04      	bge.n	80017f0 <_puts_r+0x60>
 80017e6:	69a2      	ldr	r2, [r4, #24]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	dc17      	bgt.n	800181c <_puts_r+0x8c>
 80017ec:	290a      	cmp	r1, #10
 80017ee:	d015      	beq.n	800181c <_puts_r+0x8c>
 80017f0:	6823      	ldr	r3, [r4, #0]
 80017f2:	1c5a      	adds	r2, r3, #1
 80017f4:	6022      	str	r2, [r4, #0]
 80017f6:	7019      	strb	r1, [r3, #0]
 80017f8:	68a3      	ldr	r3, [r4, #8]
 80017fa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80017fe:	3b01      	subs	r3, #1
 8001800:	60a3      	str	r3, [r4, #8]
 8001802:	2900      	cmp	r1, #0
 8001804:	d1ed      	bne.n	80017e2 <_puts_r+0x52>
 8001806:	2b00      	cmp	r3, #0
 8001808:	da11      	bge.n	800182e <_puts_r+0x9e>
 800180a:	4622      	mov	r2, r4
 800180c:	210a      	movs	r1, #10
 800180e:	4628      	mov	r0, r5
 8001810:	f000 f85f 	bl	80018d2 <__swbuf_r>
 8001814:	3001      	adds	r0, #1
 8001816:	d0d7      	beq.n	80017c8 <_puts_r+0x38>
 8001818:	250a      	movs	r5, #10
 800181a:	e7d7      	b.n	80017cc <_puts_r+0x3c>
 800181c:	4622      	mov	r2, r4
 800181e:	4628      	mov	r0, r5
 8001820:	f000 f857 	bl	80018d2 <__swbuf_r>
 8001824:	3001      	adds	r0, #1
 8001826:	d1e7      	bne.n	80017f8 <_puts_r+0x68>
 8001828:	e7ce      	b.n	80017c8 <_puts_r+0x38>
 800182a:	3e01      	subs	r6, #1
 800182c:	e7e4      	b.n	80017f8 <_puts_r+0x68>
 800182e:	6823      	ldr	r3, [r4, #0]
 8001830:	1c5a      	adds	r2, r3, #1
 8001832:	6022      	str	r2, [r4, #0]
 8001834:	220a      	movs	r2, #10
 8001836:	701a      	strb	r2, [r3, #0]
 8001838:	e7ee      	b.n	8001818 <_puts_r+0x88>
	...

0800183c <puts>:
 800183c:	4b02      	ldr	r3, [pc, #8]	@ (8001848 <puts+0xc>)
 800183e:	4601      	mov	r1, r0
 8001840:	6818      	ldr	r0, [r3, #0]
 8001842:	f7ff bfa5 	b.w	8001790 <_puts_r>
 8001846:	bf00      	nop
 8001848:	20000018 	.word	0x20000018

0800184c <__sread>:
 800184c:	b510      	push	{r4, lr}
 800184e:	460c      	mov	r4, r1
 8001850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001854:	f000 f8fc 	bl	8001a50 <_read_r>
 8001858:	2800      	cmp	r0, #0
 800185a:	bfab      	itete	ge
 800185c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800185e:	89a3      	ldrhlt	r3, [r4, #12]
 8001860:	181b      	addge	r3, r3, r0
 8001862:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001866:	bfac      	ite	ge
 8001868:	6563      	strge	r3, [r4, #84]	@ 0x54
 800186a:	81a3      	strhlt	r3, [r4, #12]
 800186c:	bd10      	pop	{r4, pc}

0800186e <__swrite>:
 800186e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001872:	461f      	mov	r7, r3
 8001874:	898b      	ldrh	r3, [r1, #12]
 8001876:	05db      	lsls	r3, r3, #23
 8001878:	4605      	mov	r5, r0
 800187a:	460c      	mov	r4, r1
 800187c:	4616      	mov	r6, r2
 800187e:	d505      	bpl.n	800188c <__swrite+0x1e>
 8001880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001884:	2302      	movs	r3, #2
 8001886:	2200      	movs	r2, #0
 8001888:	f000 f8d0 	bl	8001a2c <_lseek_r>
 800188c:	89a3      	ldrh	r3, [r4, #12]
 800188e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001892:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001896:	81a3      	strh	r3, [r4, #12]
 8001898:	4632      	mov	r2, r6
 800189a:	463b      	mov	r3, r7
 800189c:	4628      	mov	r0, r5
 800189e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80018a2:	f000 b8e7 	b.w	8001a74 <_write_r>

080018a6 <__sseek>:
 80018a6:	b510      	push	{r4, lr}
 80018a8:	460c      	mov	r4, r1
 80018aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80018ae:	f000 f8bd 	bl	8001a2c <_lseek_r>
 80018b2:	1c43      	adds	r3, r0, #1
 80018b4:	89a3      	ldrh	r3, [r4, #12]
 80018b6:	bf15      	itete	ne
 80018b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80018ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80018be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80018c2:	81a3      	strheq	r3, [r4, #12]
 80018c4:	bf18      	it	ne
 80018c6:	81a3      	strhne	r3, [r4, #12]
 80018c8:	bd10      	pop	{r4, pc}

080018ca <__sclose>:
 80018ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80018ce:	f000 b89d 	b.w	8001a0c <_close_r>

080018d2 <__swbuf_r>:
 80018d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018d4:	460e      	mov	r6, r1
 80018d6:	4614      	mov	r4, r2
 80018d8:	4605      	mov	r5, r0
 80018da:	b118      	cbz	r0, 80018e4 <__swbuf_r+0x12>
 80018dc:	6a03      	ldr	r3, [r0, #32]
 80018de:	b90b      	cbnz	r3, 80018e4 <__swbuf_r+0x12>
 80018e0:	f7ff ff0e 	bl	8001700 <__sinit>
 80018e4:	69a3      	ldr	r3, [r4, #24]
 80018e6:	60a3      	str	r3, [r4, #8]
 80018e8:	89a3      	ldrh	r3, [r4, #12]
 80018ea:	071a      	lsls	r2, r3, #28
 80018ec:	d501      	bpl.n	80018f2 <__swbuf_r+0x20>
 80018ee:	6923      	ldr	r3, [r4, #16]
 80018f0:	b943      	cbnz	r3, 8001904 <__swbuf_r+0x32>
 80018f2:	4621      	mov	r1, r4
 80018f4:	4628      	mov	r0, r5
 80018f6:	f000 f82b 	bl	8001950 <__swsetup_r>
 80018fa:	b118      	cbz	r0, 8001904 <__swbuf_r+0x32>
 80018fc:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8001900:	4638      	mov	r0, r7
 8001902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001904:	6823      	ldr	r3, [r4, #0]
 8001906:	6922      	ldr	r2, [r4, #16]
 8001908:	1a98      	subs	r0, r3, r2
 800190a:	6963      	ldr	r3, [r4, #20]
 800190c:	b2f6      	uxtb	r6, r6
 800190e:	4283      	cmp	r3, r0
 8001910:	4637      	mov	r7, r6
 8001912:	dc05      	bgt.n	8001920 <__swbuf_r+0x4e>
 8001914:	4621      	mov	r1, r4
 8001916:	4628      	mov	r0, r5
 8001918:	f000 fd38 	bl	800238c <_fflush_r>
 800191c:	2800      	cmp	r0, #0
 800191e:	d1ed      	bne.n	80018fc <__swbuf_r+0x2a>
 8001920:	68a3      	ldr	r3, [r4, #8]
 8001922:	3b01      	subs	r3, #1
 8001924:	60a3      	str	r3, [r4, #8]
 8001926:	6823      	ldr	r3, [r4, #0]
 8001928:	1c5a      	adds	r2, r3, #1
 800192a:	6022      	str	r2, [r4, #0]
 800192c:	701e      	strb	r6, [r3, #0]
 800192e:	6962      	ldr	r2, [r4, #20]
 8001930:	1c43      	adds	r3, r0, #1
 8001932:	429a      	cmp	r2, r3
 8001934:	d004      	beq.n	8001940 <__swbuf_r+0x6e>
 8001936:	89a3      	ldrh	r3, [r4, #12]
 8001938:	07db      	lsls	r3, r3, #31
 800193a:	d5e1      	bpl.n	8001900 <__swbuf_r+0x2e>
 800193c:	2e0a      	cmp	r6, #10
 800193e:	d1df      	bne.n	8001900 <__swbuf_r+0x2e>
 8001940:	4621      	mov	r1, r4
 8001942:	4628      	mov	r0, r5
 8001944:	f000 fd22 	bl	800238c <_fflush_r>
 8001948:	2800      	cmp	r0, #0
 800194a:	d0d9      	beq.n	8001900 <__swbuf_r+0x2e>
 800194c:	e7d6      	b.n	80018fc <__swbuf_r+0x2a>
	...

08001950 <__swsetup_r>:
 8001950:	b538      	push	{r3, r4, r5, lr}
 8001952:	4b29      	ldr	r3, [pc, #164]	@ (80019f8 <__swsetup_r+0xa8>)
 8001954:	4605      	mov	r5, r0
 8001956:	6818      	ldr	r0, [r3, #0]
 8001958:	460c      	mov	r4, r1
 800195a:	b118      	cbz	r0, 8001964 <__swsetup_r+0x14>
 800195c:	6a03      	ldr	r3, [r0, #32]
 800195e:	b90b      	cbnz	r3, 8001964 <__swsetup_r+0x14>
 8001960:	f7ff fece 	bl	8001700 <__sinit>
 8001964:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001968:	0719      	lsls	r1, r3, #28
 800196a:	d422      	bmi.n	80019b2 <__swsetup_r+0x62>
 800196c:	06da      	lsls	r2, r3, #27
 800196e:	d407      	bmi.n	8001980 <__swsetup_r+0x30>
 8001970:	2209      	movs	r2, #9
 8001972:	602a      	str	r2, [r5, #0]
 8001974:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001978:	81a3      	strh	r3, [r4, #12]
 800197a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800197e:	e033      	b.n	80019e8 <__swsetup_r+0x98>
 8001980:	0758      	lsls	r0, r3, #29
 8001982:	d512      	bpl.n	80019aa <__swsetup_r+0x5a>
 8001984:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001986:	b141      	cbz	r1, 800199a <__swsetup_r+0x4a>
 8001988:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800198c:	4299      	cmp	r1, r3
 800198e:	d002      	beq.n	8001996 <__swsetup_r+0x46>
 8001990:	4628      	mov	r0, r5
 8001992:	f000 f8af 	bl	8001af4 <_free_r>
 8001996:	2300      	movs	r3, #0
 8001998:	6363      	str	r3, [r4, #52]	@ 0x34
 800199a:	89a3      	ldrh	r3, [r4, #12]
 800199c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80019a0:	81a3      	strh	r3, [r4, #12]
 80019a2:	2300      	movs	r3, #0
 80019a4:	6063      	str	r3, [r4, #4]
 80019a6:	6923      	ldr	r3, [r4, #16]
 80019a8:	6023      	str	r3, [r4, #0]
 80019aa:	89a3      	ldrh	r3, [r4, #12]
 80019ac:	f043 0308 	orr.w	r3, r3, #8
 80019b0:	81a3      	strh	r3, [r4, #12]
 80019b2:	6923      	ldr	r3, [r4, #16]
 80019b4:	b94b      	cbnz	r3, 80019ca <__swsetup_r+0x7a>
 80019b6:	89a3      	ldrh	r3, [r4, #12]
 80019b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80019bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80019c0:	d003      	beq.n	80019ca <__swsetup_r+0x7a>
 80019c2:	4621      	mov	r1, r4
 80019c4:	4628      	mov	r0, r5
 80019c6:	f000 fd2f 	bl	8002428 <__smakebuf_r>
 80019ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80019ce:	f013 0201 	ands.w	r2, r3, #1
 80019d2:	d00a      	beq.n	80019ea <__swsetup_r+0x9a>
 80019d4:	2200      	movs	r2, #0
 80019d6:	60a2      	str	r2, [r4, #8]
 80019d8:	6962      	ldr	r2, [r4, #20]
 80019da:	4252      	negs	r2, r2
 80019dc:	61a2      	str	r2, [r4, #24]
 80019de:	6922      	ldr	r2, [r4, #16]
 80019e0:	b942      	cbnz	r2, 80019f4 <__swsetup_r+0xa4>
 80019e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80019e6:	d1c5      	bne.n	8001974 <__swsetup_r+0x24>
 80019e8:	bd38      	pop	{r3, r4, r5, pc}
 80019ea:	0799      	lsls	r1, r3, #30
 80019ec:	bf58      	it	pl
 80019ee:	6962      	ldrpl	r2, [r4, #20]
 80019f0:	60a2      	str	r2, [r4, #8]
 80019f2:	e7f4      	b.n	80019de <__swsetup_r+0x8e>
 80019f4:	2000      	movs	r0, #0
 80019f6:	e7f7      	b.n	80019e8 <__swsetup_r+0x98>
 80019f8:	20000018 	.word	0x20000018

080019fc <memset>:
 80019fc:	4402      	add	r2, r0
 80019fe:	4603      	mov	r3, r0
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d100      	bne.n	8001a06 <memset+0xa>
 8001a04:	4770      	bx	lr
 8001a06:	f803 1b01 	strb.w	r1, [r3], #1
 8001a0a:	e7f9      	b.n	8001a00 <memset+0x4>

08001a0c <_close_r>:
 8001a0c:	b538      	push	{r3, r4, r5, lr}
 8001a0e:	4d06      	ldr	r5, [pc, #24]	@ (8001a28 <_close_r+0x1c>)
 8001a10:	2300      	movs	r3, #0
 8001a12:	4604      	mov	r4, r0
 8001a14:	4608      	mov	r0, r1
 8001a16:	602b      	str	r3, [r5, #0]
 8001a18:	f7fe ff1c 	bl	8000854 <_close>
 8001a1c:	1c43      	adds	r3, r0, #1
 8001a1e:	d102      	bne.n	8001a26 <_close_r+0x1a>
 8001a20:	682b      	ldr	r3, [r5, #0]
 8001a22:	b103      	cbz	r3, 8001a26 <_close_r+0x1a>
 8001a24:	6023      	str	r3, [r4, #0]
 8001a26:	bd38      	pop	{r3, r4, r5, pc}
 8001a28:	20000210 	.word	0x20000210

08001a2c <_lseek_r>:
 8001a2c:	b538      	push	{r3, r4, r5, lr}
 8001a2e:	4d07      	ldr	r5, [pc, #28]	@ (8001a4c <_lseek_r+0x20>)
 8001a30:	4604      	mov	r4, r0
 8001a32:	4608      	mov	r0, r1
 8001a34:	4611      	mov	r1, r2
 8001a36:	2200      	movs	r2, #0
 8001a38:	602a      	str	r2, [r5, #0]
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	f7fe ff14 	bl	8000868 <_lseek>
 8001a40:	1c43      	adds	r3, r0, #1
 8001a42:	d102      	bne.n	8001a4a <_lseek_r+0x1e>
 8001a44:	682b      	ldr	r3, [r5, #0]
 8001a46:	b103      	cbz	r3, 8001a4a <_lseek_r+0x1e>
 8001a48:	6023      	str	r3, [r4, #0]
 8001a4a:	bd38      	pop	{r3, r4, r5, pc}
 8001a4c:	20000210 	.word	0x20000210

08001a50 <_read_r>:
 8001a50:	b538      	push	{r3, r4, r5, lr}
 8001a52:	4d07      	ldr	r5, [pc, #28]	@ (8001a70 <_read_r+0x20>)
 8001a54:	4604      	mov	r4, r0
 8001a56:	4608      	mov	r0, r1
 8001a58:	4611      	mov	r1, r2
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	602a      	str	r2, [r5, #0]
 8001a5e:	461a      	mov	r2, r3
 8001a60:	f7fe fee8 	bl	8000834 <_read>
 8001a64:	1c43      	adds	r3, r0, #1
 8001a66:	d102      	bne.n	8001a6e <_read_r+0x1e>
 8001a68:	682b      	ldr	r3, [r5, #0]
 8001a6a:	b103      	cbz	r3, 8001a6e <_read_r+0x1e>
 8001a6c:	6023      	str	r3, [r4, #0]
 8001a6e:	bd38      	pop	{r3, r4, r5, pc}
 8001a70:	20000210 	.word	0x20000210

08001a74 <_write_r>:
 8001a74:	b538      	push	{r3, r4, r5, lr}
 8001a76:	4d07      	ldr	r5, [pc, #28]	@ (8001a94 <_write_r+0x20>)
 8001a78:	4604      	mov	r4, r0
 8001a7a:	4608      	mov	r0, r1
 8001a7c:	4611      	mov	r1, r2
 8001a7e:	2200      	movs	r2, #0
 8001a80:	602a      	str	r2, [r5, #0]
 8001a82:	461a      	mov	r2, r3
 8001a84:	f7fe fdb4 	bl	80005f0 <_write>
 8001a88:	1c43      	adds	r3, r0, #1
 8001a8a:	d102      	bne.n	8001a92 <_write_r+0x1e>
 8001a8c:	682b      	ldr	r3, [r5, #0]
 8001a8e:	b103      	cbz	r3, 8001a92 <_write_r+0x1e>
 8001a90:	6023      	str	r3, [r4, #0]
 8001a92:	bd38      	pop	{r3, r4, r5, pc}
 8001a94:	20000210 	.word	0x20000210

08001a98 <__errno>:
 8001a98:	4b01      	ldr	r3, [pc, #4]	@ (8001aa0 <__errno+0x8>)
 8001a9a:	6818      	ldr	r0, [r3, #0]
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	20000018 	.word	0x20000018

08001aa4 <__libc_init_array>:
 8001aa4:	b570      	push	{r4, r5, r6, lr}
 8001aa6:	4d0d      	ldr	r5, [pc, #52]	@ (8001adc <__libc_init_array+0x38>)
 8001aa8:	4c0d      	ldr	r4, [pc, #52]	@ (8001ae0 <__libc_init_array+0x3c>)
 8001aaa:	1b64      	subs	r4, r4, r5
 8001aac:	10a4      	asrs	r4, r4, #2
 8001aae:	2600      	movs	r6, #0
 8001ab0:	42a6      	cmp	r6, r4
 8001ab2:	d109      	bne.n	8001ac8 <__libc_init_array+0x24>
 8001ab4:	4d0b      	ldr	r5, [pc, #44]	@ (8001ae4 <__libc_init_array+0x40>)
 8001ab6:	4c0c      	ldr	r4, [pc, #48]	@ (8001ae8 <__libc_init_array+0x44>)
 8001ab8:	f000 fd24 	bl	8002504 <_init>
 8001abc:	1b64      	subs	r4, r4, r5
 8001abe:	10a4      	asrs	r4, r4, #2
 8001ac0:	2600      	movs	r6, #0
 8001ac2:	42a6      	cmp	r6, r4
 8001ac4:	d105      	bne.n	8001ad2 <__libc_init_array+0x2e>
 8001ac6:	bd70      	pop	{r4, r5, r6, pc}
 8001ac8:	f855 3b04 	ldr.w	r3, [r5], #4
 8001acc:	4798      	blx	r3
 8001ace:	3601      	adds	r6, #1
 8001ad0:	e7ee      	b.n	8001ab0 <__libc_init_array+0xc>
 8001ad2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ad6:	4798      	blx	r3
 8001ad8:	3601      	adds	r6, #1
 8001ada:	e7f2      	b.n	8001ac2 <__libc_init_array+0x1e>
 8001adc:	080025c0 	.word	0x080025c0
 8001ae0:	080025c0 	.word	0x080025c0
 8001ae4:	080025c0 	.word	0x080025c0
 8001ae8:	080025c4 	.word	0x080025c4

08001aec <__retarget_lock_init_recursive>:
 8001aec:	4770      	bx	lr

08001aee <__retarget_lock_acquire_recursive>:
 8001aee:	4770      	bx	lr

08001af0 <__retarget_lock_release_recursive>:
 8001af0:	4770      	bx	lr
	...

08001af4 <_free_r>:
 8001af4:	b538      	push	{r3, r4, r5, lr}
 8001af6:	4605      	mov	r5, r0
 8001af8:	2900      	cmp	r1, #0
 8001afa:	d041      	beq.n	8001b80 <_free_r+0x8c>
 8001afc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001b00:	1f0c      	subs	r4, r1, #4
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	bfb8      	it	lt
 8001b06:	18e4      	addlt	r4, r4, r3
 8001b08:	f000 f8e0 	bl	8001ccc <__malloc_lock>
 8001b0c:	4a1d      	ldr	r2, [pc, #116]	@ (8001b84 <_free_r+0x90>)
 8001b0e:	6813      	ldr	r3, [r2, #0]
 8001b10:	b933      	cbnz	r3, 8001b20 <_free_r+0x2c>
 8001b12:	6063      	str	r3, [r4, #4]
 8001b14:	6014      	str	r4, [r2, #0]
 8001b16:	4628      	mov	r0, r5
 8001b18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001b1c:	f000 b8dc 	b.w	8001cd8 <__malloc_unlock>
 8001b20:	42a3      	cmp	r3, r4
 8001b22:	d908      	bls.n	8001b36 <_free_r+0x42>
 8001b24:	6820      	ldr	r0, [r4, #0]
 8001b26:	1821      	adds	r1, r4, r0
 8001b28:	428b      	cmp	r3, r1
 8001b2a:	bf01      	itttt	eq
 8001b2c:	6819      	ldreq	r1, [r3, #0]
 8001b2e:	685b      	ldreq	r3, [r3, #4]
 8001b30:	1809      	addeq	r1, r1, r0
 8001b32:	6021      	streq	r1, [r4, #0]
 8001b34:	e7ed      	b.n	8001b12 <_free_r+0x1e>
 8001b36:	461a      	mov	r2, r3
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	b10b      	cbz	r3, 8001b40 <_free_r+0x4c>
 8001b3c:	42a3      	cmp	r3, r4
 8001b3e:	d9fa      	bls.n	8001b36 <_free_r+0x42>
 8001b40:	6811      	ldr	r1, [r2, #0]
 8001b42:	1850      	adds	r0, r2, r1
 8001b44:	42a0      	cmp	r0, r4
 8001b46:	d10b      	bne.n	8001b60 <_free_r+0x6c>
 8001b48:	6820      	ldr	r0, [r4, #0]
 8001b4a:	4401      	add	r1, r0
 8001b4c:	1850      	adds	r0, r2, r1
 8001b4e:	4283      	cmp	r3, r0
 8001b50:	6011      	str	r1, [r2, #0]
 8001b52:	d1e0      	bne.n	8001b16 <_free_r+0x22>
 8001b54:	6818      	ldr	r0, [r3, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	6053      	str	r3, [r2, #4]
 8001b5a:	4408      	add	r0, r1
 8001b5c:	6010      	str	r0, [r2, #0]
 8001b5e:	e7da      	b.n	8001b16 <_free_r+0x22>
 8001b60:	d902      	bls.n	8001b68 <_free_r+0x74>
 8001b62:	230c      	movs	r3, #12
 8001b64:	602b      	str	r3, [r5, #0]
 8001b66:	e7d6      	b.n	8001b16 <_free_r+0x22>
 8001b68:	6820      	ldr	r0, [r4, #0]
 8001b6a:	1821      	adds	r1, r4, r0
 8001b6c:	428b      	cmp	r3, r1
 8001b6e:	bf04      	itt	eq
 8001b70:	6819      	ldreq	r1, [r3, #0]
 8001b72:	685b      	ldreq	r3, [r3, #4]
 8001b74:	6063      	str	r3, [r4, #4]
 8001b76:	bf04      	itt	eq
 8001b78:	1809      	addeq	r1, r1, r0
 8001b7a:	6021      	streq	r1, [r4, #0]
 8001b7c:	6054      	str	r4, [r2, #4]
 8001b7e:	e7ca      	b.n	8001b16 <_free_r+0x22>
 8001b80:	bd38      	pop	{r3, r4, r5, pc}
 8001b82:	bf00      	nop
 8001b84:	2000021c 	.word	0x2000021c

08001b88 <sbrk_aligned>:
 8001b88:	b570      	push	{r4, r5, r6, lr}
 8001b8a:	4e0f      	ldr	r6, [pc, #60]	@ (8001bc8 <sbrk_aligned+0x40>)
 8001b8c:	460c      	mov	r4, r1
 8001b8e:	6831      	ldr	r1, [r6, #0]
 8001b90:	4605      	mov	r5, r0
 8001b92:	b911      	cbnz	r1, 8001b9a <sbrk_aligned+0x12>
 8001b94:	f000 fca6 	bl	80024e4 <_sbrk_r>
 8001b98:	6030      	str	r0, [r6, #0]
 8001b9a:	4621      	mov	r1, r4
 8001b9c:	4628      	mov	r0, r5
 8001b9e:	f000 fca1 	bl	80024e4 <_sbrk_r>
 8001ba2:	1c43      	adds	r3, r0, #1
 8001ba4:	d103      	bne.n	8001bae <sbrk_aligned+0x26>
 8001ba6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8001baa:	4620      	mov	r0, r4
 8001bac:	bd70      	pop	{r4, r5, r6, pc}
 8001bae:	1cc4      	adds	r4, r0, #3
 8001bb0:	f024 0403 	bic.w	r4, r4, #3
 8001bb4:	42a0      	cmp	r0, r4
 8001bb6:	d0f8      	beq.n	8001baa <sbrk_aligned+0x22>
 8001bb8:	1a21      	subs	r1, r4, r0
 8001bba:	4628      	mov	r0, r5
 8001bbc:	f000 fc92 	bl	80024e4 <_sbrk_r>
 8001bc0:	3001      	adds	r0, #1
 8001bc2:	d1f2      	bne.n	8001baa <sbrk_aligned+0x22>
 8001bc4:	e7ef      	b.n	8001ba6 <sbrk_aligned+0x1e>
 8001bc6:	bf00      	nop
 8001bc8:	20000218 	.word	0x20000218

08001bcc <_malloc_r>:
 8001bcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001bd0:	1ccd      	adds	r5, r1, #3
 8001bd2:	f025 0503 	bic.w	r5, r5, #3
 8001bd6:	3508      	adds	r5, #8
 8001bd8:	2d0c      	cmp	r5, #12
 8001bda:	bf38      	it	cc
 8001bdc:	250c      	movcc	r5, #12
 8001bde:	2d00      	cmp	r5, #0
 8001be0:	4606      	mov	r6, r0
 8001be2:	db01      	blt.n	8001be8 <_malloc_r+0x1c>
 8001be4:	42a9      	cmp	r1, r5
 8001be6:	d904      	bls.n	8001bf2 <_malloc_r+0x26>
 8001be8:	230c      	movs	r3, #12
 8001bea:	6033      	str	r3, [r6, #0]
 8001bec:	2000      	movs	r0, #0
 8001bee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001bf2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001cc8 <_malloc_r+0xfc>
 8001bf6:	f000 f869 	bl	8001ccc <__malloc_lock>
 8001bfa:	f8d8 3000 	ldr.w	r3, [r8]
 8001bfe:	461c      	mov	r4, r3
 8001c00:	bb44      	cbnz	r4, 8001c54 <_malloc_r+0x88>
 8001c02:	4629      	mov	r1, r5
 8001c04:	4630      	mov	r0, r6
 8001c06:	f7ff ffbf 	bl	8001b88 <sbrk_aligned>
 8001c0a:	1c43      	adds	r3, r0, #1
 8001c0c:	4604      	mov	r4, r0
 8001c0e:	d158      	bne.n	8001cc2 <_malloc_r+0xf6>
 8001c10:	f8d8 4000 	ldr.w	r4, [r8]
 8001c14:	4627      	mov	r7, r4
 8001c16:	2f00      	cmp	r7, #0
 8001c18:	d143      	bne.n	8001ca2 <_malloc_r+0xd6>
 8001c1a:	2c00      	cmp	r4, #0
 8001c1c:	d04b      	beq.n	8001cb6 <_malloc_r+0xea>
 8001c1e:	6823      	ldr	r3, [r4, #0]
 8001c20:	4639      	mov	r1, r7
 8001c22:	4630      	mov	r0, r6
 8001c24:	eb04 0903 	add.w	r9, r4, r3
 8001c28:	f000 fc5c 	bl	80024e4 <_sbrk_r>
 8001c2c:	4581      	cmp	r9, r0
 8001c2e:	d142      	bne.n	8001cb6 <_malloc_r+0xea>
 8001c30:	6821      	ldr	r1, [r4, #0]
 8001c32:	1a6d      	subs	r5, r5, r1
 8001c34:	4629      	mov	r1, r5
 8001c36:	4630      	mov	r0, r6
 8001c38:	f7ff ffa6 	bl	8001b88 <sbrk_aligned>
 8001c3c:	3001      	adds	r0, #1
 8001c3e:	d03a      	beq.n	8001cb6 <_malloc_r+0xea>
 8001c40:	6823      	ldr	r3, [r4, #0]
 8001c42:	442b      	add	r3, r5
 8001c44:	6023      	str	r3, [r4, #0]
 8001c46:	f8d8 3000 	ldr.w	r3, [r8]
 8001c4a:	685a      	ldr	r2, [r3, #4]
 8001c4c:	bb62      	cbnz	r2, 8001ca8 <_malloc_r+0xdc>
 8001c4e:	f8c8 7000 	str.w	r7, [r8]
 8001c52:	e00f      	b.n	8001c74 <_malloc_r+0xa8>
 8001c54:	6822      	ldr	r2, [r4, #0]
 8001c56:	1b52      	subs	r2, r2, r5
 8001c58:	d420      	bmi.n	8001c9c <_malloc_r+0xd0>
 8001c5a:	2a0b      	cmp	r2, #11
 8001c5c:	d917      	bls.n	8001c8e <_malloc_r+0xc2>
 8001c5e:	1961      	adds	r1, r4, r5
 8001c60:	42a3      	cmp	r3, r4
 8001c62:	6025      	str	r5, [r4, #0]
 8001c64:	bf18      	it	ne
 8001c66:	6059      	strne	r1, [r3, #4]
 8001c68:	6863      	ldr	r3, [r4, #4]
 8001c6a:	bf08      	it	eq
 8001c6c:	f8c8 1000 	streq.w	r1, [r8]
 8001c70:	5162      	str	r2, [r4, r5]
 8001c72:	604b      	str	r3, [r1, #4]
 8001c74:	4630      	mov	r0, r6
 8001c76:	f000 f82f 	bl	8001cd8 <__malloc_unlock>
 8001c7a:	f104 000b 	add.w	r0, r4, #11
 8001c7e:	1d23      	adds	r3, r4, #4
 8001c80:	f020 0007 	bic.w	r0, r0, #7
 8001c84:	1ac2      	subs	r2, r0, r3
 8001c86:	bf1c      	itt	ne
 8001c88:	1a1b      	subne	r3, r3, r0
 8001c8a:	50a3      	strne	r3, [r4, r2]
 8001c8c:	e7af      	b.n	8001bee <_malloc_r+0x22>
 8001c8e:	6862      	ldr	r2, [r4, #4]
 8001c90:	42a3      	cmp	r3, r4
 8001c92:	bf0c      	ite	eq
 8001c94:	f8c8 2000 	streq.w	r2, [r8]
 8001c98:	605a      	strne	r2, [r3, #4]
 8001c9a:	e7eb      	b.n	8001c74 <_malloc_r+0xa8>
 8001c9c:	4623      	mov	r3, r4
 8001c9e:	6864      	ldr	r4, [r4, #4]
 8001ca0:	e7ae      	b.n	8001c00 <_malloc_r+0x34>
 8001ca2:	463c      	mov	r4, r7
 8001ca4:	687f      	ldr	r7, [r7, #4]
 8001ca6:	e7b6      	b.n	8001c16 <_malloc_r+0x4a>
 8001ca8:	461a      	mov	r2, r3
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	42a3      	cmp	r3, r4
 8001cae:	d1fb      	bne.n	8001ca8 <_malloc_r+0xdc>
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	6053      	str	r3, [r2, #4]
 8001cb4:	e7de      	b.n	8001c74 <_malloc_r+0xa8>
 8001cb6:	230c      	movs	r3, #12
 8001cb8:	6033      	str	r3, [r6, #0]
 8001cba:	4630      	mov	r0, r6
 8001cbc:	f000 f80c 	bl	8001cd8 <__malloc_unlock>
 8001cc0:	e794      	b.n	8001bec <_malloc_r+0x20>
 8001cc2:	6005      	str	r5, [r0, #0]
 8001cc4:	e7d6      	b.n	8001c74 <_malloc_r+0xa8>
 8001cc6:	bf00      	nop
 8001cc8:	2000021c 	.word	0x2000021c

08001ccc <__malloc_lock>:
 8001ccc:	4801      	ldr	r0, [pc, #4]	@ (8001cd4 <__malloc_lock+0x8>)
 8001cce:	f7ff bf0e 	b.w	8001aee <__retarget_lock_acquire_recursive>
 8001cd2:	bf00      	nop
 8001cd4:	20000214 	.word	0x20000214

08001cd8 <__malloc_unlock>:
 8001cd8:	4801      	ldr	r0, [pc, #4]	@ (8001ce0 <__malloc_unlock+0x8>)
 8001cda:	f7ff bf09 	b.w	8001af0 <__retarget_lock_release_recursive>
 8001cde:	bf00      	nop
 8001ce0:	20000214 	.word	0x20000214

08001ce4 <__sfputc_r>:
 8001ce4:	6893      	ldr	r3, [r2, #8]
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	b410      	push	{r4}
 8001cec:	6093      	str	r3, [r2, #8]
 8001cee:	da08      	bge.n	8001d02 <__sfputc_r+0x1e>
 8001cf0:	6994      	ldr	r4, [r2, #24]
 8001cf2:	42a3      	cmp	r3, r4
 8001cf4:	db01      	blt.n	8001cfa <__sfputc_r+0x16>
 8001cf6:	290a      	cmp	r1, #10
 8001cf8:	d103      	bne.n	8001d02 <__sfputc_r+0x1e>
 8001cfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001cfe:	f7ff bde8 	b.w	80018d2 <__swbuf_r>
 8001d02:	6813      	ldr	r3, [r2, #0]
 8001d04:	1c58      	adds	r0, r3, #1
 8001d06:	6010      	str	r0, [r2, #0]
 8001d08:	7019      	strb	r1, [r3, #0]
 8001d0a:	4608      	mov	r0, r1
 8001d0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <__sfputs_r>:
 8001d12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d14:	4606      	mov	r6, r0
 8001d16:	460f      	mov	r7, r1
 8001d18:	4614      	mov	r4, r2
 8001d1a:	18d5      	adds	r5, r2, r3
 8001d1c:	42ac      	cmp	r4, r5
 8001d1e:	d101      	bne.n	8001d24 <__sfputs_r+0x12>
 8001d20:	2000      	movs	r0, #0
 8001d22:	e007      	b.n	8001d34 <__sfputs_r+0x22>
 8001d24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d28:	463a      	mov	r2, r7
 8001d2a:	4630      	mov	r0, r6
 8001d2c:	f7ff ffda 	bl	8001ce4 <__sfputc_r>
 8001d30:	1c43      	adds	r3, r0, #1
 8001d32:	d1f3      	bne.n	8001d1c <__sfputs_r+0xa>
 8001d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001d38 <_vfiprintf_r>:
 8001d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d3c:	460d      	mov	r5, r1
 8001d3e:	b09d      	sub	sp, #116	@ 0x74
 8001d40:	4614      	mov	r4, r2
 8001d42:	4698      	mov	r8, r3
 8001d44:	4606      	mov	r6, r0
 8001d46:	b118      	cbz	r0, 8001d50 <_vfiprintf_r+0x18>
 8001d48:	6a03      	ldr	r3, [r0, #32]
 8001d4a:	b90b      	cbnz	r3, 8001d50 <_vfiprintf_r+0x18>
 8001d4c:	f7ff fcd8 	bl	8001700 <__sinit>
 8001d50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001d52:	07d9      	lsls	r1, r3, #31
 8001d54:	d405      	bmi.n	8001d62 <_vfiprintf_r+0x2a>
 8001d56:	89ab      	ldrh	r3, [r5, #12]
 8001d58:	059a      	lsls	r2, r3, #22
 8001d5a:	d402      	bmi.n	8001d62 <_vfiprintf_r+0x2a>
 8001d5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001d5e:	f7ff fec6 	bl	8001aee <__retarget_lock_acquire_recursive>
 8001d62:	89ab      	ldrh	r3, [r5, #12]
 8001d64:	071b      	lsls	r3, r3, #28
 8001d66:	d501      	bpl.n	8001d6c <_vfiprintf_r+0x34>
 8001d68:	692b      	ldr	r3, [r5, #16]
 8001d6a:	b99b      	cbnz	r3, 8001d94 <_vfiprintf_r+0x5c>
 8001d6c:	4629      	mov	r1, r5
 8001d6e:	4630      	mov	r0, r6
 8001d70:	f7ff fdee 	bl	8001950 <__swsetup_r>
 8001d74:	b170      	cbz	r0, 8001d94 <_vfiprintf_r+0x5c>
 8001d76:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001d78:	07dc      	lsls	r4, r3, #31
 8001d7a:	d504      	bpl.n	8001d86 <_vfiprintf_r+0x4e>
 8001d7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d80:	b01d      	add	sp, #116	@ 0x74
 8001d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d86:	89ab      	ldrh	r3, [r5, #12]
 8001d88:	0598      	lsls	r0, r3, #22
 8001d8a:	d4f7      	bmi.n	8001d7c <_vfiprintf_r+0x44>
 8001d8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001d8e:	f7ff feaf 	bl	8001af0 <__retarget_lock_release_recursive>
 8001d92:	e7f3      	b.n	8001d7c <_vfiprintf_r+0x44>
 8001d94:	2300      	movs	r3, #0
 8001d96:	9309      	str	r3, [sp, #36]	@ 0x24
 8001d98:	2320      	movs	r3, #32
 8001d9a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001d9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001da2:	2330      	movs	r3, #48	@ 0x30
 8001da4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001f54 <_vfiprintf_r+0x21c>
 8001da8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001dac:	f04f 0901 	mov.w	r9, #1
 8001db0:	4623      	mov	r3, r4
 8001db2:	469a      	mov	sl, r3
 8001db4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001db8:	b10a      	cbz	r2, 8001dbe <_vfiprintf_r+0x86>
 8001dba:	2a25      	cmp	r2, #37	@ 0x25
 8001dbc:	d1f9      	bne.n	8001db2 <_vfiprintf_r+0x7a>
 8001dbe:	ebba 0b04 	subs.w	fp, sl, r4
 8001dc2:	d00b      	beq.n	8001ddc <_vfiprintf_r+0xa4>
 8001dc4:	465b      	mov	r3, fp
 8001dc6:	4622      	mov	r2, r4
 8001dc8:	4629      	mov	r1, r5
 8001dca:	4630      	mov	r0, r6
 8001dcc:	f7ff ffa1 	bl	8001d12 <__sfputs_r>
 8001dd0:	3001      	adds	r0, #1
 8001dd2:	f000 80a7 	beq.w	8001f24 <_vfiprintf_r+0x1ec>
 8001dd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001dd8:	445a      	add	r2, fp
 8001dda:	9209      	str	r2, [sp, #36]	@ 0x24
 8001ddc:	f89a 3000 	ldrb.w	r3, [sl]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	f000 809f 	beq.w	8001f24 <_vfiprintf_r+0x1ec>
 8001de6:	2300      	movs	r3, #0
 8001de8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001dec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001df0:	f10a 0a01 	add.w	sl, sl, #1
 8001df4:	9304      	str	r3, [sp, #16]
 8001df6:	9307      	str	r3, [sp, #28]
 8001df8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001dfc:	931a      	str	r3, [sp, #104]	@ 0x68
 8001dfe:	4654      	mov	r4, sl
 8001e00:	2205      	movs	r2, #5
 8001e02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001e06:	4853      	ldr	r0, [pc, #332]	@ (8001f54 <_vfiprintf_r+0x21c>)
 8001e08:	f7fe f9ea 	bl	80001e0 <memchr>
 8001e0c:	9a04      	ldr	r2, [sp, #16]
 8001e0e:	b9d8      	cbnz	r0, 8001e48 <_vfiprintf_r+0x110>
 8001e10:	06d1      	lsls	r1, r2, #27
 8001e12:	bf44      	itt	mi
 8001e14:	2320      	movmi	r3, #32
 8001e16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001e1a:	0713      	lsls	r3, r2, #28
 8001e1c:	bf44      	itt	mi
 8001e1e:	232b      	movmi	r3, #43	@ 0x2b
 8001e20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001e24:	f89a 3000 	ldrb.w	r3, [sl]
 8001e28:	2b2a      	cmp	r3, #42	@ 0x2a
 8001e2a:	d015      	beq.n	8001e58 <_vfiprintf_r+0x120>
 8001e2c:	9a07      	ldr	r2, [sp, #28]
 8001e2e:	4654      	mov	r4, sl
 8001e30:	2000      	movs	r0, #0
 8001e32:	f04f 0c0a 	mov.w	ip, #10
 8001e36:	4621      	mov	r1, r4
 8001e38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001e3c:	3b30      	subs	r3, #48	@ 0x30
 8001e3e:	2b09      	cmp	r3, #9
 8001e40:	d94b      	bls.n	8001eda <_vfiprintf_r+0x1a2>
 8001e42:	b1b0      	cbz	r0, 8001e72 <_vfiprintf_r+0x13a>
 8001e44:	9207      	str	r2, [sp, #28]
 8001e46:	e014      	b.n	8001e72 <_vfiprintf_r+0x13a>
 8001e48:	eba0 0308 	sub.w	r3, r0, r8
 8001e4c:	fa09 f303 	lsl.w	r3, r9, r3
 8001e50:	4313      	orrs	r3, r2
 8001e52:	9304      	str	r3, [sp, #16]
 8001e54:	46a2      	mov	sl, r4
 8001e56:	e7d2      	b.n	8001dfe <_vfiprintf_r+0xc6>
 8001e58:	9b03      	ldr	r3, [sp, #12]
 8001e5a:	1d19      	adds	r1, r3, #4
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	9103      	str	r1, [sp, #12]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	bfbb      	ittet	lt
 8001e64:	425b      	neglt	r3, r3
 8001e66:	f042 0202 	orrlt.w	r2, r2, #2
 8001e6a:	9307      	strge	r3, [sp, #28]
 8001e6c:	9307      	strlt	r3, [sp, #28]
 8001e6e:	bfb8      	it	lt
 8001e70:	9204      	strlt	r2, [sp, #16]
 8001e72:	7823      	ldrb	r3, [r4, #0]
 8001e74:	2b2e      	cmp	r3, #46	@ 0x2e
 8001e76:	d10a      	bne.n	8001e8e <_vfiprintf_r+0x156>
 8001e78:	7863      	ldrb	r3, [r4, #1]
 8001e7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8001e7c:	d132      	bne.n	8001ee4 <_vfiprintf_r+0x1ac>
 8001e7e:	9b03      	ldr	r3, [sp, #12]
 8001e80:	1d1a      	adds	r2, r3, #4
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	9203      	str	r2, [sp, #12]
 8001e86:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001e8a:	3402      	adds	r4, #2
 8001e8c:	9305      	str	r3, [sp, #20]
 8001e8e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001f64 <_vfiprintf_r+0x22c>
 8001e92:	7821      	ldrb	r1, [r4, #0]
 8001e94:	2203      	movs	r2, #3
 8001e96:	4650      	mov	r0, sl
 8001e98:	f7fe f9a2 	bl	80001e0 <memchr>
 8001e9c:	b138      	cbz	r0, 8001eae <_vfiprintf_r+0x176>
 8001e9e:	9b04      	ldr	r3, [sp, #16]
 8001ea0:	eba0 000a 	sub.w	r0, r0, sl
 8001ea4:	2240      	movs	r2, #64	@ 0x40
 8001ea6:	4082      	lsls	r2, r0
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	3401      	adds	r4, #1
 8001eac:	9304      	str	r3, [sp, #16]
 8001eae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001eb2:	4829      	ldr	r0, [pc, #164]	@ (8001f58 <_vfiprintf_r+0x220>)
 8001eb4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001eb8:	2206      	movs	r2, #6
 8001eba:	f7fe f991 	bl	80001e0 <memchr>
 8001ebe:	2800      	cmp	r0, #0
 8001ec0:	d03f      	beq.n	8001f42 <_vfiprintf_r+0x20a>
 8001ec2:	4b26      	ldr	r3, [pc, #152]	@ (8001f5c <_vfiprintf_r+0x224>)
 8001ec4:	bb1b      	cbnz	r3, 8001f0e <_vfiprintf_r+0x1d6>
 8001ec6:	9b03      	ldr	r3, [sp, #12]
 8001ec8:	3307      	adds	r3, #7
 8001eca:	f023 0307 	bic.w	r3, r3, #7
 8001ece:	3308      	adds	r3, #8
 8001ed0:	9303      	str	r3, [sp, #12]
 8001ed2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001ed4:	443b      	add	r3, r7
 8001ed6:	9309      	str	r3, [sp, #36]	@ 0x24
 8001ed8:	e76a      	b.n	8001db0 <_vfiprintf_r+0x78>
 8001eda:	fb0c 3202 	mla	r2, ip, r2, r3
 8001ede:	460c      	mov	r4, r1
 8001ee0:	2001      	movs	r0, #1
 8001ee2:	e7a8      	b.n	8001e36 <_vfiprintf_r+0xfe>
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	3401      	adds	r4, #1
 8001ee8:	9305      	str	r3, [sp, #20]
 8001eea:	4619      	mov	r1, r3
 8001eec:	f04f 0c0a 	mov.w	ip, #10
 8001ef0:	4620      	mov	r0, r4
 8001ef2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001ef6:	3a30      	subs	r2, #48	@ 0x30
 8001ef8:	2a09      	cmp	r2, #9
 8001efa:	d903      	bls.n	8001f04 <_vfiprintf_r+0x1cc>
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d0c6      	beq.n	8001e8e <_vfiprintf_r+0x156>
 8001f00:	9105      	str	r1, [sp, #20]
 8001f02:	e7c4      	b.n	8001e8e <_vfiprintf_r+0x156>
 8001f04:	fb0c 2101 	mla	r1, ip, r1, r2
 8001f08:	4604      	mov	r4, r0
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e7f0      	b.n	8001ef0 <_vfiprintf_r+0x1b8>
 8001f0e:	ab03      	add	r3, sp, #12
 8001f10:	9300      	str	r3, [sp, #0]
 8001f12:	462a      	mov	r2, r5
 8001f14:	4b12      	ldr	r3, [pc, #72]	@ (8001f60 <_vfiprintf_r+0x228>)
 8001f16:	a904      	add	r1, sp, #16
 8001f18:	4630      	mov	r0, r6
 8001f1a:	f3af 8000 	nop.w
 8001f1e:	4607      	mov	r7, r0
 8001f20:	1c78      	adds	r0, r7, #1
 8001f22:	d1d6      	bne.n	8001ed2 <_vfiprintf_r+0x19a>
 8001f24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001f26:	07d9      	lsls	r1, r3, #31
 8001f28:	d405      	bmi.n	8001f36 <_vfiprintf_r+0x1fe>
 8001f2a:	89ab      	ldrh	r3, [r5, #12]
 8001f2c:	059a      	lsls	r2, r3, #22
 8001f2e:	d402      	bmi.n	8001f36 <_vfiprintf_r+0x1fe>
 8001f30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001f32:	f7ff fddd 	bl	8001af0 <__retarget_lock_release_recursive>
 8001f36:	89ab      	ldrh	r3, [r5, #12]
 8001f38:	065b      	lsls	r3, r3, #25
 8001f3a:	f53f af1f 	bmi.w	8001d7c <_vfiprintf_r+0x44>
 8001f3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001f40:	e71e      	b.n	8001d80 <_vfiprintf_r+0x48>
 8001f42:	ab03      	add	r3, sp, #12
 8001f44:	9300      	str	r3, [sp, #0]
 8001f46:	462a      	mov	r2, r5
 8001f48:	4b05      	ldr	r3, [pc, #20]	@ (8001f60 <_vfiprintf_r+0x228>)
 8001f4a:	a904      	add	r1, sp, #16
 8001f4c:	4630      	mov	r0, r6
 8001f4e:	f000 f879 	bl	8002044 <_printf_i>
 8001f52:	e7e4      	b.n	8001f1e <_vfiprintf_r+0x1e6>
 8001f54:	08002584 	.word	0x08002584
 8001f58:	0800258e 	.word	0x0800258e
 8001f5c:	00000000 	.word	0x00000000
 8001f60:	08001d13 	.word	0x08001d13
 8001f64:	0800258a 	.word	0x0800258a

08001f68 <_printf_common>:
 8001f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f6c:	4616      	mov	r6, r2
 8001f6e:	4698      	mov	r8, r3
 8001f70:	688a      	ldr	r2, [r1, #8]
 8001f72:	690b      	ldr	r3, [r1, #16]
 8001f74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	bfb8      	it	lt
 8001f7c:	4613      	movlt	r3, r2
 8001f7e:	6033      	str	r3, [r6, #0]
 8001f80:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001f84:	4607      	mov	r7, r0
 8001f86:	460c      	mov	r4, r1
 8001f88:	b10a      	cbz	r2, 8001f8e <_printf_common+0x26>
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	6033      	str	r3, [r6, #0]
 8001f8e:	6823      	ldr	r3, [r4, #0]
 8001f90:	0699      	lsls	r1, r3, #26
 8001f92:	bf42      	ittt	mi
 8001f94:	6833      	ldrmi	r3, [r6, #0]
 8001f96:	3302      	addmi	r3, #2
 8001f98:	6033      	strmi	r3, [r6, #0]
 8001f9a:	6825      	ldr	r5, [r4, #0]
 8001f9c:	f015 0506 	ands.w	r5, r5, #6
 8001fa0:	d106      	bne.n	8001fb0 <_printf_common+0x48>
 8001fa2:	f104 0a19 	add.w	sl, r4, #25
 8001fa6:	68e3      	ldr	r3, [r4, #12]
 8001fa8:	6832      	ldr	r2, [r6, #0]
 8001faa:	1a9b      	subs	r3, r3, r2
 8001fac:	42ab      	cmp	r3, r5
 8001fae:	dc26      	bgt.n	8001ffe <_printf_common+0x96>
 8001fb0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001fb4:	6822      	ldr	r2, [r4, #0]
 8001fb6:	3b00      	subs	r3, #0
 8001fb8:	bf18      	it	ne
 8001fba:	2301      	movne	r3, #1
 8001fbc:	0692      	lsls	r2, r2, #26
 8001fbe:	d42b      	bmi.n	8002018 <_printf_common+0xb0>
 8001fc0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001fc4:	4641      	mov	r1, r8
 8001fc6:	4638      	mov	r0, r7
 8001fc8:	47c8      	blx	r9
 8001fca:	3001      	adds	r0, #1
 8001fcc:	d01e      	beq.n	800200c <_printf_common+0xa4>
 8001fce:	6823      	ldr	r3, [r4, #0]
 8001fd0:	6922      	ldr	r2, [r4, #16]
 8001fd2:	f003 0306 	and.w	r3, r3, #6
 8001fd6:	2b04      	cmp	r3, #4
 8001fd8:	bf02      	ittt	eq
 8001fda:	68e5      	ldreq	r5, [r4, #12]
 8001fdc:	6833      	ldreq	r3, [r6, #0]
 8001fde:	1aed      	subeq	r5, r5, r3
 8001fe0:	68a3      	ldr	r3, [r4, #8]
 8001fe2:	bf0c      	ite	eq
 8001fe4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001fe8:	2500      	movne	r5, #0
 8001fea:	4293      	cmp	r3, r2
 8001fec:	bfc4      	itt	gt
 8001fee:	1a9b      	subgt	r3, r3, r2
 8001ff0:	18ed      	addgt	r5, r5, r3
 8001ff2:	2600      	movs	r6, #0
 8001ff4:	341a      	adds	r4, #26
 8001ff6:	42b5      	cmp	r5, r6
 8001ff8:	d11a      	bne.n	8002030 <_printf_common+0xc8>
 8001ffa:	2000      	movs	r0, #0
 8001ffc:	e008      	b.n	8002010 <_printf_common+0xa8>
 8001ffe:	2301      	movs	r3, #1
 8002000:	4652      	mov	r2, sl
 8002002:	4641      	mov	r1, r8
 8002004:	4638      	mov	r0, r7
 8002006:	47c8      	blx	r9
 8002008:	3001      	adds	r0, #1
 800200a:	d103      	bne.n	8002014 <_printf_common+0xac>
 800200c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002014:	3501      	adds	r5, #1
 8002016:	e7c6      	b.n	8001fa6 <_printf_common+0x3e>
 8002018:	18e1      	adds	r1, r4, r3
 800201a:	1c5a      	adds	r2, r3, #1
 800201c:	2030      	movs	r0, #48	@ 0x30
 800201e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002022:	4422      	add	r2, r4
 8002024:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002028:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800202c:	3302      	adds	r3, #2
 800202e:	e7c7      	b.n	8001fc0 <_printf_common+0x58>
 8002030:	2301      	movs	r3, #1
 8002032:	4622      	mov	r2, r4
 8002034:	4641      	mov	r1, r8
 8002036:	4638      	mov	r0, r7
 8002038:	47c8      	blx	r9
 800203a:	3001      	adds	r0, #1
 800203c:	d0e6      	beq.n	800200c <_printf_common+0xa4>
 800203e:	3601      	adds	r6, #1
 8002040:	e7d9      	b.n	8001ff6 <_printf_common+0x8e>
	...

08002044 <_printf_i>:
 8002044:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002048:	7e0f      	ldrb	r7, [r1, #24]
 800204a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800204c:	2f78      	cmp	r7, #120	@ 0x78
 800204e:	4691      	mov	r9, r2
 8002050:	4680      	mov	r8, r0
 8002052:	460c      	mov	r4, r1
 8002054:	469a      	mov	sl, r3
 8002056:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800205a:	d807      	bhi.n	800206c <_printf_i+0x28>
 800205c:	2f62      	cmp	r7, #98	@ 0x62
 800205e:	d80a      	bhi.n	8002076 <_printf_i+0x32>
 8002060:	2f00      	cmp	r7, #0
 8002062:	f000 80d2 	beq.w	800220a <_printf_i+0x1c6>
 8002066:	2f58      	cmp	r7, #88	@ 0x58
 8002068:	f000 80b9 	beq.w	80021de <_printf_i+0x19a>
 800206c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002070:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002074:	e03a      	b.n	80020ec <_printf_i+0xa8>
 8002076:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800207a:	2b15      	cmp	r3, #21
 800207c:	d8f6      	bhi.n	800206c <_printf_i+0x28>
 800207e:	a101      	add	r1, pc, #4	@ (adr r1, 8002084 <_printf_i+0x40>)
 8002080:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002084:	080020dd 	.word	0x080020dd
 8002088:	080020f1 	.word	0x080020f1
 800208c:	0800206d 	.word	0x0800206d
 8002090:	0800206d 	.word	0x0800206d
 8002094:	0800206d 	.word	0x0800206d
 8002098:	0800206d 	.word	0x0800206d
 800209c:	080020f1 	.word	0x080020f1
 80020a0:	0800206d 	.word	0x0800206d
 80020a4:	0800206d 	.word	0x0800206d
 80020a8:	0800206d 	.word	0x0800206d
 80020ac:	0800206d 	.word	0x0800206d
 80020b0:	080021f1 	.word	0x080021f1
 80020b4:	0800211b 	.word	0x0800211b
 80020b8:	080021ab 	.word	0x080021ab
 80020bc:	0800206d 	.word	0x0800206d
 80020c0:	0800206d 	.word	0x0800206d
 80020c4:	08002213 	.word	0x08002213
 80020c8:	0800206d 	.word	0x0800206d
 80020cc:	0800211b 	.word	0x0800211b
 80020d0:	0800206d 	.word	0x0800206d
 80020d4:	0800206d 	.word	0x0800206d
 80020d8:	080021b3 	.word	0x080021b3
 80020dc:	6833      	ldr	r3, [r6, #0]
 80020de:	1d1a      	adds	r2, r3, #4
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	6032      	str	r2, [r6, #0]
 80020e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80020e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80020ec:	2301      	movs	r3, #1
 80020ee:	e09d      	b.n	800222c <_printf_i+0x1e8>
 80020f0:	6833      	ldr	r3, [r6, #0]
 80020f2:	6820      	ldr	r0, [r4, #0]
 80020f4:	1d19      	adds	r1, r3, #4
 80020f6:	6031      	str	r1, [r6, #0]
 80020f8:	0606      	lsls	r6, r0, #24
 80020fa:	d501      	bpl.n	8002100 <_printf_i+0xbc>
 80020fc:	681d      	ldr	r5, [r3, #0]
 80020fe:	e003      	b.n	8002108 <_printf_i+0xc4>
 8002100:	0645      	lsls	r5, r0, #25
 8002102:	d5fb      	bpl.n	80020fc <_printf_i+0xb8>
 8002104:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002108:	2d00      	cmp	r5, #0
 800210a:	da03      	bge.n	8002114 <_printf_i+0xd0>
 800210c:	232d      	movs	r3, #45	@ 0x2d
 800210e:	426d      	negs	r5, r5
 8002110:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002114:	4859      	ldr	r0, [pc, #356]	@ (800227c <_printf_i+0x238>)
 8002116:	230a      	movs	r3, #10
 8002118:	e011      	b.n	800213e <_printf_i+0xfa>
 800211a:	6821      	ldr	r1, [r4, #0]
 800211c:	6833      	ldr	r3, [r6, #0]
 800211e:	0608      	lsls	r0, r1, #24
 8002120:	f853 5b04 	ldr.w	r5, [r3], #4
 8002124:	d402      	bmi.n	800212c <_printf_i+0xe8>
 8002126:	0649      	lsls	r1, r1, #25
 8002128:	bf48      	it	mi
 800212a:	b2ad      	uxthmi	r5, r5
 800212c:	2f6f      	cmp	r7, #111	@ 0x6f
 800212e:	4853      	ldr	r0, [pc, #332]	@ (800227c <_printf_i+0x238>)
 8002130:	6033      	str	r3, [r6, #0]
 8002132:	bf14      	ite	ne
 8002134:	230a      	movne	r3, #10
 8002136:	2308      	moveq	r3, #8
 8002138:	2100      	movs	r1, #0
 800213a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800213e:	6866      	ldr	r6, [r4, #4]
 8002140:	60a6      	str	r6, [r4, #8]
 8002142:	2e00      	cmp	r6, #0
 8002144:	bfa2      	ittt	ge
 8002146:	6821      	ldrge	r1, [r4, #0]
 8002148:	f021 0104 	bicge.w	r1, r1, #4
 800214c:	6021      	strge	r1, [r4, #0]
 800214e:	b90d      	cbnz	r5, 8002154 <_printf_i+0x110>
 8002150:	2e00      	cmp	r6, #0
 8002152:	d04b      	beq.n	80021ec <_printf_i+0x1a8>
 8002154:	4616      	mov	r6, r2
 8002156:	fbb5 f1f3 	udiv	r1, r5, r3
 800215a:	fb03 5711 	mls	r7, r3, r1, r5
 800215e:	5dc7      	ldrb	r7, [r0, r7]
 8002160:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002164:	462f      	mov	r7, r5
 8002166:	42bb      	cmp	r3, r7
 8002168:	460d      	mov	r5, r1
 800216a:	d9f4      	bls.n	8002156 <_printf_i+0x112>
 800216c:	2b08      	cmp	r3, #8
 800216e:	d10b      	bne.n	8002188 <_printf_i+0x144>
 8002170:	6823      	ldr	r3, [r4, #0]
 8002172:	07df      	lsls	r7, r3, #31
 8002174:	d508      	bpl.n	8002188 <_printf_i+0x144>
 8002176:	6923      	ldr	r3, [r4, #16]
 8002178:	6861      	ldr	r1, [r4, #4]
 800217a:	4299      	cmp	r1, r3
 800217c:	bfde      	ittt	le
 800217e:	2330      	movle	r3, #48	@ 0x30
 8002180:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002184:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8002188:	1b92      	subs	r2, r2, r6
 800218a:	6122      	str	r2, [r4, #16]
 800218c:	f8cd a000 	str.w	sl, [sp]
 8002190:	464b      	mov	r3, r9
 8002192:	aa03      	add	r2, sp, #12
 8002194:	4621      	mov	r1, r4
 8002196:	4640      	mov	r0, r8
 8002198:	f7ff fee6 	bl	8001f68 <_printf_common>
 800219c:	3001      	adds	r0, #1
 800219e:	d14a      	bne.n	8002236 <_printf_i+0x1f2>
 80021a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80021a4:	b004      	add	sp, #16
 80021a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021aa:	6823      	ldr	r3, [r4, #0]
 80021ac:	f043 0320 	orr.w	r3, r3, #32
 80021b0:	6023      	str	r3, [r4, #0]
 80021b2:	4833      	ldr	r0, [pc, #204]	@ (8002280 <_printf_i+0x23c>)
 80021b4:	2778      	movs	r7, #120	@ 0x78
 80021b6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80021ba:	6823      	ldr	r3, [r4, #0]
 80021bc:	6831      	ldr	r1, [r6, #0]
 80021be:	061f      	lsls	r7, r3, #24
 80021c0:	f851 5b04 	ldr.w	r5, [r1], #4
 80021c4:	d402      	bmi.n	80021cc <_printf_i+0x188>
 80021c6:	065f      	lsls	r7, r3, #25
 80021c8:	bf48      	it	mi
 80021ca:	b2ad      	uxthmi	r5, r5
 80021cc:	6031      	str	r1, [r6, #0]
 80021ce:	07d9      	lsls	r1, r3, #31
 80021d0:	bf44      	itt	mi
 80021d2:	f043 0320 	orrmi.w	r3, r3, #32
 80021d6:	6023      	strmi	r3, [r4, #0]
 80021d8:	b11d      	cbz	r5, 80021e2 <_printf_i+0x19e>
 80021da:	2310      	movs	r3, #16
 80021dc:	e7ac      	b.n	8002138 <_printf_i+0xf4>
 80021de:	4827      	ldr	r0, [pc, #156]	@ (800227c <_printf_i+0x238>)
 80021e0:	e7e9      	b.n	80021b6 <_printf_i+0x172>
 80021e2:	6823      	ldr	r3, [r4, #0]
 80021e4:	f023 0320 	bic.w	r3, r3, #32
 80021e8:	6023      	str	r3, [r4, #0]
 80021ea:	e7f6      	b.n	80021da <_printf_i+0x196>
 80021ec:	4616      	mov	r6, r2
 80021ee:	e7bd      	b.n	800216c <_printf_i+0x128>
 80021f0:	6833      	ldr	r3, [r6, #0]
 80021f2:	6825      	ldr	r5, [r4, #0]
 80021f4:	6961      	ldr	r1, [r4, #20]
 80021f6:	1d18      	adds	r0, r3, #4
 80021f8:	6030      	str	r0, [r6, #0]
 80021fa:	062e      	lsls	r6, r5, #24
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	d501      	bpl.n	8002204 <_printf_i+0x1c0>
 8002200:	6019      	str	r1, [r3, #0]
 8002202:	e002      	b.n	800220a <_printf_i+0x1c6>
 8002204:	0668      	lsls	r0, r5, #25
 8002206:	d5fb      	bpl.n	8002200 <_printf_i+0x1bc>
 8002208:	8019      	strh	r1, [r3, #0]
 800220a:	2300      	movs	r3, #0
 800220c:	6123      	str	r3, [r4, #16]
 800220e:	4616      	mov	r6, r2
 8002210:	e7bc      	b.n	800218c <_printf_i+0x148>
 8002212:	6833      	ldr	r3, [r6, #0]
 8002214:	1d1a      	adds	r2, r3, #4
 8002216:	6032      	str	r2, [r6, #0]
 8002218:	681e      	ldr	r6, [r3, #0]
 800221a:	6862      	ldr	r2, [r4, #4]
 800221c:	2100      	movs	r1, #0
 800221e:	4630      	mov	r0, r6
 8002220:	f7fd ffde 	bl	80001e0 <memchr>
 8002224:	b108      	cbz	r0, 800222a <_printf_i+0x1e6>
 8002226:	1b80      	subs	r0, r0, r6
 8002228:	6060      	str	r0, [r4, #4]
 800222a:	6863      	ldr	r3, [r4, #4]
 800222c:	6123      	str	r3, [r4, #16]
 800222e:	2300      	movs	r3, #0
 8002230:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002234:	e7aa      	b.n	800218c <_printf_i+0x148>
 8002236:	6923      	ldr	r3, [r4, #16]
 8002238:	4632      	mov	r2, r6
 800223a:	4649      	mov	r1, r9
 800223c:	4640      	mov	r0, r8
 800223e:	47d0      	blx	sl
 8002240:	3001      	adds	r0, #1
 8002242:	d0ad      	beq.n	80021a0 <_printf_i+0x15c>
 8002244:	6823      	ldr	r3, [r4, #0]
 8002246:	079b      	lsls	r3, r3, #30
 8002248:	d413      	bmi.n	8002272 <_printf_i+0x22e>
 800224a:	68e0      	ldr	r0, [r4, #12]
 800224c:	9b03      	ldr	r3, [sp, #12]
 800224e:	4298      	cmp	r0, r3
 8002250:	bfb8      	it	lt
 8002252:	4618      	movlt	r0, r3
 8002254:	e7a6      	b.n	80021a4 <_printf_i+0x160>
 8002256:	2301      	movs	r3, #1
 8002258:	4632      	mov	r2, r6
 800225a:	4649      	mov	r1, r9
 800225c:	4640      	mov	r0, r8
 800225e:	47d0      	blx	sl
 8002260:	3001      	adds	r0, #1
 8002262:	d09d      	beq.n	80021a0 <_printf_i+0x15c>
 8002264:	3501      	adds	r5, #1
 8002266:	68e3      	ldr	r3, [r4, #12]
 8002268:	9903      	ldr	r1, [sp, #12]
 800226a:	1a5b      	subs	r3, r3, r1
 800226c:	42ab      	cmp	r3, r5
 800226e:	dcf2      	bgt.n	8002256 <_printf_i+0x212>
 8002270:	e7eb      	b.n	800224a <_printf_i+0x206>
 8002272:	2500      	movs	r5, #0
 8002274:	f104 0619 	add.w	r6, r4, #25
 8002278:	e7f5      	b.n	8002266 <_printf_i+0x222>
 800227a:	bf00      	nop
 800227c:	08002595 	.word	0x08002595
 8002280:	080025a6 	.word	0x080025a6

08002284 <__sflush_r>:
 8002284:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800228c:	0716      	lsls	r6, r2, #28
 800228e:	4605      	mov	r5, r0
 8002290:	460c      	mov	r4, r1
 8002292:	d454      	bmi.n	800233e <__sflush_r+0xba>
 8002294:	684b      	ldr	r3, [r1, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	dc02      	bgt.n	80022a0 <__sflush_r+0x1c>
 800229a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800229c:	2b00      	cmp	r3, #0
 800229e:	dd48      	ble.n	8002332 <__sflush_r+0xae>
 80022a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80022a2:	2e00      	cmp	r6, #0
 80022a4:	d045      	beq.n	8002332 <__sflush_r+0xae>
 80022a6:	2300      	movs	r3, #0
 80022a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80022ac:	682f      	ldr	r7, [r5, #0]
 80022ae:	6a21      	ldr	r1, [r4, #32]
 80022b0:	602b      	str	r3, [r5, #0]
 80022b2:	d030      	beq.n	8002316 <__sflush_r+0x92>
 80022b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80022b6:	89a3      	ldrh	r3, [r4, #12]
 80022b8:	0759      	lsls	r1, r3, #29
 80022ba:	d505      	bpl.n	80022c8 <__sflush_r+0x44>
 80022bc:	6863      	ldr	r3, [r4, #4]
 80022be:	1ad2      	subs	r2, r2, r3
 80022c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80022c2:	b10b      	cbz	r3, 80022c8 <__sflush_r+0x44>
 80022c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80022c6:	1ad2      	subs	r2, r2, r3
 80022c8:	2300      	movs	r3, #0
 80022ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80022cc:	6a21      	ldr	r1, [r4, #32]
 80022ce:	4628      	mov	r0, r5
 80022d0:	47b0      	blx	r6
 80022d2:	1c43      	adds	r3, r0, #1
 80022d4:	89a3      	ldrh	r3, [r4, #12]
 80022d6:	d106      	bne.n	80022e6 <__sflush_r+0x62>
 80022d8:	6829      	ldr	r1, [r5, #0]
 80022da:	291d      	cmp	r1, #29
 80022dc:	d82b      	bhi.n	8002336 <__sflush_r+0xb2>
 80022de:	4a2a      	ldr	r2, [pc, #168]	@ (8002388 <__sflush_r+0x104>)
 80022e0:	410a      	asrs	r2, r1
 80022e2:	07d6      	lsls	r6, r2, #31
 80022e4:	d427      	bmi.n	8002336 <__sflush_r+0xb2>
 80022e6:	2200      	movs	r2, #0
 80022e8:	6062      	str	r2, [r4, #4]
 80022ea:	04d9      	lsls	r1, r3, #19
 80022ec:	6922      	ldr	r2, [r4, #16]
 80022ee:	6022      	str	r2, [r4, #0]
 80022f0:	d504      	bpl.n	80022fc <__sflush_r+0x78>
 80022f2:	1c42      	adds	r2, r0, #1
 80022f4:	d101      	bne.n	80022fa <__sflush_r+0x76>
 80022f6:	682b      	ldr	r3, [r5, #0]
 80022f8:	b903      	cbnz	r3, 80022fc <__sflush_r+0x78>
 80022fa:	6560      	str	r0, [r4, #84]	@ 0x54
 80022fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80022fe:	602f      	str	r7, [r5, #0]
 8002300:	b1b9      	cbz	r1, 8002332 <__sflush_r+0xae>
 8002302:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002306:	4299      	cmp	r1, r3
 8002308:	d002      	beq.n	8002310 <__sflush_r+0x8c>
 800230a:	4628      	mov	r0, r5
 800230c:	f7ff fbf2 	bl	8001af4 <_free_r>
 8002310:	2300      	movs	r3, #0
 8002312:	6363      	str	r3, [r4, #52]	@ 0x34
 8002314:	e00d      	b.n	8002332 <__sflush_r+0xae>
 8002316:	2301      	movs	r3, #1
 8002318:	4628      	mov	r0, r5
 800231a:	47b0      	blx	r6
 800231c:	4602      	mov	r2, r0
 800231e:	1c50      	adds	r0, r2, #1
 8002320:	d1c9      	bne.n	80022b6 <__sflush_r+0x32>
 8002322:	682b      	ldr	r3, [r5, #0]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d0c6      	beq.n	80022b6 <__sflush_r+0x32>
 8002328:	2b1d      	cmp	r3, #29
 800232a:	d001      	beq.n	8002330 <__sflush_r+0xac>
 800232c:	2b16      	cmp	r3, #22
 800232e:	d11e      	bne.n	800236e <__sflush_r+0xea>
 8002330:	602f      	str	r7, [r5, #0]
 8002332:	2000      	movs	r0, #0
 8002334:	e022      	b.n	800237c <__sflush_r+0xf8>
 8002336:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800233a:	b21b      	sxth	r3, r3
 800233c:	e01b      	b.n	8002376 <__sflush_r+0xf2>
 800233e:	690f      	ldr	r7, [r1, #16]
 8002340:	2f00      	cmp	r7, #0
 8002342:	d0f6      	beq.n	8002332 <__sflush_r+0xae>
 8002344:	0793      	lsls	r3, r2, #30
 8002346:	680e      	ldr	r6, [r1, #0]
 8002348:	bf08      	it	eq
 800234a:	694b      	ldreq	r3, [r1, #20]
 800234c:	600f      	str	r7, [r1, #0]
 800234e:	bf18      	it	ne
 8002350:	2300      	movne	r3, #0
 8002352:	eba6 0807 	sub.w	r8, r6, r7
 8002356:	608b      	str	r3, [r1, #8]
 8002358:	f1b8 0f00 	cmp.w	r8, #0
 800235c:	dde9      	ble.n	8002332 <__sflush_r+0xae>
 800235e:	6a21      	ldr	r1, [r4, #32]
 8002360:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002362:	4643      	mov	r3, r8
 8002364:	463a      	mov	r2, r7
 8002366:	4628      	mov	r0, r5
 8002368:	47b0      	blx	r6
 800236a:	2800      	cmp	r0, #0
 800236c:	dc08      	bgt.n	8002380 <__sflush_r+0xfc>
 800236e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002372:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002376:	81a3      	strh	r3, [r4, #12]
 8002378:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800237c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002380:	4407      	add	r7, r0
 8002382:	eba8 0800 	sub.w	r8, r8, r0
 8002386:	e7e7      	b.n	8002358 <__sflush_r+0xd4>
 8002388:	dfbffffe 	.word	0xdfbffffe

0800238c <_fflush_r>:
 800238c:	b538      	push	{r3, r4, r5, lr}
 800238e:	690b      	ldr	r3, [r1, #16]
 8002390:	4605      	mov	r5, r0
 8002392:	460c      	mov	r4, r1
 8002394:	b913      	cbnz	r3, 800239c <_fflush_r+0x10>
 8002396:	2500      	movs	r5, #0
 8002398:	4628      	mov	r0, r5
 800239a:	bd38      	pop	{r3, r4, r5, pc}
 800239c:	b118      	cbz	r0, 80023a6 <_fflush_r+0x1a>
 800239e:	6a03      	ldr	r3, [r0, #32]
 80023a0:	b90b      	cbnz	r3, 80023a6 <_fflush_r+0x1a>
 80023a2:	f7ff f9ad 	bl	8001700 <__sinit>
 80023a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d0f3      	beq.n	8002396 <_fflush_r+0xa>
 80023ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80023b0:	07d0      	lsls	r0, r2, #31
 80023b2:	d404      	bmi.n	80023be <_fflush_r+0x32>
 80023b4:	0599      	lsls	r1, r3, #22
 80023b6:	d402      	bmi.n	80023be <_fflush_r+0x32>
 80023b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80023ba:	f7ff fb98 	bl	8001aee <__retarget_lock_acquire_recursive>
 80023be:	4628      	mov	r0, r5
 80023c0:	4621      	mov	r1, r4
 80023c2:	f7ff ff5f 	bl	8002284 <__sflush_r>
 80023c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80023c8:	07da      	lsls	r2, r3, #31
 80023ca:	4605      	mov	r5, r0
 80023cc:	d4e4      	bmi.n	8002398 <_fflush_r+0xc>
 80023ce:	89a3      	ldrh	r3, [r4, #12]
 80023d0:	059b      	lsls	r3, r3, #22
 80023d2:	d4e1      	bmi.n	8002398 <_fflush_r+0xc>
 80023d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80023d6:	f7ff fb8b 	bl	8001af0 <__retarget_lock_release_recursive>
 80023da:	e7dd      	b.n	8002398 <_fflush_r+0xc>

080023dc <__swhatbuf_r>:
 80023dc:	b570      	push	{r4, r5, r6, lr}
 80023de:	460c      	mov	r4, r1
 80023e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80023e4:	2900      	cmp	r1, #0
 80023e6:	b096      	sub	sp, #88	@ 0x58
 80023e8:	4615      	mov	r5, r2
 80023ea:	461e      	mov	r6, r3
 80023ec:	da0d      	bge.n	800240a <__swhatbuf_r+0x2e>
 80023ee:	89a3      	ldrh	r3, [r4, #12]
 80023f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80023f4:	f04f 0100 	mov.w	r1, #0
 80023f8:	bf14      	ite	ne
 80023fa:	2340      	movne	r3, #64	@ 0x40
 80023fc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002400:	2000      	movs	r0, #0
 8002402:	6031      	str	r1, [r6, #0]
 8002404:	602b      	str	r3, [r5, #0]
 8002406:	b016      	add	sp, #88	@ 0x58
 8002408:	bd70      	pop	{r4, r5, r6, pc}
 800240a:	466a      	mov	r2, sp
 800240c:	f000 f848 	bl	80024a0 <_fstat_r>
 8002410:	2800      	cmp	r0, #0
 8002412:	dbec      	blt.n	80023ee <__swhatbuf_r+0x12>
 8002414:	9901      	ldr	r1, [sp, #4]
 8002416:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800241a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800241e:	4259      	negs	r1, r3
 8002420:	4159      	adcs	r1, r3
 8002422:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002426:	e7eb      	b.n	8002400 <__swhatbuf_r+0x24>

08002428 <__smakebuf_r>:
 8002428:	898b      	ldrh	r3, [r1, #12]
 800242a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800242c:	079d      	lsls	r5, r3, #30
 800242e:	4606      	mov	r6, r0
 8002430:	460c      	mov	r4, r1
 8002432:	d507      	bpl.n	8002444 <__smakebuf_r+0x1c>
 8002434:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002438:	6023      	str	r3, [r4, #0]
 800243a:	6123      	str	r3, [r4, #16]
 800243c:	2301      	movs	r3, #1
 800243e:	6163      	str	r3, [r4, #20]
 8002440:	b003      	add	sp, #12
 8002442:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002444:	ab01      	add	r3, sp, #4
 8002446:	466a      	mov	r2, sp
 8002448:	f7ff ffc8 	bl	80023dc <__swhatbuf_r>
 800244c:	9f00      	ldr	r7, [sp, #0]
 800244e:	4605      	mov	r5, r0
 8002450:	4639      	mov	r1, r7
 8002452:	4630      	mov	r0, r6
 8002454:	f7ff fbba 	bl	8001bcc <_malloc_r>
 8002458:	b948      	cbnz	r0, 800246e <__smakebuf_r+0x46>
 800245a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800245e:	059a      	lsls	r2, r3, #22
 8002460:	d4ee      	bmi.n	8002440 <__smakebuf_r+0x18>
 8002462:	f023 0303 	bic.w	r3, r3, #3
 8002466:	f043 0302 	orr.w	r3, r3, #2
 800246a:	81a3      	strh	r3, [r4, #12]
 800246c:	e7e2      	b.n	8002434 <__smakebuf_r+0xc>
 800246e:	89a3      	ldrh	r3, [r4, #12]
 8002470:	6020      	str	r0, [r4, #0]
 8002472:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002476:	81a3      	strh	r3, [r4, #12]
 8002478:	9b01      	ldr	r3, [sp, #4]
 800247a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800247e:	b15b      	cbz	r3, 8002498 <__smakebuf_r+0x70>
 8002480:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002484:	4630      	mov	r0, r6
 8002486:	f000 f81d 	bl	80024c4 <_isatty_r>
 800248a:	b128      	cbz	r0, 8002498 <__smakebuf_r+0x70>
 800248c:	89a3      	ldrh	r3, [r4, #12]
 800248e:	f023 0303 	bic.w	r3, r3, #3
 8002492:	f043 0301 	orr.w	r3, r3, #1
 8002496:	81a3      	strh	r3, [r4, #12]
 8002498:	89a3      	ldrh	r3, [r4, #12]
 800249a:	431d      	orrs	r5, r3
 800249c:	81a5      	strh	r5, [r4, #12]
 800249e:	e7cf      	b.n	8002440 <__smakebuf_r+0x18>

080024a0 <_fstat_r>:
 80024a0:	b538      	push	{r3, r4, r5, lr}
 80024a2:	4d07      	ldr	r5, [pc, #28]	@ (80024c0 <_fstat_r+0x20>)
 80024a4:	2300      	movs	r3, #0
 80024a6:	4604      	mov	r4, r0
 80024a8:	4608      	mov	r0, r1
 80024aa:	4611      	mov	r1, r2
 80024ac:	602b      	str	r3, [r5, #0]
 80024ae:	f7fe f9d4 	bl	800085a <_fstat>
 80024b2:	1c43      	adds	r3, r0, #1
 80024b4:	d102      	bne.n	80024bc <_fstat_r+0x1c>
 80024b6:	682b      	ldr	r3, [r5, #0]
 80024b8:	b103      	cbz	r3, 80024bc <_fstat_r+0x1c>
 80024ba:	6023      	str	r3, [r4, #0]
 80024bc:	bd38      	pop	{r3, r4, r5, pc}
 80024be:	bf00      	nop
 80024c0:	20000210 	.word	0x20000210

080024c4 <_isatty_r>:
 80024c4:	b538      	push	{r3, r4, r5, lr}
 80024c6:	4d06      	ldr	r5, [pc, #24]	@ (80024e0 <_isatty_r+0x1c>)
 80024c8:	2300      	movs	r3, #0
 80024ca:	4604      	mov	r4, r0
 80024cc:	4608      	mov	r0, r1
 80024ce:	602b      	str	r3, [r5, #0]
 80024d0:	f7fe f9c8 	bl	8000864 <_isatty>
 80024d4:	1c43      	adds	r3, r0, #1
 80024d6:	d102      	bne.n	80024de <_isatty_r+0x1a>
 80024d8:	682b      	ldr	r3, [r5, #0]
 80024da:	b103      	cbz	r3, 80024de <_isatty_r+0x1a>
 80024dc:	6023      	str	r3, [r4, #0]
 80024de:	bd38      	pop	{r3, r4, r5, pc}
 80024e0:	20000210 	.word	0x20000210

080024e4 <_sbrk_r>:
 80024e4:	b538      	push	{r3, r4, r5, lr}
 80024e6:	4d06      	ldr	r5, [pc, #24]	@ (8002500 <_sbrk_r+0x1c>)
 80024e8:	2300      	movs	r3, #0
 80024ea:	4604      	mov	r4, r0
 80024ec:	4608      	mov	r0, r1
 80024ee:	602b      	str	r3, [r5, #0]
 80024f0:	f7fe f9bc 	bl	800086c <_sbrk>
 80024f4:	1c43      	adds	r3, r0, #1
 80024f6:	d102      	bne.n	80024fe <_sbrk_r+0x1a>
 80024f8:	682b      	ldr	r3, [r5, #0]
 80024fa:	b103      	cbz	r3, 80024fe <_sbrk_r+0x1a>
 80024fc:	6023      	str	r3, [r4, #0]
 80024fe:	bd38      	pop	{r3, r4, r5, pc}
 8002500:	20000210 	.word	0x20000210

08002504 <_init>:
 8002504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002506:	bf00      	nop
 8002508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800250a:	bc08      	pop	{r3}
 800250c:	469e      	mov	lr, r3
 800250e:	4770      	bx	lr

08002510 <_fini>:
 8002510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002512:	bf00      	nop
 8002514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002516:	bc08      	pop	{r3}
 8002518:	469e      	mov	lr, r3
 800251a:	4770      	bx	lr
