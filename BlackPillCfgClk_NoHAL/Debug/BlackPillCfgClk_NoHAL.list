
BlackPillCfgClk_NoHAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000248  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003e0  080003e8  000013e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003e0  080003e0  000013e8  2**0
                  CONTENTS
  4 .ARM          00000000  080003e0  080003e0  000013e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003e0  080003e8  000013e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003e0  080003e0  000013e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003e4  080003e4  000013e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000013e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003e8  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003e8  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000013e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000003fd  00000000  00000000  00001418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000168  00000000  00000000  00001815  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000060  00000000  00000000  00001980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000003f  00000000  00000000  000019e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dc82  00000000  00000000  00001a1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000005ad  00000000  00000000  0000f6a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004fe3a  00000000  00000000  0000fc4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0005fa88  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000c0  00000000  00000000  0005facc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0005fb8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080003c8 	.word	0x080003c8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	080003c8 	.word	0x080003c8

080001d8 <main>:
void LED_Config(void);
void make_delay(uint32_t delay_count);


int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0

	ConfigSysClock();
 80001dc:	f000 f812 	bl	8000204 <ConfigSysClock>

	LED_Config();
 80001e0:	f000 f886 	bl	80002f0 <LED_Config>
	{
//		GPIOC->ODR &= ~(1 << 13);		// Turn the LED on by setting Pin 13 low
//		make_delay(1000000);

//		GPIOC->ODR |= (1 << 13);		// Turn the LED off by setting Pin 13 high
		GPIOC->ODR ^= GPIOC->ODR;
 80001e4:	4b05      	ldr	r3, [pc, #20]	@ (80001fc <main+0x24>)
 80001e6:	695a      	ldr	r2, [r3, #20]
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <main+0x24>)
 80001ea:	695b      	ldr	r3, [r3, #20]
 80001ec:	4903      	ldr	r1, [pc, #12]	@ (80001fc <main+0x24>)
 80001ee:	4053      	eors	r3, r2
 80001f0:	614b      	str	r3, [r1, #20]
		make_delay(1000000);
 80001f2:	4803      	ldr	r0, [pc, #12]	@ (8000200 <main+0x28>)
 80001f4:	f000 f866 	bl	80002c4 <make_delay>
		GPIOC->ODR ^= GPIOC->ODR;
 80001f8:	bf00      	nop
 80001fa:	e7f3      	b.n	80001e4 <main+0xc>
 80001fc:	40020800 	.word	0x40020800
 8000200:	000f4240 	.word	0x000f4240

08000204 <ConfigSysClock>:
	}
}


void ConfigSysClock(void)
{
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
	#define PLL_P  	(0 << 16)		// Starts at bit 16 in the RCC PLL configuration register (2 bits)
	#define PLL_SRC	(1 << 22)		// Use HSE as PLL source
	#define PLL_EN	(1 << 24)		// Enable the PLL

	// 1) Power
	RCC->APB1ENR |= (0x1UL << (28U));					// Enable power interface clock
 8000208:	4b2a      	ldr	r3, [pc, #168]	@ (80002b4 <ConfigSysClock+0xb0>)
 800020a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800020c:	4a29      	ldr	r2, [pc, #164]	@ (80002b4 <ConfigSysClock+0xb0>)
 800020e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000212:	6413      	str	r3, [r2, #64]	@ 0x40
	PWR->CR |= ((0x1UL << (15U))|(1UL << (14U)));		// Set bits 15 and 14 high (Scale 1 mode)
 8000214:	4b28      	ldr	r3, [pc, #160]	@ (80002b8 <ConfigSysClock+0xb4>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a27      	ldr	r2, [pc, #156]	@ (80002b8 <ConfigSysClock+0xb4>)
 800021a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800021e:	6013      	str	r3, [r2, #0]

	// 2) HSE
	RCC->CR |= (0x1UL << (16U));				// Enable HSEON bit (16)
 8000220:	4b24      	ldr	r3, [pc, #144]	@ (80002b4 <ConfigSysClock+0xb0>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a23      	ldr	r2, [pc, #140]	@ (80002b4 <ConfigSysClock+0xb0>)
 8000226:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800022a:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & (0x1UL << (17U))));		// Wait until HSERDY bit (17) goes high
 800022c:	bf00      	nop
 800022e:	4b21      	ldr	r3, [pc, #132]	@ (80002b4 <ConfigSysClock+0xb0>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000236:	2b00      	cmp	r3, #0
 8000238:	d0f9      	beq.n	800022e <ConfigSysClock+0x2a>

	// 3) Configure flash as HAL would have done it:
	FLASH->ACR |= (FLASH_ACR_DCEN | FLASH_ACR_ICEN | FLASH_ACR_PRFTEN |FLASH_ACR_LATENCY_3WS);
 800023a:	4b20      	ldr	r3, [pc, #128]	@ (80002bc <ConfigSysClock+0xb8>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	4a1f      	ldr	r2, [pc, #124]	@ (80002bc <ConfigSysClock+0xb8>)
 8000240:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000244:	f043 0303 	orr.w	r3, r3, #3
 8000248:	6013      	str	r3, [r2, #0]


	// 4) Configure prescaler settings
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1;		// AHB
 800024a:	4b1a      	ldr	r3, [pc, #104]	@ (80002b4 <ConfigSysClock+0xb0>)
 800024c:	4a19      	ldr	r2, [pc, #100]	@ (80002b4 <ConfigSysClock+0xb0>)
 800024e:	689b      	ldr	r3, [r3, #8]
 8000250:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;		// APB1
 8000252:	4b18      	ldr	r3, [pc, #96]	@ (80002b4 <ConfigSysClock+0xb0>)
 8000254:	689b      	ldr	r3, [r3, #8]
 8000256:	4a17      	ldr	r2, [pc, #92]	@ (80002b4 <ConfigSysClock+0xb0>)
 8000258:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800025c:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;		// APB2
 800025e:	4b15      	ldr	r3, [pc, #84]	@ (80002b4 <ConfigSysClock+0xb0>)
 8000260:	4a14      	ldr	r2, [pc, #80]	@ (80002b4 <ConfigSysClock+0xb0>)
 8000262:	689b      	ldr	r3, [r3, #8]
 8000264:	6093      	str	r3, [r2, #8]

	// 5) Configure the PLL using HSE as the source
	RCC->PLLCFGR |= (PLL_M | PLL_N | PLL_P | PLL_SRC);
 8000266:	4b13      	ldr	r3, [pc, #76]	@ (80002b4 <ConfigSysClock+0xb0>)
 8000268:	685a      	ldr	r2, [r3, #4]
 800026a:	4912      	ldr	r1, [pc, #72]	@ (80002b4 <ConfigSysClock+0xb0>)
 800026c:	4b14      	ldr	r3, [pc, #80]	@ (80002c0 <ConfigSysClock+0xbc>)
 800026e:	4313      	orrs	r3, r2
 8000270:	604b      	str	r3, [r1, #4]

	// 6) Enable the PLL and confirm it has locked before moving on
	RCC->CR |= PLL_EN;
 8000272:	4b10      	ldr	r3, [pc, #64]	@ (80002b4 <ConfigSysClock+0xb0>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	4a0f      	ldr	r2, [pc, #60]	@ (80002b4 <ConfigSysClock+0xb0>)
 8000278:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800027c:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & (0x1UL << (25U))));
 800027e:	bf00      	nop
 8000280:	4b0c      	ldr	r3, [pc, #48]	@ (80002b4 <ConfigSysClock+0xb0>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000288:	2b00      	cmp	r3, #0
 800028a:	d0f9      	beq.n	8000280 <ConfigSysClock+0x7c>

	// 7) Select clock source as PLL and confirm it
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 800028c:	4b09      	ldr	r3, [pc, #36]	@ (80002b4 <ConfigSysClock+0xb0>)
 800028e:	689b      	ldr	r3, [r3, #8]
 8000290:	4a08      	ldr	r2, [pc, #32]	@ (80002b4 <ConfigSysClock+0xb0>)
 8000292:	f043 0302 	orr.w	r3, r3, #2
 8000296:	6093      	str	r3, [r2, #8]
	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL));
 8000298:	bf00      	nop
 800029a:	4b06      	ldr	r3, [pc, #24]	@ (80002b4 <ConfigSysClock+0xb0>)
 800029c:	689b      	ldr	r3, [r3, #8]
 800029e:	f003 0308 	and.w	r3, r3, #8
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d0f9      	beq.n	800029a <ConfigSysClock+0x96>
}
 80002a6:	bf00      	nop
 80002a8:	bf00      	nop
 80002aa:	46bd      	mov	sp, r7
 80002ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	40023800 	.word	0x40023800
 80002b8:	40007000 	.word	0x40007000
 80002bc:	40023c00 	.word	0x40023c00
 80002c0:	0040180c 	.word	0x0040180c

080002c4 <make_delay>:

void make_delay(uint32_t delay_count)
{
 80002c4:	b480      	push	{r7}
 80002c6:	b085      	sub	sp, #20
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
	uint32_t i;
	for(i = 0; i <= delay_count; i++){}
 80002cc:	2300      	movs	r3, #0
 80002ce:	60fb      	str	r3, [r7, #12]
 80002d0:	e002      	b.n	80002d8 <make_delay+0x14>
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	3301      	adds	r3, #1
 80002d6:	60fb      	str	r3, [r7, #12]
 80002d8:	68fa      	ldr	r2, [r7, #12]
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	429a      	cmp	r2, r3
 80002de:	d9f8      	bls.n	80002d2 <make_delay+0xe>
}
 80002e0:	bf00      	nop
 80002e2:	bf00      	nop
 80002e4:	3714      	adds	r7, #20
 80002e6:	46bd      	mov	sp, r7
 80002e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ec:	4770      	bx	lr
	...

080002f0 <LED_Config>:

void LED_Config(void)
{
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0
	#define GPIOC_EN		(1 << 2)		// RCC enable bit for Port C on AHB1
	#define GPIOC_MODE		(01 << 26)		// Mode bits of Pin 13 to make it an output

	RCC->AHB1ENR |= GPIOC_EN;				// Enable port C clock on the AHB1 bus
 80002f4:	4b0b      	ldr	r3, [pc, #44]	@ (8000324 <LED_Config+0x34>)
 80002f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002f8:	4a0a      	ldr	r2, [pc, #40]	@ (8000324 <LED_Config+0x34>)
 80002fa:	f043 0304 	orr.w	r3, r3, #4
 80002fe:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOC->MODER |= GPIOC_MODE;				// Make Pin 13 of port C an output
 8000300:	4b09      	ldr	r3, [pc, #36]	@ (8000328 <LED_Config+0x38>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a08      	ldr	r2, [pc, #32]	@ (8000328 <LED_Config+0x38>)
 8000306:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800030a:	6013      	str	r3, [r2, #0]
	GPIOC->ODR |= (1 << 13);				// Set Pin 13 high to keep LED off
 800030c:	4b06      	ldr	r3, [pc, #24]	@ (8000328 <LED_Config+0x38>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	4a05      	ldr	r2, [pc, #20]	@ (8000328 <LED_Config+0x38>)
 8000312:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000316:	6153      	str	r3, [r2, #20]
}
 8000318:	bf00      	nop
 800031a:	46bd      	mov	sp, r7
 800031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000320:	4770      	bx	lr
 8000322:	bf00      	nop
 8000324:	40023800 	.word	0x40023800
 8000328:	40020800 	.word	0x40020800

0800032c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800032c:	480d      	ldr	r0, [pc, #52]	@ (8000364 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800032e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000330:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000334:	480c      	ldr	r0, [pc, #48]	@ (8000368 <LoopForever+0x6>)
  ldr r1, =_edata
 8000336:	490d      	ldr	r1, [pc, #52]	@ (800036c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000338:	4a0d      	ldr	r2, [pc, #52]	@ (8000370 <LoopForever+0xe>)
  movs r3, #0
 800033a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800033c:	e002      	b.n	8000344 <LoopCopyDataInit>

0800033e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800033e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000340:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000342:	3304      	adds	r3, #4

08000344 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000344:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000346:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000348:	d3f9      	bcc.n	800033e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800034a:	4a0a      	ldr	r2, [pc, #40]	@ (8000374 <LoopForever+0x12>)
  ldr r4, =_ebss
 800034c:	4c0a      	ldr	r4, [pc, #40]	@ (8000378 <LoopForever+0x16>)
  movs r3, #0
 800034e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000350:	e001      	b.n	8000356 <LoopFillZerobss>

08000352 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000352:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000354:	3204      	adds	r2, #4

08000356 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000356:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000358:	d3fb      	bcc.n	8000352 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800035a:	f000 f811 	bl	8000380 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800035e:	f7ff ff3b 	bl	80001d8 <main>

08000362 <LoopForever>:

LoopForever:
  b LoopForever
 8000362:	e7fe      	b.n	8000362 <LoopForever>
  ldr   r0, =_estack
 8000364:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000368:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800036c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000370:	080003e8 	.word	0x080003e8
  ldr r2, =_sbss
 8000374:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000378:	2000001c 	.word	0x2000001c

0800037c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800037c:	e7fe      	b.n	800037c <ADC_IRQHandler>
	...

08000380 <__libc_init_array>:
 8000380:	b570      	push	{r4, r5, r6, lr}
 8000382:	4d0d      	ldr	r5, [pc, #52]	@ (80003b8 <__libc_init_array+0x38>)
 8000384:	4c0d      	ldr	r4, [pc, #52]	@ (80003bc <__libc_init_array+0x3c>)
 8000386:	1b64      	subs	r4, r4, r5
 8000388:	10a4      	asrs	r4, r4, #2
 800038a:	2600      	movs	r6, #0
 800038c:	42a6      	cmp	r6, r4
 800038e:	d109      	bne.n	80003a4 <__libc_init_array+0x24>
 8000390:	4d0b      	ldr	r5, [pc, #44]	@ (80003c0 <__libc_init_array+0x40>)
 8000392:	4c0c      	ldr	r4, [pc, #48]	@ (80003c4 <__libc_init_array+0x44>)
 8000394:	f000 f818 	bl	80003c8 <_init>
 8000398:	1b64      	subs	r4, r4, r5
 800039a:	10a4      	asrs	r4, r4, #2
 800039c:	2600      	movs	r6, #0
 800039e:	42a6      	cmp	r6, r4
 80003a0:	d105      	bne.n	80003ae <__libc_init_array+0x2e>
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80003a8:	4798      	blx	r3
 80003aa:	3601      	adds	r6, #1
 80003ac:	e7ee      	b.n	800038c <__libc_init_array+0xc>
 80003ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80003b2:	4798      	blx	r3
 80003b4:	3601      	adds	r6, #1
 80003b6:	e7f2      	b.n	800039e <__libc_init_array+0x1e>
 80003b8:	080003e0 	.word	0x080003e0
 80003bc:	080003e0 	.word	0x080003e0
 80003c0:	080003e0 	.word	0x080003e0
 80003c4:	080003e4 	.word	0x080003e4

080003c8 <_init>:
 80003c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ca:	bf00      	nop
 80003cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ce:	bc08      	pop	{r3}
 80003d0:	469e      	mov	lr, r3
 80003d2:	4770      	bx	lr

080003d4 <_fini>:
 80003d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003d6:	bf00      	nop
 80003d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003da:	bc08      	pop	{r3}
 80003dc:	469e      	mov	lr, r3
 80003de:	4770      	bx	lr
